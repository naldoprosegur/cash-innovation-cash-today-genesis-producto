CREATE OR REPLACE PACKAGE SAPR_PSERVICIO_###VERSION### AS 

  /*Version: ###VERSION_COMP###*/

  const$codFuncionalidad CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'SAPR_PSERVICIO_###VERSION###';
  const$version  CONSTANT gepr_pcomon_###VERSION###.tipo$desc_  := '###VERSION_COMP###';
  const$new_line  CONSTANT  gepr_pcomon_###VERSION###.tipo$cod_ := CHR(13);
  const$comilla_simple  CONSTANT  gepr_pcomon_###VERSION###.tipo$cod_ := CHR(39);

  /* Grabar Movimientos de Acredicacion */
  PROCEDURE sgrabar_mov_acreditacion(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_precinto           IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$adiv_nel_index          IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$adiv_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_div_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$aefdoc_nel_tipo         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$hacer_commit            IN gepr_pcomon_###VERSION###.tipo$bol_ := TRUE,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  /* Validar Movimientos Acreditacion */
  PROCEDURE svalidar_mov_acreditacion(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_cuenta_acreditacion OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_cuenta_comision     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_cuenta_tesoreria    OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$bol_controla_faturacion OUT gepr_pcomon_###VERSION###.tipo$nbol_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);


  /* Grabar Movimientos de ShipOut */
  PROCEDURE sgrabar_mov_shipout (
   par$oid_llamada               IN     gepr_pcomon_###VERSION###.tipo$oid_,
   par$cod_identificador_ajeno   IN     gepr_pcomon_###VERSION###.tipo$cod_,
   par$anel_index                IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$acod_device_id            IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$afyh_gestion              IN     gepr_pcomon_###VERSION###.tipo$fyhs_,
   par$afyh_contable             IN     gepr_pcomon_###VERSION###.tipo$fyhs_,
   par$anel_gmt_minuto           IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$avtdoc_nel_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$avtdoc_cod_termino        IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$avtdoc_des_valor          IN     gepr_pcomon_###VERSION###.tipo$descs_,
   par$acndoc_nel_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$acndoc_det_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$acndoc_cod_canal          IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$acndoc_collection_id      IN     gepr_pcomon_###VERSION###.tipo$descs_,
   par$acndoc_cod_sub_canal      IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$aefdoc_nel_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$aefdoc_det_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$aefdoc_cod_sub_canal      IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$aefdoc_cod_divisa         IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$aefdoc_cod_denominacion   IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$aefdoc_nel_cantidad       IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$aefdoc_num_importe        IN     gepr_pcomon_###VERSION###.tipo$imps_,
   par$info_ejecucion            IN     gepr_pcomon_###VERSION###.tipo$desc_,
   par$cod_usuario               IN     gepr_pcomon_###VERSION###.tipo$usr_,
   par$cod_cultura               IN     gepr_pcomon_###VERSION###.tipo$cod_,
   par$cod_pais                  IN     gepr_pcomon_###VERSION###.tipo$cod_,
   par$rc_validaciones              OUT SYS_REFCURSOR,
   par$rc_planificaciones           OUT SYS_REFCURSOR,
   par$rc_documentos                OUT SYS_REFCURSOR,
   par$cod_ejecucion                OUT gepr_pcomon_###VERSION###.tipo$nel_,
   par$acod_actual_id            IN     gepr_pcomon_###VERSION###.tipo$descs_);

   PROCEDURE svalidar_mov_shipout(
                                    par$oid_llamada     IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                 par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$oid_cuenta_prosegur     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$oid_cuenta_tesoreria    OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$bol_controla_faturacion OUT gepr_pcomon_###VERSION###.tipo$nbol_,
                                 par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                 par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Grabar Movimientos de Recuento */
  PROCEDURE sgrabar_mov_recuento(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                 par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$acod_precinto           IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                 par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                 par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                 par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                 par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                 par$adiv_nel_index          IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$adiv_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$aefdoc_div_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                 par$aefdoc_nel_tipo         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                 par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                 par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$rc_validaciones         OUT sys_refcursor,
                                 par$rc_planificaciones      OUT sys_refcursor,
                                 par$rc_documentos           OUT sys_refcursor,
                                 par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  /* Validar Movimientos Recuento */
  PROCEDURE svalidar_mov_recuento(par$oid_llamada IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                    par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_cuenta_comision     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_cuenta_tesoreria    OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$bol_controla_faturacion OUT gepr_pcomon_###VERSION###.tipo$nbol_,
                                    par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                    par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

   /* Grabar Movimientos de Cierre Facturacion */
  PROCEDURE sgrabar_mov_cierre_fact(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,                                     
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$adiv_nel_index          IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$adiv_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_div_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  /* Validar Movimientos Cierre Facturacion */
  PROCEDURE svalidar_mov_cierre_fact(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                    par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_cuenta_comision     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$bol_controla_faturacion OUT gepr_pcomon_###VERSION###.tipo$nbol_,
                                    par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                    par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

 /* Grabar Movimientos de Provision Efectivo */
  PROCEDURE sgrabar_mov_provisionefectivo(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$acod_banco_capital      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                          par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                          par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,                                          
                                          par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                          par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                          par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                          par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                          par$adiv_nel_index          IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$adiv_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$aefdoc_div_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                          par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                          par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                          par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                          par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$rc_validaciones         OUT sys_refcursor,
                                          par$rc_documentos           OUT sys_refcursor,
                                          par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  PROCEDURE svalidar_mov_provisionefectivo(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                            par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                           par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                           par$cod_banco_capital       IN gepr_pcomon_###VERSION###.tipo$cod_,
                                           par$oid_cuenta_capital      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                           par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                           par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                           par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                           par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);
  /* Grabar Movimientos de Ajuste */
  PROCEDURE sgrabar_mov_ajuste(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual             IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_saldo_fisico       IN gepr_pcomon_###VERSION###.tipo$nels_, 
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

     PROCEDURE svalidar_mov_ajuste( par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,  
                                par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$oid_cuenta_ajuste_p     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_cuenta_ajuste_p_sf  OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_cuenta_ajuste_n     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_cuenta_ajuste_n_sf  OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

 /* Guardar documento */
  PROCEDURE sguardar_documento(par$oid_llamada               IN gepr_pcomon_###VERSION###.tipo$oid_,
                               par$adocs_oid                 IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_formulario      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_tipo_documento  IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_fyh_gestion         IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                               par$adocs_fyh_contable        IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                               par$adocs_cod_actual_id       IN gepr_pcomon_###VERSION###.tipo$descs_,
                               par$adocs_cod_collection_id   IN gepr_pcomon_###VERSION###.tipo$descs_,
                               par$adocs_cod_externo         IN gepr_pcomon_###VERSION###.tipo$cods_,
                               par$adocs_oid_cuenta_ori      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_cuenta_des      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_cuentasaldo_ori IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_cuentasaldo_des IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_sector_ori      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_sector_des      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_oid_documento      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_oid_divisa         IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_oid_denominacion   IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_oid_unid_medida    IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_cod_niv_detalle    IN gepr_pcomon_###VERSION###.tipo$cods_,
                               par$aefdoc_cod_tp_efec_tot    IN gepr_pcomon_###VERSION###.tipo$cods_,
                               par$aefdoc_oid_calidad        IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_num_importe        IN gepr_pcomon_###VERSION###.tipo$imps_,
                               par$aefdoc_nel_cantidad       IN gepr_pcomon_###VERSION###.tipo$nels_,
                               par$avtdoc_oid_documento      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$avtdoc_oid_termino        IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$avtdoc_des_valor          IN gepr_pcomon_###VERSION###.tipo$descs_,
                               par$cod_usuario               IN gepr_pcomon_###VERSION###.tipo$usr_,
                               par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_,
                               par$cod_ejecucion             OUT gepr_pcomon_###VERSION###.tipo$nel_,
                               par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_)  ;

  /* Validar terminos */
  PROCEDURE svalidar_terminos(par$nel_index            IN gepr_pcomon_###VERSION###.tipo$nel_,
                              par$entrada_cod_termino  IN gepr_pcomon_###VERSION###.tipo$cod_,
                              par$entrada_des_valor    IN gepr_pcomon_###VERSION###.tipo$desc_,
                              par$saida_oid_termino   OUT gepr_pcomon_###VERSION###.tipo$oid_,
                              par$saida_des_valor     OUT gepr_pcomon_###VERSION###.tipo$desc_,
                              par$cod_usuario          IN gepr_pcomon_###VERSION###.tipo$cod_,
                              par$cod_cultura          IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Validar Valores */
   PROCEDURE svalidar_valores(par$oid_llamada               IN gepr_pcomon_###VERSION###.tipo$oid_,
                             par$cod_identificador_ajeno   IN gepr_pcomon_###VERSION###.tipo$cod_,
                             par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_,
                             par$entrada_cod_divisa        IN gepr_pcomon_###VERSION###.tipo$cod_,
                             par$entrada_cod_denominacion  IN gepr_pcomon_###VERSION###.tipo$cod_,
                             par$entrada_nel_cantidad      IN gepr_pcomon_###VERSION###.tipo$nel_,
                             par$entrada_num_importe       IN gepr_pcomon_###VERSION###.tipo$imp_,
                             par$saida_oid_divisa          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                             par$saida_oid_denominacio     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                             par$saida_oid_unid_medida     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                             par$saida_cod_niv_detalle     OUT gepr_pcomon_###VERSION###.tipo$cod_,
                             par$saida_cod_tp_efec_tot     OUT gepr_pcomon_###VERSION###.tipo$cod_,
                             par$saida_oid_calidad         OUT gepr_pcomon_###VERSION###.tipo$oid_,
                             par$saida_num_importe         OUT gepr_pcomon_###VERSION###.tipo$imp_,
                             par$saida_nel_cantidad        OUT gepr_pcomon_###VERSION###.tipo$nel_,
                             par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Validar valores acreditacion */
  PROCEDURE svalidar_valores_acreditacion(par$oid_llamada               IN gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$cod_identificador_ajeno   IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$entrada_cod_divisa        IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$entrada_cod_denominacion  IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$entrada_nel_cantidad      IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$entrada_num_importe       IN gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$entrada_nel_tipo          IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$saida_acr_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_acr_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_acr_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_acr_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_acr_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_acr_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_acr_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_acr_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$saida_com_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_com_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_com_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_com_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_com_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_com_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_com_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_com_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_, 
                                          par$saida_tot_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_tot_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_tot_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_tot_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_tot_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_tot_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_tot_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_tot_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Validar valores recuento */
  PROCEDURE svalidar_valores_recuento(par$cod_identificador_ajeno   IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$entrada_cod_divisa        IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$entrada_cod_denominacion  IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$entrada_nel_cantidad      IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$entrada_num_importe       IN gepr_pcomon_###VERSION###.tipo$imp_,
                                      par$entrada_nel_tipo          IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$saida_con_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_con_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_con_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_con_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_con_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_con_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_con_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                      par$saida_con_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$saida_dec_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dec_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dec_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dec_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_dec_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_dec_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dec_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                      par$saida_dec_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$saida_dif_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dif_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dif_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dif_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_dif_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_dif_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dif_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                      par$saida_dif_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Recuperar valores saldos */
  PROCEDURE srecuperar_valores_saldos(par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$bol_disponible          IN gepr_pcomon_###VERSION###.tipo$nbol_,
                                      par$saida_oids_cuenta       OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_cliente      OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_subcliente   OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_pto_servicio OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_cuenta_saldo OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_divisa       OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_denominacio  OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_unid_medida  OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_cods_niv_detalle  OUT gepr_pcomon_###VERSION###.tipo$cods_,
                                      par$saida_cods_tp_efec_tot  OUT gepr_pcomon_###VERSION###.tipo$cods_,
                                      par$saida_oids_calidad      OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_nums_importe      OUT gepr_pcomon_###VERSION###.tipo$imps_,
                                      par$saida_nels_cantidad     OUT gepr_pcomon_###VERSION###.tipo$nels_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_)  ;

   /* Validar valores ajuste */
  PROCEDURE svalidar_valores_ajuste(par$cod_identificador_ajeno   IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$entrada_cod_divisa        IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$entrada_cod_denominacion  IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$entrada_nel_cantidad      IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$entrada_num_importe       IN gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_pos_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_pos_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_pos_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_pos_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_pos_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_pos_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_pos_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_pos_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$saida_neg_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_neg_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_neg_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_neg_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_neg_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_neg_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_neg_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_neg_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_, 
                                          par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Recuperar fomularios */
  PROCEDURE srecuperar_formularios(par$cod_formulario     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                   par$oid_formulario     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                   par$oid_tipo_documento OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                   par$des_cod_externo    OUT gepr_pcomon_###VERSION###.tipo$cod_);

  /* Validar Cuenta */
  PROCEDURE svalidar_cuenta(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                            par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                            par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                            par$bol_esmaquina           IN gepr_pcomon_###VERSION###.tipo$nbol_,
                            par$bol_validar_punto       IN gepr_pcomon_###VERSION###.tipo$nbol_,
                            par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$oid_cuenta              OUT gepr_pcomon_###VERSION###.tipo$oid_,
                            par$oid_sector              OUT gepr_pcomon_###VERSION###.tipo$oid_);

  /* Validar Fecha */
  PROCEDURE svalidar_fecha(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                           par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                           par$oid_sector_mae          IN gepr_pcomon_###VERSION###.tipo$oid_,
                           par$nel_gmt_minuto          IN gepr_pcomon_###VERSION###.tipo$nel_,
                           par$fyh_gestion             IN OUT gepr_pcomon_###VERSION###.tipo$fyh_,
                           par$fyh_gestion_gmt0        OUT gepr_pcomon_###VERSION###.tipo$fyh_,
                           par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_);
  /* Validar ActualId */                
 PROCEDURE svalidar_actual_id(par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$nel_index        IN gepr_pcomon_###VERSION###.tipo$nel_,
                                   par$fyh_gestion      IN gepr_pcomon_###VERSION###.tipo$fyh_,                                   
                                   par$cod_actual_id    IN gepr_pcomon_###VERSION###.tipo$desc_,                                 
                                   par$cod_cultura      IN gepr_pcomon_###VERSION###.tipo$cod_);
   /* Grabar Movimientos de CashOut */
  PROCEDURE sgrabar_mov_cashout(par$oid_llamada     IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) ;

    /* Validar Movimientos CashOut */
  PROCEDURE svalidar_mov_cashout(par$oid_llamada                  IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Grabar Movimientos de CashIn */
  PROCEDURE sgrabar_mov_cashin(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  /* Validar Movimientos CashIn */
  PROCEDURE svalidar_mov_cashin(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Grabar Movimientos de MoveOut */
  PROCEDURE sgrabar_mov_moveout(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  /* Validar Movimientos MoveOut */
  PROCEDURE svalidar_mov_moveout(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Grabar Movimientos de Balance */
  PROCEDURE sgrabar_mov_balance(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  /* Validar Movimientos Balance */
  PROCEDURE svalidar_mov_balance(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Grabar Movimientos de ShipIn */
  PROCEDURE sgrabar_mov_shipin(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  /* Validar Movimientos ShipIn */
  PROCEDURE svalidar_mov_shipin(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Grabar Movimientos de MoveIn */
  PROCEDURE sgrabar_mov_movein(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  /* Validar Movimientos MoveIn */
  PROCEDURE svalidar_mov_movein(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Grabar Movimientos de Recojo */
  PROCEDURE sgrabar_mov_recojo( par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                par$acod_precinto           IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$hacer_commit            IN gepr_pcomon_###VERSION###.tipo$bol_ := TRUE,
                                par$rc_validaciones         OUT sys_refcursor,
                                par$rc_planificaciones      OUT sys_refcursor,
                                par$rc_documentos           OUT sys_refcursor,
                                par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);

  /* Validar Movimientos Recojo */
  PROCEDURE svalidar_mov_recojo(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Grabar Movimientos de Bóveda */
  PROCEDURE sgrabar_mov_boveda( par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                par$acod_precinto           IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$hacer_commit            IN gepr_pcomon_###VERSION###.tipo$bol_ := TRUE,
                                par$rc_validaciones         OUT sys_refcursor,
                                par$rc_planificaciones      OUT sys_refcursor,
                                par$rc_documentos           OUT sys_refcursor,
                                par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_);
                                
  /* Validar Movimientos Bóveda */
  PROCEDURE svalidar_mov_boveda(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_);

  /* Validar codigo externo */
  FUNCTION fvalidar_codigo_externo(par$nel_index        IN gepr_pcomon_###VERSION###.tipo$nel_,
                                   par$des_cod_externo  IN gepr_pcomon_###VERSION###.tipo$cod_,
                                   par$cod_device_id    IN gepr_pcomon_###VERSION###.tipo$cod_,
                                   par$fyh_gestion      IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                   par$cod_precinto     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                   par$oid_sector_mae   IN gepr_pcomon_###VERSION###.tipo$oid_,
                                   par$fyh_gestion_gmt0 IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                   par$cod_cultura      IN gepr_pcomon_###VERSION###.tipo$cod_)
    RETURN gepr_pcomon_###VERSION###.tipo$nel_;

  /* Cargar codigo externo */
  FUNCTION fcargar_codigo_externo(par$des_cod_externo     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_device_id       IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$fyh_gestion         IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                  par$cod_precinto        IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$oid_sector_mae      IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$fyh_gestion_gmt0    IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                  par$nel_sumar_secuencia IN gepr_pcomon_###VERSION###.tipo$nel_)
    RETURN gepr_pcomon_###VERSION###.tipo$cod_;

  /* Validar si existe error con el movimiento*/
  FUNCTION fhay_error(par$nel_index IN gepr_pcomon_###VERSION###.tipo$nel_) RETURN BOOLEAN;

  /* Validar si existe error en el servicio confirmar periodos*/
  FUNCTION fhay_error_confir_periodos(par$nel_index IN gepr_pcomon_###VERSION###.tipo$nel_) RETURN BOOLEAN;


  /*Se encarga de grabar la estructura de Clientes en caso de que las entidades
   no existan en el alta de movimientos  */
  PROCEDURE sgrabar_clientes(
                        par$oid_llamada                      IN gepr_pcomon_###VERSION###.tipo$oid_,
                        /* CLIENTE */
                        par$anel_cli_index                   IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$acod_cli_cliente                 IN gepr_pcomon_###VERSION###.tipo$cods_,
                        par$ades_cli_cliente                 IN gepr_pcomon_###VERSION###.tipo$descs_,
                        par$aoid_cli_tipo_cliente            IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$acod_cli_bancario                IN gepr_pcomon_###VERSION###.tipo$cods_,
                        par$abol_cli_vigente                 IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_cli_totaliza_saldo          IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_cli_abona_por_total         IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_cli_banco_capital           IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_cli_banco_comision          IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$anum_cli_percent_comision        IN gepr_pcomon_###VERSION###.tipo$nels_,
                        /* SUBCLIENTE */
                        par$aoid_sc_cliente                  IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$anel_sc_cli_index                IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$anel_sc_index                    IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$acod_sc_subcliente               IN gepr_pcomon_###VERSION###.tipo$cods_,
                        par$ades_sc_subcliente               IN gepr_pcomon_###VERSION###.tipo$descs_,
                        par$aoid_sc_tipo_subcliente          IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$abol_sc_enviado_saldos           IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_sc_vigente                  IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_sc_totaliza_saldo           IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        /* PUNTO_SERVICIO */
                        par$aoid_pto_subcliente              IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$anel_pto_index                   IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$anel_pto_sc_index                IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$acod_pto_pto_servicio            IN gepr_pcomon_###VERSION###.tipo$cods_,
                        par$ades_pto_pto_servicio            IN gepr_pcomon_###VERSION###.tipo$descs_,
                        par$aoid_pto_tipo_pto_servicio       IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$abol_pto_vigente                 IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_pto_totaliza_saldo          IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$cod_usuario                      IN gepr_pcomon_###VERSION###.tipo$desc_);

  -- Es responsable por confirmar los períodos.
  PROCEDURE sconfirmar_periodos(
                                    par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$adevice_id            IN gepr_pcomon_###VERSION###.tipo$cods_,
                                    par$aidentificador        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                    par$acodigo               IN gepr_pcomon_###VERSION###.tipo$cods_,
                                    par$aconfirmacion         IN gepr_pcomon_###VERSION###.tipo$cods_,
                                    par$afecha_hora           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                    par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_,
                                    par$cod_cultura           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_pais              IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$rc_errores_confirma   OUT sys_refcursor,
                                    par$rc_validaciones       OUT sys_refcursor
  );

  -- Es responsable por confirmar los períodos de acreditacion.
  PROCEDURE sconfirmar_periodos_ac(
                                    par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_periodo           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$cod_identificador     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_device_id         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_mensaje           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_confirmacion      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$fecha_hora            IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                    par$intentos_confirmacion IN gepr_pcomon_###VERSION###.tipo$nel_,
                                    par$max_intentos_confir   IN gepr_pcomon_###VERSION###.tipo$nel_,
                                    par$oid_estado_periodo_AC IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_estado_periodo_RE IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_estado_periodo_NA IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_
  );

  PROCEDURE sconfirmar_periodos_re(
                                    par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_periodo           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$cod_identificador     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_device_id         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_mensaje           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_confirmacion      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$fecha_hora            IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                    par$intentos_confirmacion IN gepr_pcomon_###VERSION###.tipo$nel_,
                                    par$max_intentos_confir   IN gepr_pcomon_###VERSION###.tipo$nel_,
                                    par$oid_estado_periodo_CF IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_estado_periodo_RE IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_estado_periodo_NC IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_);

  PROCEDURE sconfirmar_periodos_bo(
                                  par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_periodo           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$cod_identificador     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_device_id         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_mensaje           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_confirmacion      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$fecha_hora            IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                  par$intentos_confirmacion IN gepr_pcomon_###VERSION###.tipo$nel_,
                                  par$max_intentos_confir   IN gepr_pcomon_###VERSION###.tipo$nel_,
                                  par$oid_estado_periodo_CF IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_estado_periodo_RE IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_estado_periodo_NC IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_);

  PROCEDURE sreconfirmar_periodos(
                                par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$adevice_id            IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$aidentificador        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$atipo_periodo         IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_cultura           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_pais              IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$rc_validaciones       OUT sys_refcursor);

END SAPR_PSERVICIO_###VERSION###;
/
create or replace PACKAGE BODY SAPR_PSERVICIO_###VERSION### AS

  /* Grabar Movimientos de Acredicacion */
  PROCEDURE sgrabar_mov_acreditacion(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_precinto           IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$adiv_nel_index          IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$adiv_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_div_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$aefdoc_nel_tipo         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$hacer_commit            IN gepr_pcomon_###VERSION###.tipo$bol_ := TRUE,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_acreditacion';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);

      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$bol_controla_faturacion   gepr_pcomon_###VERSION###.tipo$nbol_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;

      /* Formularios */
      var$oid_formulario_maeacr     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maeacr gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maeacr    gepr_pcomon_###VERSION###.tipo$cod_;
      var$oid_formulario_maeant     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maeant gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maeant    gepr_pcomon_###VERSION###.tipo$cod_;
      var$oid_formulario_maecom     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maecom gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maecom    gepr_pcomon_###VERSION###.tipo$cod_;
      var$oid_formulario_maetot     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maetot gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maetot    gepr_pcomon_###VERSION###.tipo$cod_;


      /* Cuentas */
      var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_cuenta_acreditacion   gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_cuenta_comision       gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_cuenta_tesoreria      gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_boveda         gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
      var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
      var$acod_collection_id        gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$auxeacr_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxeacr_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxeacr_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxeacr_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxeacr_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxeacr_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxeacr_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxeacr_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;
      var$auxecom_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxecom_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxecom_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxecom_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxecom_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxecom_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxecom_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxecom_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_; 
      var$auxetot_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxetot_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxetot_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxetot_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxetot_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxetot_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxetot_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxetot_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;
      var$auxt_oid_termino          gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor            gepr_pcomon_###VERSION###.tipo$descs_;
      var$array_nulo                gepr_pcomon_###VERSION###.tipo$descs_;

      var$aux_maeacr_secuencia      gepr_pcomon_###VERSION###.tipo$nel_;
      var$aux_maeant_secuencia      gepr_pcomon_###VERSION###.tipo$nel_;
      var$aux_maecom_secuencia      gepr_pcomon_###VERSION###.tipo$nel_;
      var$aux_maetot_secuencia      gepr_pcomon_###VERSION###.tipo$nel_;

      /*Logs de movimientos*/
      var$obs_detalle           gepr_pcomon_###VERSION###.tipo$obs_; 

    BEGIN

      /* #### Inicializar los cursores #### */
      OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
      OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
      OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

      IF par$hacer_commit THEN
        /* Limpiar tabla temporaria */
        DELETE SAPR_GTT_TAUXILIAR;
        COMMIT;
      END IF;
     
      IF par$oid_llamada IS NOT NULL THEN
        var$obs_detalle := 'par$oid_llamada: ' || par$oid_llamada || const$new_line;
        var$obs_detalle := var$obs_detalle || 'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line;
        FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
          var$obs_detalle := var$obs_detalle || 'par$anel_index('|| idx ||'): ' || par$anel_index(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_cliente('|| idx ||'): ' || par$acod_cliente(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_device_id('|| idx ||'): ' || par$acod_device_id(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_sub_cliente('|| idx ||'): ' || par$acod_sub_cliente(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_punto_servicio('|| idx ||'): ' || par$acod_punto_servicio(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$afyh_gestion('|| idx ||'): ' || par$afyh_gestion(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$afyh_contable('|| idx ||'): ' || par$afyh_contable(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$anel_gmt_minuto('|| idx ||'): ' || par$anel_gmt_minuto(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_actual_id('|| idx ||'): ' || par$acod_actual_id(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_collection_id('|| idx ||'): ' || par$acod_collection_id(idx) || const$new_line;
        END LOOP;

        FOR idx1 IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
          var$obs_detalle := var$obs_detalle || 'par$avtdoc_nel_index('|| idx1 ||'): ' || par$avtdoc_nel_index(idx1) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$avtdoc_cod_termino('|| idx1 ||'): ' || par$avtdoc_cod_termino(idx1) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$avtdoc_des_valor('|| idx1 ||'): ' || par$avtdoc_des_valor(idx1) || const$new_line;
        END LOOP;

        FOR idx IN par$adiv_nel_index.first .. par$adiv_nel_index.last LOOP
          var$obs_detalle := var$obs_detalle || 'par$adiv_nel_index('|| idx ||'): ' || par$adiv_nel_index(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$adiv_index('|| idx ||'): ' || par$adiv_index(idx) || const$new_line;
        END LOOP;

        FOR idx2 IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP
          var$obs_detalle := var$obs_detalle || 'par$aefdoc_div_index('|| idx2 ||'): ' || par$aefdoc_div_index(idx2) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$aefdoc_nel_index('|| idx2 ||'): ' || par$aefdoc_nel_index(idx2) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$aefdoc_cod_divisa('|| idx2 ||'): ' || par$aefdoc_cod_divisa(idx2) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$aefdoc_cod_denominacion('|| idx2 ||'): ' || par$aefdoc_cod_denominacion(idx2) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$aefdoc_nel_cantidad('|| idx2 ||'): ' || par$aefdoc_nel_cantidad(idx2) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$aefdoc_num_importe('|| idx2 ||'): ' || par$aefdoc_num_importe(idx2) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$aefdoc_nel_tipo('|| idx2 ||'): ' || par$aefdoc_nel_tipo(idx2) || const$new_line;
        END LOOP;

        var$obs_detalle := var$obs_detalle || 'par$info_ejecucion: ' || par$info_ejecucion || const$new_line;
        var$obs_detalle := var$obs_detalle || 'par$cod_usuario: ' || par$cod_usuario || const$new_line;
        var$obs_detalle := var$obs_detalle || 'par$cod_cultura: ' || par$cod_cultura || const$new_line;
        var$obs_detalle := var$obs_detalle || 'par$cod_pais: ' || par$cod_pais || const$new_line;
        var$obs_detalle := var$obs_detalle || 'par$hacer_commit: ' ||  case when par$hacer_commit then 'true' else 'false'end || const$new_line;
        
        /* Log de los parametros de entradas al procedure */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$obs_detalle,
                          par$cod_identificador   => '');
      END IF;
      
      /* Recuperar Formularios - MAEACR */
      srecuperar_formularios(par$cod_formulario     => 'MAEACR',
                             par$oid_formulario     => var$oid_formulario_maeacr,
                             par$oid_tipo_documento => var$oid_tipo_documento_maeacr,
                             par$des_cod_externo    => var$des_cod_externo_maeacr);

      var$obs_detalle := '';
      var$obs_detalle := var$obs_detalle || 'srecuperar_formularios(par$cod_formulario     =>' || const$comilla_simple|| 'MAEACR' || const$comilla_simple || ', ' || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$oid_formulario: ' || var$oid_formulario_maeacr || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$oid_tipo_documento: ' || var$oid_tipo_documento_maeacr || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$des_cod_externo: ' || var$des_cod_externo_maeacr || const$new_line;

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => var$obs_detalle,
                        par$cod_identificador   => '');

      /* Recuperar Formularios - MAEANT */
      srecuperar_formularios(par$cod_formulario     => 'MAEANT',
                             par$oid_formulario     => var$oid_formulario_maeant,
                             par$oid_tipo_documento => var$oid_tipo_documento_maeant,
                             par$des_cod_externo    => var$des_cod_externo_maeant);

      var$obs_detalle := '';
      var$obs_detalle := var$obs_detalle || 'srecuperar_formularios(par$cod_formulario     =>' || const$comilla_simple|| 'MAEANT' || const$comilla_simple || ', ' || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$oid_formulario: ' || var$oid_formulario_maeant || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$oid_tipo_documento: ' || var$oid_tipo_documento_maeant || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$des_cod_externo: ' || var$des_cod_externo_maeant || const$new_line;
      
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => var$obs_detalle,
                        par$cod_identificador   => '');

      /* Recuperar Formularios - MAECOM */
      srecuperar_formularios(par$cod_formulario     => 'MAECOM',
                             par$oid_formulario     => var$oid_formulario_maecom,
                             par$oid_tipo_documento => var$oid_tipo_documento_maecom,
                             par$des_cod_externo    => var$des_cod_externo_maecom);

      var$obs_detalle := '';
      var$obs_detalle := var$obs_detalle || 'srecuperar_formularios(par$cod_formulario     =>' || const$comilla_simple|| 'MAECOM' || const$comilla_simple || ', ' || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$oid_formulario: ' || var$oid_formulario_maecom || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$oid_tipo_documento: ' || var$oid_tipo_documento_maecom || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$des_cod_externo: ' || var$des_cod_externo_maecom || const$new_line;
      
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => var$obs_detalle,
                        par$cod_identificador   => '');

      /* Recuperar Formularios -  MAETOT*/
      srecuperar_formularios(par$cod_formulario     => 'MAETOT',
                             par$oid_formulario     => var$oid_formulario_maetot,
                             par$oid_tipo_documento => var$oid_tipo_documento_maetot,
                             par$des_cod_externo    => var$des_cod_externo_maetot);

      var$obs_detalle := '';
      var$obs_detalle := var$obs_detalle || 'srecuperar_formularios(par$cod_formulario     =>' || const$comilla_simple|| 'MAETOT' || const$comilla_simple || ', ' || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$oid_formulario: ' || var$oid_formulario_maetot || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$oid_tipo_documento: ' || var$oid_tipo_documento_maetot || const$new_line;
      var$obs_detalle := var$obs_detalle || 'par$des_cod_externo: ' || var$des_cod_externo_maetot || const$new_line;
      
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => var$obs_detalle,
                        par$cod_identificador   => '');

      FOR idx IN par$anel_index.first .. par$anel_index.last LOOP

        BEGIN
          /* Limpiar tabla temporaria */
          DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES', 'TIPO_PERIODO_AC', 'TIPO_PERIODO_RE', 'TIPO_PERIODO_BO', 'VALIDACIONES_FECHA_CONFIRMAR');
          
          var$adocs_oid.delete;
          var$adocs_oid_formulario.delete;
          var$adocs_fyh_gestion.delete;
          var$adocs_fyh_contable.delete;
          var$acod_actual_id.delete;
          var$adocs_cod_externo.delete;
          var$adocs_oid_cuenta_ori.delete;
          var$adocs_oid_cuenta_des.delete;
          var$adocs_oid_cuentasaldo_ori.delete;
          var$adocs_oid_cuentasaldo_des.delete;
          var$adocs_oid_sector_ori.delete;
          var$adocs_oid_sector_des.delete;
          var$aefdoc_oid_documento.delete;
          var$aefdoc_oid_divisa.delete;
          var$aefdoc_oid_denominacion.delete;
          var$aefdoc_oid_unid_medida.delete;
          var$aefdoc_cod_niv_detalle.delete;
          var$aefdoc_cod_tp_efec_tot.delete;
          var$aefdoc_oid_calidad.delete;
          var$aefdoc_num_importe.delete;
          var$aefdoc_nel_cantidad.delete;
          var$avtdoc_oid_documento.delete;
          var$avtdoc_oid_termino.delete;
          var$avtdoc_des_valor.delete;

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Por ingresar en svalidar_mov_acreditaciion()',
                              par$cod_identificador   => '');

          /* Procedure responsable por validaciones del documento */
          svalidar_mov_acreditacion(par$oid_llamada => par$oid_llamada,
                                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                    par$nel_index               => par$anel_index(idx),
                                    par$cod_device_id           => par$acod_device_id(idx),
                                    par$cod_cliente             => par$acod_cliente(idx),
                                    par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                    par$cod_punto_servicio      => par$acod_punto_servicio(idx),
                                    par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                    par$oid_cuenta_acreditacion => var$oid_cuenta_acreditacion,
                                    par$oid_cuenta_comision     => var$oid_cuenta_comision,
                                    par$oid_cuenta_tesoreria    => var$oid_cuenta_tesoreria,
                                    par$oid_sector_mae          => var$oid_sector_mae,
                                    par$oid_sector_boveda       => var$oid_sector_boveda,
                                    par$bol_controla_faturacion => var$bol_controla_faturacion,
                                    par$cod_cultura             => par$cod_cultura,
                                    par$cod_usuario             => par$cod_usuario,
                                    par$cod_pais                => par$cod_pais);
          
          IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Por ingresar en svalidar_actual_id()',
                                par$cod_identificador   => '');
            svalidar_actual_id(
              par$oid_llamada  => par$oid_llamada,
              par$nel_index    => par$anel_index(idx),
              par$fyh_gestion  => par$afyh_gestion(idx),
              par$cod_actual_id=> par$acod_actual_id(idx),
              par$cod_cultura  => par$cod_cultura);


            /* Validar fecha gestion */
            var$fyh_gestion      := par$afyh_gestion(idx);
            svalidar_fecha(par$oid_llamada      => par$oid_llamada,
                            par$nel_index        => par$anel_index(idx),
                            par$oid_sector_mae   => var$oid_sector_mae,
                            par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                            par$fyh_gestion      => var$fyh_gestion,
                            par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                            par$cod_cultura      => par$cod_cultura);

            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'svalidar_fecha de gestion con parametros:' ||
                                    ' par$nel_index: ' || par$anel_index(idx) ||
                                    ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                    ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                    ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                    ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                    ', par$cod_cultura: ' || par$cod_cultura,
                                par$cod_identificador   => '');


            /* Validar fecha contable */
            IF par$afyh_contable(idx) IS NULL THEN
                var$fyh_contable      := par$afyh_gestion(idx);                            
            ELSE
                var$fyh_contable      := par$afyh_contable(idx);                          
            END IF;

            svalidar_fecha(par$oid_llamada      => par$oid_llamada,
                            par$nel_index        => par$anel_index(idx),
                            par$oid_sector_mae   => var$oid_sector_mae,
                            par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                            par$fyh_gestion      => var$fyh_contable,
                            par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                            par$cod_cultura      => par$cod_cultura);
            
            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                        'svalidar_fecha contable con parametros:' ||
                                        ' par$nel_index: ' || par$anel_index(idx) ||
                                        ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                        ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                        ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                                        ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                        ', par$cod_cultura: ' || par$cod_cultura,
                                    par$cod_identificador   => '');

            /* Validar Codigo externo */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => q'[Llamada a procedure fvalidar_codigo_externo: 
                                                                par$anel_index(idx): ]'             || par$anel_index(idx) || q'[
                                                                var$des_cod_externo_maeacr: ]' || var$des_cod_externo_maeacr || q'[
                                                                par$acod_device_id(idx): ]'             || par$acod_device_id(idx) || q'[
                                                                var$fyh_gestion: ]'          || var$fyh_gestion || q'[
                                                                par$acod_precinto(idx): ]'             || par$acod_precinto(idx) || q'[
                                                                var$oid_sector_mae: ]'             || var$oid_sector_mae || q'[
                                                                var$fyh_gestion_gmt0: ]'             || var$fyh_gestion_gmt0 || q'[
                                                                par$cod_cultura: ]'             || par$cod_cultura,
                                      par$cod_identificador   => '');

            IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maeacr, par$acod_device_id(idx), var$fyh_gestion, par$acod_precinto(idx), var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
              
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                      par$des_version     => const$version,                            
                                                      par$des_detalle     => 'Validación exitosa de código externo',
                                                      par$cod_identificador   => '');
            END IF;

            
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'INICIO grabar movimiento MAEACR',
                                par$cod_identificador   => '');

            IF var$oid_formulario_maeacr IS NULL AND var$oid_tipo_documento_maeacr IS NULL AND var$des_cod_externo_maeacr IS NULL THEN
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                    VALUES (par$anel_index(idx), '2040120004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                            gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEACR', 0), 'VALIDACIONES');
                
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'var$oid_formulario_maeacr IS NULL AND var$oid_tipo_documento_maeacr IS NULL AND var$des_cod_externo_maeacr' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEACR', 0),
                                par$cod_identificador   => '');
            END IF;


            var$aux_maeacr_secuencia := 0;
            var$aux_maeant_secuencia := 0;
            var$aux_maecom_secuencia := 0;
            var$aux_maetot_secuencia := 0;
            IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
              IF par$adiv_nel_index IS NOT NULL AND par$adiv_nel_index.COUNT > 0 THEN
                FOR idxDiv IN par$adiv_nel_index.first .. par$adiv_nel_index.last LOOP
                  var$auxeacr_oid_divisa.delete;
                  var$auxeacr_oid_denominacion.delete;
                  var$auxeacr_oid_unid_medida.delete;
                  var$auxeacr_cod_niv_detalle.delete;
                  var$auxeacr_cod_tp_efec_tot.delete;
                  var$auxeacr_oid_calidad.delete;
                  var$auxeacr_num_importe.delete;
                  var$auxeacr_nel_cantidad.delete;
                  var$auxecom_oid_divisa.delete;
                  var$auxecom_oid_denominacion.delete;
                  var$auxecom_oid_unid_medida.delete;
                  var$auxecom_cod_niv_detalle.delete;
                  var$auxecom_cod_tp_efec_tot.delete;
                  var$auxecom_oid_calidad.delete;
                  var$auxecom_num_importe.delete;
                  var$auxecom_nel_cantidad.delete; 
                  var$auxetot_oid_divisa.delete;
                  var$auxetot_oid_denominacion.delete;
                  var$auxetot_oid_unid_medida.delete;
                  var$auxetot_cod_niv_detalle.delete;
                  var$auxetot_cod_tp_efec_tot.delete;
                  var$auxetot_oid_calidad.delete;
                  var$auxetot_num_importe.delete;
                  var$auxetot_nel_cantidad.delete;
                  var$auxt_oid_termino.delete;
                  var$auxt_des_valor.delete;
              
                  IF par$adiv_nel_index(idxDiv) = par$anel_index(idx) THEN
                    /* CREAR MOVIMIENTO MAEACR */
                    var$oid_documento := sys_guid();
                    var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                    var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maeacr;
                    var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maeacr;
                    var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                    var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                    var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                    var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                    var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                    var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                    var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                    var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                    var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                    var$acod_collection_id(var$acod_collection_id.COUNT) := par$acod_collection_id(idx);


                    /* Formulario y Codigo Externo */
                    var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maeacr,
                                                                                                par$cod_device_id       => par$acod_device_id(idx),
                                                                                                par$fyh_gestion         => var$fyh_gestion,
                                                                                                par$cod_precinto        => par$acod_precinto(idx),
                                                                                                par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                par$nel_sumar_secuencia => var$aux_maeacr_secuencia);

                    /* LOG de código externo  */
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                              'fcargar_codigo_externo:' || 
                              ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                              ,
                          par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                      
                    var$aux_maeacr_secuencia := var$aux_maeacr_secuencia + 1;

                    /* Campos Adcionales */
                    IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                      FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                        IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                          par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                          par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                            svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                              par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                              par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                              par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                              par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                              par$cod_usuario         => par$cod_usuario,
                                              par$cod_cultura         => par$cod_cultura);
                            
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'svalidar_terminos(par$nel_index: ' || par$anel_index(idx) ||
                                            ', par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) || 
                                            ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) || 
                                            ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                            ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) ||
                                            ', par$cod_usuario: ' || par$cod_usuario ||
                                            ', par$cod_cultura: ' || par$cod_cultura,
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                        END IF;
                      END LOOP;
                    END IF;

                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Previo a recorrer los valores 1',
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                    /* Valores */
                    FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                      IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_div_index(idxt) = par$adiv_index(idxDiv) THEN

                        svalidar_valores_acreditacion(par$oid_llamada               => par$oid_llamada,
                                                      par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                                      par$nel_index                 => par$anel_index(idx),
                                                      par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                                      par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                                      par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                                      par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                                      par$entrada_nel_tipo          => par$aefdoc_nel_tipo(idxt),
                                                      par$saida_acr_oid_divisa      => var$auxeacr_oid_divisa(var$auxeacr_oid_divisa.COUNT),
                                                      par$saida_acr_oid_denominacio => var$auxeacr_oid_denominacion(var$auxeacr_oid_denominacion.COUNT),
                                                      par$saida_acr_oid_unid_medida => var$auxeacr_oid_unid_medida(var$auxeacr_oid_unid_medida.COUNT),
                                                      par$saida_acr_cod_niv_detalle => var$auxeacr_cod_niv_detalle(var$auxeacr_cod_niv_detalle.COUNT),
                                                      par$saida_acr_cod_tp_efec_tot => var$auxeacr_cod_tp_efec_tot(var$auxeacr_cod_tp_efec_tot.COUNT),
                                                      par$saida_acr_oid_calidad     => var$auxeacr_oid_calidad(var$auxeacr_oid_calidad.COUNT),
                                                      par$saida_acr_num_importe     => var$auxeacr_num_importe(var$auxeacr_num_importe.COUNT),
                                                      par$saida_acr_nel_cantidad    => var$auxeacr_nel_cantidad(var$auxeacr_nel_cantidad.COUNT),
                                                      par$saida_com_oid_divisa      => var$auxecom_oid_divisa(var$auxecom_oid_divisa.COUNT),
                                                      par$saida_com_oid_denominacio => var$auxecom_oid_denominacion(var$auxecom_oid_denominacion.COUNT),
                                                      par$saida_com_oid_unid_medida => var$auxecom_oid_unid_medida(var$auxecom_oid_unid_medida.COUNT),
                                                      par$saida_com_cod_niv_detalle => var$auxecom_cod_niv_detalle(var$auxecom_cod_niv_detalle.COUNT),
                                                      par$saida_com_cod_tp_efec_tot => var$auxecom_cod_tp_efec_tot(var$auxecom_cod_tp_efec_tot.COUNT),
                                                      par$saida_com_oid_calidad     => var$auxecom_oid_calidad(var$auxecom_oid_calidad.COUNT),
                                                      par$saida_com_num_importe     => var$auxecom_num_importe(var$auxecom_num_importe.COUNT),
                                                      par$saida_com_nel_cantidad    => var$auxecom_nel_cantidad(var$auxecom_nel_cantidad.COUNT),
                                                      par$saida_tot_oid_divisa      => var$auxetot_oid_divisa(var$auxecom_oid_divisa.COUNT),
                                                      par$saida_tot_oid_denominacio => var$auxetot_oid_denominacion(var$auxecom_oid_denominacion.COUNT),
                                                      par$saida_tot_oid_unid_medida => var$auxetot_oid_unid_medida(var$auxecom_oid_unid_medida.COUNT),
                                                      par$saida_tot_cod_niv_detalle => var$auxetot_cod_niv_detalle(var$auxecom_cod_niv_detalle.COUNT),
                                                      par$saida_tot_cod_tp_efec_tot => var$auxetot_cod_tp_efec_tot(var$auxecom_cod_tp_efec_tot.COUNT),
                                                      par$saida_tot_oid_calidad     => var$auxetot_oid_calidad(var$auxecom_oid_calidad.COUNT),
                                                      par$saida_tot_num_importe     => var$auxetot_num_importe(var$auxecom_num_importe.COUNT),
                                                      par$saida_tot_nel_cantidad    => var$auxetot_nel_cantidad(var$auxecom_nel_cantidad.COUNT),
                                                      par$cod_cultura               => par$cod_cultura);

                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'svalidar_valores_acreditacion(par$oid_llamada: ' || par$oid_llamada || const$new_line ||
                                            'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line ||
                                            'par$nel_index: ' || par$anel_index(idx) || const$new_line ||
                                            'par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) || const$new_line || 
                                            'par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) || const$new_line ||
                                            'par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) || const$new_line ||
                                            'par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) || const$new_line ||
                                            'par$entrada_nel_tipo: ' || par$aefdoc_nel_tipo(idxt) || const$new_line || 
                                            'par$saida_acr_oid_divisa: ' || var$auxeacr_oid_divisa(var$auxeacr_oid_divisa.COUNT -1) || const$new_line ||
                                            'par$saida_acr_oid_denominacio: ' || var$auxeacr_oid_denominacion(var$auxeacr_oid_denominacion.COUNT -1) || const$new_line ||
                                            'par$saida_acr_oid_unid_medida: ' || var$auxeacr_oid_unid_medida(var$auxeacr_oid_unid_medida.COUNT -1) || const$new_line ||
                                            'par$saida_acr_cod_niv_detalle: ' || var$auxeacr_cod_niv_detalle(var$auxeacr_cod_niv_detalle.COUNT -1) || const$new_line ||
                                            'par$saida_acr_cod_tp_efec_tot: ' || var$auxeacr_cod_tp_efec_tot(var$auxeacr_cod_tp_efec_tot.COUNT -1) || const$new_line ||
                                            'par$saida_acr_oid_calidad: ' || var$auxeacr_oid_calidad(var$auxeacr_oid_calidad.COUNT -1) || const$new_line ||
                                            'par$saida_acr_num_importe: ' || var$auxeacr_num_importe(var$auxeacr_num_importe.COUNT -1) || const$new_line ||
                                            'par$saida_acr_nel_cantidad: ' || var$auxeacr_nel_cantidad(var$auxeacr_nel_cantidad.COUNT -1) || const$new_line ||
                                            'par$saida_com_oid_divisa: ' || var$auxecom_oid_divisa(var$auxecom_oid_divisa.COUNT -1) || const$new_line ||
                                            'par$saida_com_oid_denominacio: ' || var$auxecom_oid_denominacion(var$auxecom_oid_denominacion.COUNT -1) || const$new_line ||
                                            'par$saida_com_oid_unid_medida: ' || var$auxecom_oid_unid_medida(var$auxecom_oid_unid_medida.COUNT -1) || const$new_line ||
                                            'par$saida_com_cod_niv_detalle: ' || var$auxecom_cod_niv_detalle(var$auxecom_cod_niv_detalle.COUNT -1) || const$new_line ||
                                            'par$saida_com_cod_tp_efec_tot: ' || var$auxecom_cod_tp_efec_tot(var$auxecom_cod_tp_efec_tot.COUNT -1) || const$new_line ||
                                            'par$saida_com_oid_calidad: ' || var$auxecom_oid_calidad(var$auxecom_oid_calidad.COUNT -1) || const$new_line ||
                                            'par$saida_com_num_importe: ' || var$auxecom_num_importe(var$auxecom_num_importe.COUNT -1) || const$new_line ||
                                            'par$saida_com_nel_cantidad: ' || var$auxecom_nel_cantidad(var$auxecom_nel_cantidad.COUNT -1) || const$new_line ||
                                            'par$saida_tot_oid_divisa: ' || var$auxetot_oid_divisa(var$auxecom_oid_divisa.COUNT -1) || const$new_line ||
                                            'par$saida_tot_oid_denominacio: ' || var$auxetot_oid_denominacion(var$auxecom_oid_denominacion.COUNT -1) || const$new_line ||
                                            'par$saida_tot_oid_unid_medida: ' || var$auxetot_oid_unid_medida(var$auxecom_oid_unid_medida.COUNT -1) || const$new_line ||
                                            'par$saida_tot_cod_niv_detalle: ' || var$auxetot_cod_niv_detalle(var$auxecom_cod_niv_detalle.COUNT -1) || const$new_line ||
                                            'par$saida_tot_cod_tp_efec_tot: ' || var$auxetot_cod_tp_efec_tot(var$auxecom_cod_tp_efec_tot.COUNT -1) || const$new_line ||
                                            'par$saida_tot_oid_calidad: ' || var$auxetot_oid_calidad(var$auxecom_oid_calidad.COUNT -1) || const$new_line ||
                                            'par$saida_tot_num_importe: ' || var$auxetot_num_importe(var$auxecom_num_importe.COUNT -1) || const$new_line ||
                                            'par$saida_tot_nel_cantidad: ' || var$auxetot_nel_cantidad(var$auxecom_nel_cantidad.COUNT -1) || const$new_line,
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                      END IF;

                    END LOOP;

                    IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Previo a recorrer los campos adicionales 2',
                                          par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                      /* Campos Adcionales */
                      IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                        FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                          var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                          var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                          var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);

                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Campos Adcionales - indice: ' || idxt || const$new_line ||
                                                                  'var$avtdoc_oid_documento(' || (var$avtdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                                  'var$avtdoc_oid_termino(' || (var$avtdoc_oid_termino.COUNT - 1) || '): ' || var$auxt_oid_termino(idxt) || const$new_line ||
                                                                  'var$avtdoc_des_valor(' || (var$avtdoc_des_valor.COUNT - 1) || '): ' || var$auxt_des_valor(idxt),
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                        END LOOP;
                      END IF;

                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Previo a recorrer los valores 2',
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                      /* Valores */
                      IF var$auxeacr_oid_divisa IS NOT NULL AND var$auxeacr_oid_divisa.COUNT > 0 THEN
                        FOR idxt IN var$auxeacr_oid_divisa.first .. var$auxeacr_oid_divisa.last LOOP

                          var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                          var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxeacr_oid_divisa(idxt);
                          var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxeacr_oid_denominacion(idxt);
                          var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxeacr_oid_unid_medida(idxt);
                          var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxeacr_cod_niv_detalle(idxt);
                          var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxeacr_cod_tp_efec_tot(idxt);
                          var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxeacr_oid_calidad(idxt);
                          var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxeacr_num_importe(idxt);
                          var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxeacr_nel_cantidad(idxt);

                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Valores - indice: ' || idxt || const$new_line ||
                                                                  'var$aefdoc_oid_documento(' || (var$aefdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                                  'var$aefdoc_oid_divisa(' || (var$aefdoc_oid_divisa.COUNT - 1) || '): ' || var$aefdoc_oid_divisa(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_denominacion(' || (var$aefdoc_oid_denominacion.COUNT - 1) || '): ' || var$aefdoc_oid_denominacion(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_unid_medida(' || (var$aefdoc_oid_unid_medida.COUNT - 1) || '): ' || var$aefdoc_oid_unid_medida(idxt) || const$new_line ||
                                                                  'var$aefdoc_cod_niv_detalle(' || (var$aefdoc_cod_niv_detalle.COUNT - 1) || '): ' || var$aefdoc_cod_niv_detalle(idxt) || const$new_line ||
                                                                  'var$aefdoc_cod_tp_efec_tot(' || (var$aefdoc_cod_tp_efec_tot.COUNT - 1) || '): ' || var$aefdoc_cod_tp_efec_tot(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_calidad(' || (var$aefdoc_oid_calidad.COUNT - 1) || '): ' || var$aefdoc_oid_calidad(idxt) || const$new_line ||
                                                                  'var$aefdoc_num_importe(' || (var$aefdoc_num_importe.COUNT - 1) || '): ' || var$aefdoc_num_importe(idxt) || const$new_line ||
                                                                  'var$aefdoc_nel_cantidad(' || (var$aefdoc_nel_cantidad.COUNT - 1) || '): ' || var$aefdoc_nel_cantidad(idxt),
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                        END LOOP;
                      END IF;

                      /* FIN - CREAR MOVIMIENTO MAEACR */

                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'var$oid_cuenta_tesoreria: ' || var$oid_cuenta_tesoreria,
                                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                      /* CREAR MOVIMIENTO MAEANT Anticipo Tesorería*/
                      IF var$oid_cuenta_tesoreria IS NOT NULL THEN
                        var$oid_documento := sys_guid();
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'INICIO crear movimiento MAEANT',
                                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                        var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                        var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maeant;
                        var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maeant;
                        var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                        var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                        var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                        var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_tesoreria;
                        var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                        var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_tesoreria;
                        var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                        var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_boveda;
                        var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                        var$acod_collection_id(var$acod_collection_id.COUNT) := par$acod_collection_id(idx);

                        /* Formulario y Codigo Externo */
                        var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maeant,
                                                                                                    par$cod_device_id       => par$acod_device_id(idx),
                                                                                                    par$fyh_gestion         => var$fyh_gestion,
                                                                                                    par$cod_precinto        => NULL,
                                                                                                    par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                    par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                    par$nel_sumar_secuencia => var$aux_maeant_secuencia);
                        /* LOG de código externo  */
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                'fcargar_codigo_externo:' || 
                                ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                ,
                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                    
                        var$aux_maeant_secuencia := var$aux_maeant_secuencia + 1;

                        /* Campos Adcionales */
                        IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.count > 0 THEN
                          FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                            var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                            var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                            var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);

                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Campos adicionales - ' || idxt || const$new_line || 
                                                                    'var$avtdoc_oid_documento(' || (var$avtdoc_oid_documento.COUNT - 1) || '): ' ||  var$oid_documento || const$new_line ||
                                                                    'var$avtdoc_oid_termino(' || (var$avtdoc_oid_termino.COUNT - 1) || '): ' ||  var$auxt_oid_termino(idxt) || const$new_line ||
                                                                    'var$avtdoc_des_valor(' || (var$avtdoc_des_valor.COUNT - 1) || '): ' ||  var$auxt_des_valor(idxt),
                                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));


                          END LOOP;
                        END IF;

                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Previo a recorrer valores 3',
                                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                        /* Valores */
                        IF var$auxeacr_oid_divisa IS NOT NULL AND var$auxeacr_oid_divisa.count > 0 THEN
                          FOR idxt IN var$auxeacr_oid_divisa.first .. var$auxeacr_oid_divisa.last LOOP

                            var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                            var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxeacr_oid_divisa(idxt);
                            var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxeacr_oid_denominacion(idxt);
                            var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxeacr_oid_unid_medida(idxt);
                            var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxeacr_cod_niv_detalle(idxt);
                            var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxeacr_cod_tp_efec_tot(idxt);
                            var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxeacr_oid_calidad(idxt);
                            var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxeacr_num_importe(idxt);
                            var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxeacr_nel_cantidad(idxt);

                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Valores - indice: ' || idxt || const$new_line ||
                                                                    'var$aefdoc_oid_documento(' || (var$aefdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                                    'var$aefdoc_oid_divisa(' || (var$aefdoc_oid_divisa.COUNT - 1) || '): ' || var$auxeacr_oid_divisa(idxt) || const$new_line ||
                                                                    'var$aefdoc_oid_denominacion(' || (var$aefdoc_oid_denominacion.COUNT - 1) || '): ' || var$auxeacr_oid_denominacion(idxt) || const$new_line ||
                                                                    'var$aefdoc_oid_unid_medida(' || (var$aefdoc_oid_unid_medida.COUNT - 1) || '): ' || var$auxeacr_oid_unid_medida(idxt) || const$new_line ||
                                                                    'var$aefdoc_cod_niv_detalle(' || (var$aefdoc_cod_niv_detalle.COUNT - 1) || '): ' || var$auxeacr_cod_niv_detalle(idxt) || const$new_line ||
                                                                    'var$aefdoc_cod_tp_efec_tot(' || (var$aefdoc_cod_tp_efec_tot.COUNT - 1) || '): ' || var$auxeacr_cod_tp_efec_tot(idxt) || const$new_line ||
                                                                    'var$aefdoc_oid_calidad(' || (var$aefdoc_oid_calidad.COUNT - 1) || '): ' || var$auxeacr_oid_calidad(idxt) || const$new_line ||
                                                                    'var$aefdoc_num_importe(' || (var$aefdoc_num_importe.COUNT - 1) || '): ' || var$auxeacr_num_importe(idxt) || const$new_line ||
                                                                    'var$aefdoc_nel_cantidad(' || (var$aefdoc_nel_cantidad.COUNT - 1) || '): ' || var$auxeacr_nel_cantidad(idxt),
                                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));


                          END LOOP;
                        END IF;
                      END IF;
                      /* FIN - CREAR MOVIMIENTO MAEANT Anticipo Tesorería*/


                      /* CREAR MOVIMIENTO MAETOT Total Movimientos*/

                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'INICIO crear movimiento MAETOT',
                                              par$cod_identificador   => '');

                      var$oid_documento := sys_guid();
                      var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                      var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maetot;
                      var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maetot;
                      var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                      var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                      var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                      var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                      var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                      var$acod_collection_id(var$acod_collection_id.COUNT) := par$acod_collection_id(idx);



                      /* Formulario y Codigo Externo */
                      var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maetot,
                                                                                                  par$cod_device_id       => par$acod_device_id(idx),
                                                                                                  par$fyh_gestion         => var$fyh_gestion,
                                                                                                  par$cod_precinto        => NULL,
                                                                                                  par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                  par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                  par$nel_sumar_secuencia => var$aux_maetot_secuencia);
                      /* LOG de código externo  */
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                              'fcargar_codigo_externo:' || 
                              ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                              ,
                          par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                          
                      var$aux_maetot_secuencia := var$aux_maetot_secuencia + 1;

                      /* Campos Adcionales */
                      IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.count > 0 THEN
                        FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                          var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                          var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                          var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);

                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Campos adicionales - ' || idxt || const$new_line || 
                                                                  'var$avtdoc_oid_documento(' || (var$avtdoc_oid_documento.COUNT - 1) || '): ' ||  var$oid_documento || const$new_line ||
                                                                  'var$avtdoc_oid_termino(' || (var$avtdoc_oid_termino.COUNT - 1) || '): ' ||  var$auxt_oid_termino(idxt) || const$new_line ||
                                                                  'var$avtdoc_des_valor(' || (var$avtdoc_des_valor.COUNT - 1) || '): ' ||  var$auxt_des_valor(idxt),
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                        END LOOP;
                      END IF;

                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Previo a recorrer valores 4',
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                      /* Valores */
                      IF var$auxetot_oid_divisa IS NOT NULL AND var$auxetot_oid_divisa.count > 0 THEN
                        FOR idxt IN var$auxetot_oid_divisa.first .. var$auxetot_oid_divisa.last LOOP

                          var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                          var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxetot_oid_divisa(idxt);
                          var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxetot_oid_denominacion(idxt);
                          var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxetot_oid_unid_medida(idxt);
                          var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxetot_cod_niv_detalle(idxt);
                          var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxetot_cod_tp_efec_tot(idxt);
                          var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxetot_oid_calidad(idxt);
                          var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxetot_num_importe(idxt);
                          var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxetot_nel_cantidad(idxt);

                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Valores - indice: ' || idxt || const$new_line ||
                                                                  'var$aefdoc_oid_documento(' || (var$aefdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                                  'var$aefdoc_oid_divisa(' || (var$aefdoc_oid_divisa.COUNT - 1) || '): ' || var$auxetot_oid_divisa(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_denominacion(' || (var$aefdoc_oid_denominacion.COUNT - 1) || '): ' || var$auxetot_oid_denominacion(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_unid_medida(' || (var$aefdoc_oid_unid_medida.COUNT - 1) || '): ' || var$auxetot_oid_unid_medida(idxt) || const$new_line ||
                                                                  'var$aefdoc_cod_niv_detalle(' || (var$aefdoc_cod_niv_detalle.COUNT - 1) || '): ' || var$auxetot_cod_niv_detalle(idxt) || const$new_line ||
                                                                  'var$aefdoc_cod_tp_efec_tot(' || (var$aefdoc_cod_tp_efec_tot.COUNT - 1) || '): ' || var$auxetot_cod_tp_efec_tot(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_calidad(' || (var$aefdoc_oid_calidad.COUNT - 1) || '): ' || var$auxetot_oid_calidad(idxt) || const$new_line ||
                                                                  'var$aefdoc_num_importe(' || (var$aefdoc_num_importe.COUNT - 1) || '): ' || var$auxetot_num_importe(idxt) || const$new_line ||
                                                                  'var$aefdoc_nel_cantidad(' || (var$aefdoc_nel_cantidad.COUNT - 1) || '): ' || var$auxetot_nel_cantidad(idxt),
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                        END LOOP;
                      END IF;
                      /* FIN - CREAR MOVIMIENTO MAETOT Total Movimientos*/

                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'var$bol_controla_faturacion: ' || var$bol_controla_faturacion ,
                                            par$cod_identificador   => '');


                      /* IF MAQUINA ESTA EN UNA PLANIFICACION QUE CONTRALA FATURACION? */
                      IF var$bol_controla_faturacion = 1 THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'IF var$bol_controla_faturacion = 1 THEN = TRUE ',
                                          par$cod_identificador   => '');

                        /* Validar formularios faturacion*/
                        IF var$oid_formulario_maeant IS NULL AND var$oid_tipo_documento_maeant IS NULL AND var$des_cod_externo_maeant IS NULL THEN
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'IF var$oid_formulario_maeant IS NULL AND var$oid_tipo_documento_maeant IS NULL AND var$des_cod_externo_maeant IS NULL THEN = TRUE' || const$new_line ||
                                          '2040120004 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEANT', 0),
                                          par$cod_identificador   => '');

                          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                                VALUES (par$anel_index(idx), '2040120004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                                        gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEANT', 0), 'VALIDACIONES');
                        END IF;

                        IF var$oid_formulario_maecom IS NULL AND var$oid_tipo_documento_maecom IS NULL AND var$des_cod_externo_maecom IS NULL THEN
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'IF var$oid_formulario_maecom IS NULL AND var$oid_tipo_documento_maecom IS NULL AND var$des_cod_externo_maecom IS NULL THEN = TRUE' || const$new_line ||
                                          '2040120004 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEANT', 0),
                                          par$cod_identificador   => '');
                          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                                VALUES (par$anel_index(idx), '2040120004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                                        gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAECOM', 0), 'VALIDACIONES');
                        END IF;


                        IF  NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                          /* CREAR MOVIMIENTO MAEANT */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'CREAR MOVIMIENTO MAEANT',
                                          par$cod_identificador   => '');


                            var$oid_documento := sys_guid();
                            var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                            var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maeant;
                            var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maeant;
                            var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                            var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                            var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_acreditacion;
                            var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_acreditacion;
                            var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                            var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_boveda;
                            var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                            var$acod_collection_id(var$acod_collection_id.COUNT) := par$acod_collection_id(idx);

                            /* Formulario y Codigo Externo */
                            var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maeant,
                                                                                                        par$cod_device_id       => par$acod_device_id(idx),
                                                                                                        par$fyh_gestion         => var$fyh_gestion,
                                                                                                        par$cod_precinto        => NULL,
                                                                                                        par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                        par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                        par$nel_sumar_secuencia => var$aux_maeant_secuencia);
                            /* LOG de código externo  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'fcargar_codigo_externo:' || 
                                    ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                    ,
                                par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                                    
                            var$aux_maeant_secuencia := var$aux_maeant_secuencia + 1;

                            /* Campos Adicionales */
                            IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.count > 0 THEN
                              FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);

                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Campos adicionales - ' || idxt || const$new_line || 
                                                                  'var$avtdoc_oid_documento(' || (var$avtdoc_oid_documento.COUNT - 1) || '): ' ||  var$oid_documento || const$new_line ||
                                                                  'var$avtdoc_oid_termino(' || (var$avtdoc_oid_termino.COUNT - 1) || '): ' ||  var$auxt_oid_termino(idxt) || const$new_line ||
                                                                  'var$avtdoc_des_valor(' || (var$avtdoc_des_valor.COUNT - 1) || '): ' ||  var$auxt_des_valor(idxt),
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                              END LOOP;
                            END IF;



                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Previo a recorrer valores 5',
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                            /* Valores */
                            IF var$auxeacr_oid_divisa IS NOT NULL and var$auxeacr_oid_divisa.count > 0 THEN
                              FOR idxt IN var$auxeacr_oid_divisa.first .. var$auxeacr_oid_divisa.last LOOP

                                var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxeacr_oid_divisa(idxt);
                                var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxeacr_oid_denominacion(idxt);
                                var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxeacr_oid_unid_medida(idxt);
                                var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxeacr_cod_niv_detalle(idxt);
                                var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxeacr_cod_tp_efec_tot(idxt);
                                var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxeacr_oid_calidad(idxt);
                                var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxeacr_num_importe(idxt);
                                var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxeacr_nel_cantidad(idxt);

                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Valores - indice: ' || idxt || const$new_line ||
                                                                  'var$aefdoc_oid_documento(' || (var$aefdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                                  'var$aefdoc_oid_divisa(' || (var$aefdoc_oid_divisa.COUNT - 1) || '): ' || var$auxeacr_oid_divisa(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_denominacion(' || (var$aefdoc_oid_denominacion.COUNT - 1) || '): ' || var$auxeacr_oid_denominacion(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_unid_medida(' || (var$aefdoc_oid_unid_medida.COUNT - 1) || '): ' || var$auxeacr_oid_unid_medida(idxt) || const$new_line ||
                                                                  'var$aefdoc_cod_niv_detalle(' || (var$aefdoc_cod_niv_detalle.COUNT - 1) || '): ' || var$auxeacr_cod_niv_detalle(idxt) || const$new_line ||
                                                                  'var$aefdoc_cod_tp_efec_tot(' || (var$aefdoc_cod_tp_efec_tot.COUNT - 1) || '): ' || var$auxeacr_cod_tp_efec_tot(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_calidad(' || (var$aefdoc_oid_calidad.COUNT - 1) || '): ' || var$auxeacr_oid_calidad(idxt) || const$new_line ||
                                                                  'var$aefdoc_num_importe(' || (var$aefdoc_num_importe.COUNT - 1) || '): ' || var$auxeacr_num_importe(idxt) || const$new_line ||
                                                                  'var$aefdoc_nel_cantidad(' || (var$aefdoc_nel_cantidad.COUNT - 1) || '): ' || var$auxeacr_nel_cantidad(idxt),
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                              END LOOP;
                            END IF;
                            /* FIN - CREAR MOVIMIENTO MAEANT */

                            /* CREAR MOVIMIENTO MAECOM */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'CREAR MOVIMIENTO MAECOM',
                                            par$cod_identificador   => '');
                            var$oid_documento := sys_guid();
                            var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                            var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maecom;
                            var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maecom;
                            var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                            var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                            var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_comision;
                            var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_comision;
                            var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                            var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_boveda;
                            var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                            var$acod_collection_id(var$acod_collection_id.COUNT) := par$acod_collection_id(idx);


                            /* Formulario y Codigo Externo */
                            var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maecom,
                                                                                                        par$cod_device_id       => par$acod_device_id(idx),
                                                                                                        par$fyh_gestion         => var$fyh_gestion,
                                                                                                        par$cod_precinto        => NULL,
                                                                                                        par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                        par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                        par$nel_sumar_secuencia => var$aux_maecom_secuencia);

                            /* LOG de código externo  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'fcargar_codigo_externo:' || 
                                    ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                    ,
                                par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                              
                            var$aux_maecom_secuencia := var$aux_maecom_secuencia + 1;

                            /* Campos Adcionales */
                            IF var$auxt_oid_termino IS NOT NULL and var$auxt_oid_termino.count > 0 THEN
                              FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);

                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Campos adicionales - ' || idxt || const$new_line || 
                                                                  'var$avtdoc_oid_documento(' || (var$avtdoc_oid_documento.COUNT - 1) || '): ' ||  var$oid_documento || const$new_line ||
                                                                  'var$avtdoc_oid_termino(' || (var$avtdoc_oid_termino.COUNT - 1) || '): ' ||  var$auxt_oid_termino(idxt) || const$new_line ||
                                                                  'var$avtdoc_des_valor(' || (var$avtdoc_des_valor.COUNT - 1) || '): ' ||  var$auxt_des_valor(idxt),
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                              END LOOP;
                            END IF;

                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Previo a recorrer valores 6',
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                            /* Valores */
                            IF var$auxecom_oid_divisa IS NOT NULL and var$auxecom_oid_divisa.count > 0 THEN
                              FOR idxt IN var$auxecom_oid_divisa.first .. var$auxecom_oid_divisa.last LOOP

                                var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxecom_oid_divisa(idxt);
                                var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxecom_oid_denominacion(idxt);
                                var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxecom_oid_unid_medida(idxt);
                                var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxecom_cod_niv_detalle(idxt);
                                var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxecom_cod_tp_efec_tot(idxt);
                                var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxecom_oid_calidad(idxt);
                                var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxecom_num_importe(idxt);
                                var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxecom_nel_cantidad(idxt);

                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Valores - indice: ' || idxt || const$new_line ||
                                                                  'var$aefdoc_oid_documento(' || (var$aefdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                                  'var$aefdoc_oid_divisa(' || (var$aefdoc_oid_divisa.COUNT - 1) || '): ' || var$auxecom_oid_divisa(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_denominacion(' || (var$aefdoc_oid_denominacion.COUNT - 1) || '): ' || var$auxecom_oid_denominacion(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_unid_medida(' || (var$aefdoc_oid_unid_medida.COUNT - 1) || '): ' || var$auxecom_oid_unid_medida(idxt) || const$new_line ||
                                                                  'var$aefdoc_cod_niv_detalle(' || (var$aefdoc_cod_niv_detalle.COUNT - 1) || '): ' || var$auxecom_cod_niv_detalle(idxt) || const$new_line ||
                                                                  'var$aefdoc_cod_tp_efec_tot(' || (var$aefdoc_cod_tp_efec_tot.COUNT - 1) || '): ' || var$auxecom_cod_tp_efec_tot(idxt) || const$new_line ||
                                                                  'var$aefdoc_oid_calidad(' || (var$aefdoc_oid_calidad.COUNT - 1) || '): ' || var$auxecom_oid_calidad(idxt) || const$new_line ||
                                                                  'var$aefdoc_num_importe(' || (var$aefdoc_num_importe.COUNT - 1) || '): ' || var$auxecom_num_importe(idxt) || const$new_line ||
                                                                  'var$aefdoc_nel_cantidad(' || (var$aefdoc_nel_cantidad.COUNT - 1) || '): ' || var$auxecom_nel_cantidad(idxt),
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                              END LOOP;
                            END IF;
                            /* FIN - CREAR MOVIMIENTO MAECOM */


                        END IF;
                      END IF;
                    END IF;

                  END IF;
              
                END LOOP;
                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  /* Grabar documentos */

                  sguardar_documento(par$oid_llamada               => par$oid_llamada,
                                      par$adocs_oid                 => var$adocs_oid,
                                      par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                      par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                      par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                      par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                      par$adocs_cod_actual_id       => var$acod_actual_id,
                                      par$adocs_cod_collection_id   => var$acod_collection_id,
                                      par$adocs_cod_externo         => var$adocs_cod_externo,
                                      par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                      par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                      par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                      par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                      par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                      par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                      par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                      par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                      par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                      par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                      par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                      par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                      par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                      par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                      par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                      par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                      par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                      par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                      par$cod_usuario               => par$cod_usuario,
                                      par$cod_cultura               => par$cod_cultura,
                                      par$cod_ejecucion             => par$cod_ejecucion,
                                      par$nel_index                 => par$anel_index(idx)
                                      );

                  IF par$hacer_commit THEN
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Realiza commit luego de llamar al servicio sguardar_documento para el par$nel_index: ' || par$anel_index(idx),
                                      par$cod_identificador   => '');

                    COMMIT;
                  END IF;

                  INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                      VALUES (par$anel_index(idx), '0040120000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040120000', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                              gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

                END IF;
              END IF;

            END IF;
          END IF;

        EXCEPTION
          WHEN OTHERS THEN
            IF par$hacer_commit THEN
              ROLLBACK;
            END IF;
              var$err := gepr_putilidades_###VERSION###.fformat_error;
              INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                  VALUES (par$anel_index(idx), '3040120001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 'VALIDACIONES');
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'ROOLBACK 1 - 3040120001 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0),
                                      par$cod_identificador   => '');

        END;

      END LOOP;

      /* Validaciones */
      OPEN par$rc_validaciones FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'VALIDACIONES';

      /* Documentos */
      OPEN par$rc_documentos FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

      /* Planificacion */
      OPEN par$rc_planificaciones FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                            var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                            null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
      IF par$hacer_commit THEN
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Realiza commit al finalizar procedure sgrabar_mov_acreditacion',
                                        par$cod_identificador   => '');
        COMMIT;
      END IF;

      /* ===  Tratar excepciones - Rollback === */
  EXCEPTION
    WHEN OTHERS THEN
      IF par$hacer_commit THEN
        ROLLBACK;

      END IF;
      var$err := gepr_putilidades_###VERSION###.fformat_error;

      var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                    var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                    null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
      
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'ROOLBACK FINAL - var$err - ' || var$err,
                                        par$cod_identificador   => '');
      RAISE;
  END sgrabar_mov_acreditacion;

  /* Validar Movimientos Acreditacion */
  PROCEDURE svalidar_mov_acreditacion(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_cuenta_acreditacion OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_cuenta_comision     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_cuenta_tesoreria    OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$bol_controla_faturacion OUT gepr_pcomon_###VERSION###.tipo$nbol_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'svalidar_mov_acreditacion';
    var$cod_banco_capital    gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_banco_comision   gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_banco_tesoreria  gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_cuenta_tesoreria gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_planificacion    gepr_pcomon_###VERSION###.tipo$cod_;
    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN


    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'par$oid_llamada: ' || par$oid_llamada || const$new_line 
                        || 'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line
                        || 'par$nel_index: ' || par$nel_index || const$new_line
                        || 'par$cod_device_id: ' || par$cod_device_id || const$new_line
                        || 'par$cod_cliente: ' || par$cod_cliente || const$new_line
                        || 'par$cod_sub_cliente: ' || par$cod_sub_cliente || const$new_line
                        || 'par$cod_punto_servicio: ' || par$cod_punto_servicio || const$new_line
                        || 'par$cod_cultura: ' || par$cod_cultura || const$new_line
                        || 'par$cod_usuario: ' || par$cod_usuario || const$new_line
                        || 'par$cod_pais: ' || par$cod_pais,
                        par$cod_identificador   => '');


    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldoFisico,
                    par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalSaldoFisico,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);

    IF NOT fhay_error(par$nel_index => par$nel_index) THEN

      /* Recuperar Banco Capital y Banco Comision */
      BEGIN

            SELECT CLIC.COD_CLIENTE, PLAN.BOL_CONTROLA_FACTURACION, CLIM.COD_CLIENTE, PLAN.COD_PLANIFICACION
              INTO var$cod_banco_capital, par$bol_controla_faturacion, var$cod_banco_comision, var$cod_planificacion
              FROM SAPR_TMAQUINA MAQU
        INNER JOIN SAPR_TPLANXMAQUINA PLMA ON PLMA.OID_MAQUINA = MAQU.OID_MAQUINA AND PLMA.BOL_ACTIVO = 1
        LEFT JOIN SAPR_TPLANIFICACION PLAN ON PLAN.OID_PLANIFICACION = PLMA.OID_PLANIFICACION AND PLAN.BOL_ACTIVO = 1
        LEFT JOIN GEPR_TCLIENTE CLIC ON CLIC.OID_CLIENTE = PLAN.OID_CLIENTE AND PLMA.BOL_ACTIVO = 1
        LEFT JOIN GEPR_TCLIENTE CLIM ON CLIM.OID_CLIENTE = PLAN.OID_CLIENTE_COMISION AND CLIM.BOL_VIGENTE = 1
             WHERE MAQU.OID_SECTOR = par$oid_sector_mae
               AND MAQU.COD_IDENTIFICACION = par$cod_device_id
               AND MAQU.BOL_ACTIVO = 1;

      EXCEPTION WHEN no_data_found THEN
        var$cod_banco_capital := NULL;
        var$cod_banco_comision := NULL;
        par$bol_controla_faturacion := 0;
        var$cod_planificacion := NULL;
      END;

        /* 2040120008 - Error al identificar el Banco Capital configurado en la planificacion [{0}]. */
        IF var$cod_banco_capital IS NULL THEN
          dbms_output.put_line('Error al identificar el Banco Capital configurado en la planificacion [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040120008', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120008', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_planificacion, 0), 'VALIDACIONES');
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2040120008 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120008', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_planificacion, 0),
                        par$cod_identificador   => '');
        END IF;


           /* Recuperar Banco Tesoreria Y Cuenta Tesoreria */
        BEGIN

              SELECT
                NVL(SCMA.COD_SUBCLIENTE, SCDE.COD_SUBCLIENTE) COD_SUBCLIENTE,
                NVL(PSMA.COD_PTO_SERVICIO, PSDE.COD_PTO_SERVICIO) COD_PTO_SERVICIO
              INTO var$cod_banco_tesoreria, var$cod_cuenta_tesoreria
              FROM
                SAPR_TMAQUINA MAQU
                INNER JOIN SAPR_TPLANXMAQUINA PLMA ON MAQU.OID_MAQUINA = PLMA.OID_MAQUINA AND PLMA.BOL_ACTIVO = '1'
                INNER JOIN SAPR_TPLANIFICACION PLAN ON PLMA.OID_PLANIFICACION = PLAN.OID_PLANIFICACION AND PLAN.BOL_ACTIVO = 1
                INNER JOIN GEPR_TSECTOR SECT ON MAQU.OID_SECTOR = SECT.OID_SECTOR
                INNER JOIN GEPR_TPLANTA PLAA ON SECT.OID_PLANTA = PLAA.OID_PLANTA
                LEFT JOIN GEPR_TSUBCLIENTE SCMA ON PLMA.OID_SUBCLIENTE_TESORERIA = SCMA.OID_SUBCLIENTE
                LEFT JOIN GEPR_TPUNTO_SERVICIO PSMA ON PLMA.OID_PTO_SERVICIO_TESORERIA = PSMA.OID_PTO_SERVICIO
                LEFT JOIN GEPR_TDELEGACIONXCONFIG_FACTUR DECF ON PLAA.OID_DELEGACION = DECF.OID_DELEGACION AND PLAN.OID_CLIENTE = DECF.OID_CLIENTE_CAPITAL
                LEFT JOIN GEPR_TSUBCLIENTE SCDE ON DECF.OID_SUBCLIENTE_TESORERIA = SCDE.OID_SUBCLIENTE
                LEFT JOIN GEPR_TPUNTO_SERVICIO PSDE ON DECF.OID_PTO_SERVICIO_TESORERIA = PSDE.OID_PTO_SERVICIO
              WHERE MAQU.OID_SECTOR = par$oid_sector_mae
                 AND MAQU.COD_IDENTIFICACION = par$cod_device_id;

        EXCEPTION WHEN no_data_found THEN
          var$cod_banco_tesoreria := NULL;
          var$cod_cuenta_tesoreria := NULL;
        END;


        /* Validar Cuenta Tesoreria */
        IF var$cod_banco_tesoreria IS NOT NULL AND var$cod_cuenta_tesoreria IS NOT NULL THEN
          svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                          par$cod_identificador_ajeno => NULL,
                          par$nel_index               => par$nel_index,
                          par$cod_cliente             => var$cod_banco_capital,
                          par$cod_sub_cliente         => var$cod_banco_tesoreria,
                          par$cod_punto_servicio      => var$cod_cuenta_tesoreria,
                          par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldo,
                          par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalTesoreria,
                          par$cod_device_id           => gepr_pcomon_###VERSION###.const$CodSectorBoveda,
                          par$cod_cultura             => par$cod_cultura,
                          par$cod_usuario             => par$cod_usuario,
                          par$bol_esmaquina           => 0,
                          par$bol_validar_punto       => 1,
                          par$cod_pais                => par$cod_pais,
                          par$oid_cuenta              => par$oid_cuenta_tesoreria,
                          par$oid_sector              => par$oid_sector_boveda);
        END IF;
        


      IF par$bol_controla_faturacion = 1 THEN

        /* 2040120009 - Error al identificar el Banco Comision configurado en la planificacion [{0}]. */
        IF var$cod_banco_comision IS NULL THEN
          dbms_output.put_line('Error al identificar el Banco Comision configurado en la planificacion [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040120009', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120009', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_planificacion, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2040120009 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120009', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_planificacion, 0),
                        par$cod_identificador   => '');

        END IF;
        /* 2040120005 - No existe una Delegación Central con el código [{0}] configurada en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TDELEGACION
               WHERE COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe una Delegación Central con el código [{0}] configurada en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040120005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120005', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodDelegacionCentral, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2040120005 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120005', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodDelegacionCentral, 0),
                        par$cod_identificador   => '');
        END;

        /* 2040120006 - No existe una Planta Central con el código [{0}] configurada en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TPLANTA PLAN
          INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLAN.OID_DELEGACION
               WHERE PLAN.COD_PLANTA = gepr_pcomon_###VERSION###.const$CodPlantaCentral
                 AND PLAN.BOL_ACTIVO = 1
                 AND DELE.COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND DELE.BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe una Planta Central con el código [{0}] configurada en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040120006', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120006', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodPlantaCentral, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2040120006 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120006', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodPlantaCentral, 0),
                        par$cod_identificador   => '');
        END;

        /* 2040120007 - No existe un Sector Boveda con el código [{0}] configurado en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TSECTOR SECT
          INNER JOIN GEPR_TPLANTA PLAN ON PLAN.OID_PLANTA = SECT.OID_PLANTA
          INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLAN.OID_DELEGACION
               WHERE SECT.COD_SECTOR = gepr_pcomon_###VERSION###.const$CodSectorBoveda
                 AND SECT.BOL_ACTIVO = 1
                 AND PLAN.COD_PLANTA = gepr_pcomon_###VERSION###.const$CodPlantaCentral
                 AND PLAN.BOL_ACTIVO = 1
                 AND DELE.COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND DELE.BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe un Sector Boveda con el código [{0}] configurado en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040120007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120007', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodSectorBoveda, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2040120007 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040120007', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodSectorBoveda, 0),
                        par$cod_identificador   => '');
        END;

        IF NOT fhay_error(par$nel_index => par$nel_index) THEN
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, var$cod_banco_capital, var$cod_planificacion, 'PLANIFICACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'No hay errores. Previo a llamar ValidarCuenta Acreditación y ValidarCuenta Comisión',
                        par$cod_identificador   => '');

          /* Validar Cuenta Acreditacion */
          svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                          par$cod_identificador_ajeno => NULL,
                          par$nel_index               => par$nel_index,
                          par$cod_cliente             => var$cod_banco_capital,
                          par$cod_sub_cliente         => NULL,
                          par$cod_punto_servicio      => NULL,
                          par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldo,
                          par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalAcreditacion,
                          par$cod_device_id           => gepr_pcomon_###VERSION###.const$CodSectorBoveda,
                          par$cod_cultura             => par$cod_cultura,
                          par$cod_usuario             => par$cod_usuario,
                          par$bol_esmaquina           => 0,
                          par$bol_validar_punto       => 0,
                          par$cod_pais                => par$cod_pais,
                          par$oid_cuenta              => par$oid_cuenta_acreditacion,
                          par$oid_sector              => par$oid_sector_boveda);

          /* Validar Cuenta Comision */
          svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                          par$cod_identificador_ajeno => NULL,
                          par$nel_index               => par$nel_index,
                          par$cod_cliente             => var$cod_banco_comision,
                          par$cod_sub_cliente         => NULL,
                          par$cod_punto_servicio      => NULL,
                          par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldo,
                          par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalComision,
                          par$cod_device_id           => gepr_pcomon_###VERSION###.const$CodSectorBoveda,
                          par$cod_cultura             => par$cod_cultura,
                          par$cod_usuario             => par$cod_usuario,
                          par$bol_esmaquina           => 0,
                          par$bol_validar_punto       => 0,
                          par$cod_pais                => par$cod_pais,
                          par$oid_cuenta              => par$oid_cuenta_comision,
                          par$oid_sector              => par$oid_sector_boveda);




        END IF;
      END IF;

    END IF;

  END svalidar_mov_acreditacion;



   /* Grabar Movimientos de ShipOut */
  PROCEDURE sgrabar_mov_shipout (
   par$oid_llamada               IN     gepr_pcomon_###VERSION###.tipo$oid_,
   par$cod_identificador_ajeno   IN     gepr_pcomon_###VERSION###.tipo$cod_,
   par$anel_index                IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$acod_device_id            IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$afyh_gestion              IN     gepr_pcomon_###VERSION###.tipo$fyhs_,
   par$afyh_contable             IN     gepr_pcomon_###VERSION###.tipo$fyhs_,
   par$anel_gmt_minuto           IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$avtdoc_nel_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$avtdoc_cod_termino        IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$avtdoc_des_valor          IN     gepr_pcomon_###VERSION###.tipo$descs_,
   par$acndoc_nel_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$acndoc_det_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$acndoc_cod_canal          IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$acndoc_collection_id        IN     gepr_pcomon_###VERSION###.tipo$descs_,
   par$acndoc_cod_sub_canal      IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$aefdoc_nel_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$aefdoc_det_index          IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$aefdoc_cod_sub_canal      IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$aefdoc_cod_divisa         IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$aefdoc_cod_denominacion   IN     gepr_pcomon_###VERSION###.tipo$cods_,
   par$aefdoc_nel_cantidad       IN     gepr_pcomon_###VERSION###.tipo$nels_,
   par$aefdoc_num_importe        IN     gepr_pcomon_###VERSION###.tipo$imps_,
   par$info_ejecucion            IN     gepr_pcomon_###VERSION###.tipo$desc_,
   par$cod_usuario               IN     gepr_pcomon_###VERSION###.tipo$usr_,
   par$cod_cultura               IN     gepr_pcomon_###VERSION###.tipo$cod_,
   par$cod_pais                  IN     gepr_pcomon_###VERSION###.tipo$cod_,
   par$rc_validaciones              OUT SYS_REFCURSOR,
   par$rc_planificaciones           OUT SYS_REFCURSOR,
   par$rc_documentos                OUT SYS_REFCURSOR,
   par$cod_ejecucion                OUT gepr_pcomon_###VERSION###.tipo$nel_,
   par$acod_actual_id            IN     gepr_pcomon_###VERSION###.tipo$descs_)IS
   const$nombre_func      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_
                                      := 'sgrabar_mov_shipout' ;

   /* LOG */
   var$inicio                      TIMESTAMP := SYSTIMESTAMP;
   var$registros                   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
   var$inserts                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
   var$updates                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
   var$deletes                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
   var$merges                      gepr_pcomon_###VERSION###.tipo$nel_ := 0;
   var$selects                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
   var$err                         VARCHAR2 (4000);

   /* Variables auxiliares */
   var$oid_documento               gepr_pcomon_###VERSION###.tipo$oid_;
   var$bol_controla_faturacion     gepr_pcomon_###VERSION###.tipo$nbol_;
   var$fyh_gestion                 gepr_pcomon_###VERSION###.tipo$fyh_;
   var$fyh_gestion_gmt0            gepr_pcomon_###VERSION###.tipo$fyh_;
   var$fyh_contable                gepr_pcomon_###VERSION###.tipo$fyh_;
   var$fyh_contable_gmt0           gepr_pcomon_###VERSION###.tipo$fyh_;

   /* === Formularios === */
   /* === ING o REC === */
   var$oid_formulario_maecpn       gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maecpn   gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maecpn      gepr_pcomon_###VERSION###.tipo$cod_;
   var$oid_formulario_maecpp       gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maecpp   gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maecpp      gepr_pcomon_###VERSION###.tipo$cod_;
   var$oid_formulario_maesoc       gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maesoc   gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maesoc      gepr_pcomon_###VERSION###.tipo$cod_;
   /* === DEB o CHQ === */
   var$oid_formulario_maecpd       gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maecpd   gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maecpd      gepr_pcomon_###VERSION###.tipo$cod_;
   var$oid_formulario_maecnd       gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maecnd   gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maecnd      gepr_pcomon_###VERSION###.tipo$cod_;
   var$oid_formulario_maesod       gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maesod   gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maesod      gepr_pcomon_###VERSION###.tipo$cod_;
   /* === Ship Out Informativo === */
   var$oid_formulario_maesoi       gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maesoi   gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maesoi      gepr_pcomon_###VERSION###.tipo$cod_;
   /* === Auxiliares === */
   var$cod_formulario_maecp        gepr_pcomon_###VERSION###.tipo$cod_;
   var$oid_formulario_maecp        gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maecp    gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maecp       gepr_pcomon_###VERSION###.tipo$cod_;
   var$cod_formulario_maecn        gepr_pcomon_###VERSION###.tipo$cod_;
   var$oid_formulario_maecn        gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maecn    gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maecn       gepr_pcomon_###VERSION###.tipo$cod_;
   var$cod_formulario_maeso        gepr_pcomon_###VERSION###.tipo$cod_;
   var$oid_formulario_maeso        gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_tipo_documento_maeso    gepr_pcomon_###VERSION###.tipo$oid_;
   var$des_cod_externo_maeso       gepr_pcomon_###VERSION###.tipo$cod_;

   /* Cuentas */
   var$oid_cuenta_cliente          gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_cuenta_prosegur         gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_cuenta_tesoreria        gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_sector_mae              gepr_pcomon_###VERSION###.tipo$oid_;
   var$oid_sector_boveda           gepr_pcomon_###VERSION###.tipo$oid_;

   /* Documentos */
   var$adocs_oid                   gepr_pcomon_###VERSION###.tipo$oids_;
   var$adocs_oid_formulario        gepr_pcomon_###VERSION###.tipo$oids_;
   var$adocs_oid_tipo_documento    gepr_pcomon_###VERSION###.tipo$oids_;
   var$adocs_fyh_gestion           gepr_pcomon_###VERSION###.tipo$fyhs_;
   var$adocs_fyh_contable          gepr_pcomon_###VERSION###.tipo$fyhs_;
   var$adocs_cod_externo           gepr_pcomon_###VERSION###.tipo$cods_;
   var$adocs_oid_cuenta_ori        gepr_pcomon_###VERSION###.tipo$oids_;
   var$adocs_oid_cuenta_des        gepr_pcomon_###VERSION###.tipo$oids_;
   var$adocs_oid_cuentasaldo_ori   gepr_pcomon_###VERSION###.tipo$oids_;
   var$adocs_oid_cuentasaldo_des   gepr_pcomon_###VERSION###.tipo$oids_;
   var$adocs_oid_sector_ori        gepr_pcomon_###VERSION###.tipo$oids_;
   var$adocs_oid_sector_des        gepr_pcomon_###VERSION###.tipo$oids_;
   var$aefdoc_oid_documento        gepr_pcomon_###VERSION###.tipo$oids_;
   var$aefdoc_oid_divisa           gepr_pcomon_###VERSION###.tipo$oids_;
   var$aefdoc_oid_denominacion     gepr_pcomon_###VERSION###.tipo$oids_;
   var$aefdoc_oid_unid_medida      gepr_pcomon_###VERSION###.tipo$oids_;
   var$aefdoc_cod_niv_detalle      gepr_pcomon_###VERSION###.tipo$cods_;
   var$aefdoc_cod_tp_efec_tot      gepr_pcomon_###VERSION###.tipo$cods_;
   var$aefdoc_oid_calidad          gepr_pcomon_###VERSION###.tipo$oids_;
   var$aefdoc_num_importe          gepr_pcomon_###VERSION###.tipo$imps_;
   var$aefdoc_nel_cantidad         gepr_pcomon_###VERSION###.tipo$nels_;
   var$avtdoc_oid_documento        gepr_pcomon_###VERSION###.tipo$oids_;
   var$avtdoc_oid_termino          gepr_pcomon_###VERSION###.tipo$oids_;
   var$avtdoc_des_valor            gepr_pcomon_###VERSION###.tipo$descs_;
   var$acod_actual_id              gepr_pcomon_###VERSION###.tipo$descs_;
   var$acndoc_collection_id          gepr_pcomon_###VERSION###.tipo$descs_;

   /* Variables listas de auxiliares */
   var$auxe_oid_divisa             gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_oid_denominacion       gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_oid_unid_medida        gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_cod_niv_detalle        gepr_pcomon_###VERSION###.tipo$cods_;
   var$auxe_cod_tp_efec_tot        gepr_pcomon_###VERSION###.tipo$cods_;
   var$auxe_oid_calidad            gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_num_importe            gepr_pcomon_###VERSION###.tipo$imps_;
   var$auxe_nel_cantidad           gepr_pcomon_###VERSION###.tipo$nels_;
   var$auxe_sal_oid_cuenta         gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_sal_oid_cliente        gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_sal_oid_subcliente     gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_sal_oid_pto_servicio   gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_sal_oid_cuenta_saldo   gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_sal_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_sal_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_sal_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_sal_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
   var$auxe_sal_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
   var$auxe_sal_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxe_sal_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
   var$auxe_sal_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
   var$auxt_oid_termino            gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxt_des_valor              gepr_pcomon_###VERSION###.tipo$descs_;
   var$aux_nel_secuencia_cp        gepr_pcomon_###VERSION###.tipo$nel_;
   var$aux_nel_secuencia_inf       gepr_pcomon_###VERSION###.tipo$nel_;
   var$aux_nel_secuencia           gepr_pcomon_###VERSION###.tipo$nel_;
   var$bol_disponible              gepr_pcomon_###VERSION###.tipo$nbol_;

   var$auxi_sal_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxi_sal_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxi_sal_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxi_sal_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
   var$auxi_sal_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
   var$auxi_sal_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
   var$auxi_sal_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
   var$auxi_sal_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;



   var$cod_device_id               gepr_pcomon_###VERSION###.tipo$cod_;
   var$bol_esmulticliente          gepr_pcomon_###VERSION###.tipo$nbol_;
   var$cod_cliente                 gepr_pcomon_###VERSION###.tipo$cod_;
   var$cod_pto_servicio            gepr_pcomon_###VERSION###.tipo$cod_;
   var$cod_subcliente              gepr_pcomon_###VERSION###.tipo$cod_;
   var$bol_crea_maesoi             gepr_pcomon_###VERSION###.tipo$nbol_;
   
   var$des_detalle                  gepr_pcomon_###VERSION###.tipo$clob_;


    CURSOR cur$datos_mae(par$device_id IN gepr_pcomon_###VERSION###.tipo$cod_) IS
        SELECT DISTINCT maquina.cod_identificacion,
                    maquina.bol_multicliente,
                    maquina.oid_sector,
                    sector.cod_sector,
                      CLI.oid_cliente,
                      CLI.cod_cliente,
                    cacli.COD_AJENO cod_cliente_ajeno,
                      SUBC.oid_Subcliente,
                      SUBC.cod_subcliente,
                    CASUB.cod_ajeno cod_subcliente_ajeno,
                      PTO.oid_pto_servicio,
                      PTO.cod_pto_servicio,
                    CAPTO.cod_ajeno  cod_pto_servicio_ajeno
       FROM sapr_Tmaquina maquina
            INNER JOIN GEPR_TPUNTO_SERVICIO PTO
                ON PTO.OID_MAQUINA = MAQUINA.OID_MAQUINA
            INNER JOIN gepr_tsector sector
                ON maquina.oid_sector = sector.oid_sector
             INNER JOIN GEPR_TSUBCLIENTE SUBC ON SUBC.OID_SUBCLIENTE = PTO.OID_SUBCLIENTE
             INNER JOIN GEPR_TCLIENTE CLI ON CLI.OID_CLIENTE = SUBC.OID_CLIENTE
            LEFT JOIN GEPR_TCODIGO_AJENO CACLI
                ON     CACLI.oid_tabla_genesis = CLI.oid_cliente
                AND CACLI.COD_TIPO_TABLA_GENESIS = 'GEPR_TCLIENTE'
                AND CACLI.COD_IDENTIFICADOR = par$cod_identificador_ajeno
            LEFT JOIN GEPR_TCODIGO_AJENO CASUB
                ON     CASUB.oid_Tabla_genesis = SUBC.oid_subcliente
                AND casub.cod_tipo_tabla_genesis = 'GEPR_TSUBCLIENTE'
                AND casub.COD_IDENTIFICADOR = par$cod_identificador_ajeno
            LEFT JOIN GEPR_TCODIGO_AJENO CAPTO
                ON     CAPTO.oid_Tabla_genesis = PTO.oid_pto_servicio
                AND CAPTO.cod_tipo_tabla_genesis = 'GEPR_TPUNTO_SERVICIO'
                AND CAPTO.COD_IDENTIFICADOR = par$cod_identificador_ajeno
       WHERE maquina.cod_identificacion = par$device_id;
BEGIN

  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' ||
                                              ' par$oid_llamada: ' || par$oid_llamada ||
                                              ', par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                              ', par$info_ejecucion: ' || par$info_ejecucion ||
                                              ', par$cod_usuario: ' || par$cod_usuario ||
                                              ', par$cod_cultura: ' || par$cod_cultura ||
                                              ', par$cod_pais: ' || par$cod_pais,
                              par$cod_identificador   => '');

  /* INICIO - LOG de parametros iniciales*/
  IF par$oid_llamada IS NOT NULL THEN
    /* INICIO LOG de arrays asociativos */
    FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_index(' || idx || '):  ' || par$anel_index(idx),
                                par$cod_identificador   => '');
    END LOOP;  
    FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx),
                                par$cod_identificador   => '');
    END LOOP;    

    FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx),
                                par$cod_identificador   => '');
    END LOOP; 
    
    FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx),
                                par$cod_identificador   => '');
    END LOOP;    

    FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx),
                                par$cod_identificador   => '');
    END LOOP;   

    FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx),
                                par$cod_identificador   => '');
    END LOOP; 
    FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx),
                                par$cod_identificador   => '');
    END LOOP; 
    FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx),
                                par$cod_identificador   => '');
    END LOOP; 
    FOR idx IN  par$acndoc_nel_index.first ..  par$acndoc_nel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_nel_index(' || idx || '):  ' || par$acndoc_nel_index(idx),
                                par$cod_identificador   => '');
    END LOOP; 
    IF par$acndoc_det_index IS NOT NULL AND par$acndoc_det_index.COUNT > 0 THEN
      FOR idx IN  par$acndoc_det_index.first ..  par$acndoc_det_index.last LOOP 
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_det_index(' || idx || '):  ' || par$acndoc_det_index(idx),
                          par$cod_identificador   => '');
      END LOOP;
    END IF; 
    FOR idx IN  par$acndoc_cod_canal.first ..  par$acndoc_cod_canal.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_canal(' || idx || '):  ' || par$acndoc_cod_canal(idx),
                                par$cod_identificador   => '');
    END LOOP; 
    FOR idx IN  par$acndoc_cod_sub_canal.first ..  par$acndoc_cod_sub_canal.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_sub_canal(' || idx || '):  ' || par$acndoc_cod_sub_canal(idx),
                                par$cod_identificador   => '');
    END LOOP; 
    FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx),
                                par$cod_identificador   => '');
    END LOOP; 
    IF par$aefdoc_det_index IS NOT NULL AND par$aefdoc_det_index.COUNT > 0 THEN
      FOR idx IN  par$aefdoc_det_index.first ..  par$aefdoc_det_index.last LOOP 
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_det_index(' || idx || '):  ' || par$aefdoc_det_index(idx),
                          par$cod_identificador   => '');
      END LOOP;
    END IF;
    FOR idx IN  par$aefdoc_cod_sub_canal.first ..  par$aefdoc_cod_sub_canal.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_sub_canal(' || idx || '):  ' || par$aefdoc_cod_sub_canal(idx),
                                par$cod_identificador   => '');
    END LOOP;  
    FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx),
                                par$cod_identificador   => '');
    END LOOP;  
    FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx),
                                par$cod_identificador   => '');
    END LOOP;  
    FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx),
                                par$cod_identificador   => '');
    END LOOP;  
    FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx),
                                par$cod_identificador   => '');
    END LOOP;  
    FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx),
                                par$cod_identificador   => '');
    END LOOP;  
    FOR idx IN  par$acndoc_collection_id.first ..  par$acndoc_collection_id.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_collection_id(' || idx || '):  ' || par$acndoc_collection_id(idx),
                                par$cod_identificador   => '');
    END LOOP;  
  END IF;
  /* FIN - LOG de parametros iniciales*/
  
  /* #### Inicializar los cursores #### */
  OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
  OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
  OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

  /* Limpiar tabla temporaria */
  DELETE SAPR_GTT_TAUXILIAR;

  COMMIT;

  /* Recuperar Formularios - MAECPN */
  srecuperar_formularios (
    par$cod_formulario       => 'MAECPN',
    par$oid_formulario       => var$oid_formulario_maecpn,
    par$oid_tipo_documento   => var$oid_tipo_documento_maecpn,
    par$des_cod_externo      => var$des_cod_externo_maecpn);

  /* LOG recuperación de formulario  */
  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAECPN - ' ||  
                                  'var$oid_formulario_maecpn: ' || var$oid_formulario_maecpn ||
                                  ', var$oid_tipo_documento_maecpn: ' || var$oid_tipo_documento_maecpn ||
                                  ', var$des_cod_externo_maecpn: ' || var$des_cod_externo_maecpn,
                              par$cod_identificador   => '');

  /* Recuperar Formularios - MAECPP */
  srecuperar_formularios (
    par$cod_formulario       => 'MAECPP',
    par$oid_formulario       => var$oid_formulario_maecpp,
    par$oid_tipo_documento   => var$oid_tipo_documento_maecpp,
    par$des_cod_externo      => var$des_cod_externo_maecpp);
    
  /* LOG recuperación de formulario  */
  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAECPP - ' ||  
                                  'var$oid_formulario_maecpp: ' || var$oid_formulario_maecpp ||
                                  ', var$oid_tipo_documento_maecpp: ' || var$oid_tipo_documento_maecpp ||
                                  ', var$des_cod_externo_maecpp: ' || var$des_cod_externo_maecpp,
                              par$cod_identificador   => '');

  /* Recuperar Formularios - MAESOC */
  srecuperar_formularios (
    par$cod_formulario       => 'MAESOC',
    par$oid_formulario       => var$oid_formulario_maesoc,
    par$oid_tipo_documento   => var$oid_tipo_documento_maesoc,
    par$des_cod_externo      => var$des_cod_externo_maesoc);

  /* LOG recuperación de formulario  */
  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAESOC - ' ||  
                                  'var$oid_formulario_maesoc: ' || var$oid_formulario_maesoc ||
                                  ', var$oid_tipo_documento_maesoc: ' || var$oid_tipo_documento_maesoc ||
                                  ', var$des_cod_externo_maesoc: ' || var$des_cod_externo_maesoc,
                              par$cod_identificador   => '');

  /* Recuperar Formularios - MAECPD */
  srecuperar_formularios (
    par$cod_formulario       => 'MAECPD',
    par$oid_formulario       => var$oid_formulario_maecpd,
    par$oid_tipo_documento   => var$oid_tipo_documento_maecpd,
    par$des_cod_externo      => var$des_cod_externo_maecpd);
  
  /* LOG recuperación de formulario  */
  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAECPD - ' ||  
                                  'var$oid_formulario_maecpd: ' || var$oid_formulario_maecpd ||
                                  ', var$oid_tipo_documento_maecpd: ' || var$oid_tipo_documento_maecpd ||
                                  ', var$des_cod_externo_maecpd: ' || var$des_cod_externo_maecpd,
                              par$cod_identificador   => '');

  /* Recuperar Formularios - MAECND */
  srecuperar_formularios (
    par$cod_formulario       => 'MAECND',
    par$oid_formulario       => var$oid_formulario_maecnd,
    par$oid_tipo_documento   => var$oid_tipo_documento_maecnd,
    par$des_cod_externo      => var$des_cod_externo_maecnd);

  /* LOG recuperación de formulario  */
  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAECND - ' ||  
                                  'var$oid_formulario_maecnd: ' || var$oid_formulario_maecnd ||
                                  ', var$oid_tipo_documento_maecnd: ' || var$oid_tipo_documento_maecnd ||
                                  ', var$des_cod_externo_maecnd: ' || var$des_cod_externo_maecnd,
                              par$cod_identificador   => '');

  /* Recuperar Formularios - MAESOD */
  srecuperar_formularios (
    par$cod_formulario       => 'MAESOD',
    par$oid_formulario       => var$oid_formulario_maesod,
    par$oid_tipo_documento   => var$oid_tipo_documento_maesod,
    par$des_cod_externo      => var$des_cod_externo_maesod);
  
  /* LOG recuperación de formulario  */
  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAESOD - ' ||  
                                  'var$oid_formulario_maesod: ' || var$oid_formulario_maesod ||
                                  ', var$oid_tipo_documento_maesod: ' || var$oid_tipo_documento_maesod ||
                                  ', var$des_cod_externo_maesod: ' || var$des_cod_externo_maesod,
                              par$cod_identificador   => '');

  /* Recuperar Formularios - MAESOI */
  srecuperar_formularios (
    par$cod_formulario       => 'MAESOI',
    par$oid_formulario       => var$oid_formulario_maesoi,
    par$oid_tipo_documento   => var$oid_tipo_documento_maesoi,
    par$des_cod_externo      => var$des_cod_externo_maesoi);
  
  /* LOG recuperación de formulario  */
  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAESOI - ' ||  
                                  'var$oid_formulario_maesoi: ' || var$oid_formulario_maesoi ||
                                  ', var$oid_tipo_documento_maesoi: ' || var$oid_tipo_documento_maesoi ||
                                  ', var$des_cod_externo_maesoi: ' || var$des_cod_externo_maesoi,
                              par$cod_identificador   => '');

  FOR idx IN par$anel_index.FIRST .. par$anel_index.LAST LOOP
    BEGIN
      /* Limpiar tabla temporaria */
      DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');

      var$adocs_oid.delete;
      var$adocs_oid_formulario.delete;
      var$adocs_fyh_gestion.delete;
      var$adocs_fyh_contable.delete;
      var$adocs_cod_externo.delete;
      var$adocs_oid_cuenta_ori.delete;
      var$adocs_oid_cuenta_des.delete;
      var$adocs_oid_cuentasaldo_ori.delete;
      var$adocs_oid_cuentasaldo_des.delete;
      var$adocs_oid_sector_ori.delete;
      var$adocs_oid_sector_des.delete;
      var$aefdoc_oid_documento.delete;
      var$aefdoc_oid_divisa.delete;
      var$aefdoc_oid_denominacion.delete;
      var$aefdoc_oid_unid_medida.delete;
      var$aefdoc_cod_niv_detalle.delete;
      var$aefdoc_cod_tp_efec_tot.delete;
      var$aefdoc_oid_calidad.delete;
      var$aefdoc_num_importe.delete;
      var$aefdoc_nel_cantidad.delete;
      var$avtdoc_oid_documento.delete;
      var$avtdoc_oid_termino.delete;
      var$avtdoc_des_valor.delete;
      var$acod_actual_id.delete;
      var$acndoc_collection_id.delete;
      var$aux_nel_secuencia := 0;

      var$aux_nel_secuencia_cp := 0;
      var$aux_nel_secuencia_inf := 0;
      var$cod_device_id := par$acod_device_id (idx);

      FOR idxC IN par$acndoc_nel_index.FIRST .. par$acndoc_nel_index.LAST LOOP
        var$auxe_oid_divisa.delete;
        var$auxe_oid_denominacion.delete;
        var$auxe_oid_unid_medida.delete;
        var$auxe_cod_niv_detalle.delete;
        var$auxe_cod_tp_efec_tot.delete;
        var$auxe_oid_calidad.delete;
        var$auxe_num_importe.delete;
        var$auxe_nel_cantidad.delete;
        var$auxe_sal_oid_divisa.delete;
        var$auxe_sal_oid_denominacion.delete;
        var$auxe_sal_oid_unid_medida.delete;
        var$auxe_sal_cod_niv_detalle.delete;
        var$auxe_sal_cod_tp_efec_tot.delete;
        var$auxe_sal_oid_calidad.delete;
        var$auxe_sal_num_importe.delete;
        var$auxe_sal_nel_cantidad.delete;
        var$auxt_oid_termino.delete;
        var$auxt_des_valor.delete;

        IF par$acndoc_nel_index(idxC) = par$anel_index(idx) THEN
          FOR reg$datos_mae IN cur$datos_mae (var$cod_device_id) LOOP
            var$bol_esmulticliente := reg$datos_mae.bol_multicliente;

            IF par$cod_identificador_ajeno IS NOT NULL THEN
                var$cod_cliente := reg$datos_mae.cod_cliente_ajeno;
                var$cod_pto_servicio := reg$datos_mae.cod_pto_servicio_ajeno;
                var$cod_subcliente := reg$datos_mae.cod_subcliente_ajeno;
            ELSE
                var$cod_cliente := reg$datos_mae.cod_cliente;
                var$cod_pto_servicio := reg$datos_mae.cod_pto_servicio;
                var$cod_subcliente := reg$datos_mae.cod_subcliente;
            END IF;
          END LOOP;

          /* LOG de validación  */
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => 'Comienza validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                              'svalidar_mov_shipout con parametros:' ||
                              ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                              ', par$nel_index: ' || par$anel_index(idx) ||
                              ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                              ', par$cod_cliente: ' || var$cod_cliente ||
                              ', par$cod_sub_cliente: ' || var$cod_subcliente ||
                              ', par$cod_punto_servicio: ' || var$cod_pto_servicio ||
                              ', par$cod_canal: ' || par$acndoc_cod_canal(idxC) ||
                              ', par$cod_sub_canal: ' || par$acndoc_cod_sub_canal(idxC) ||
                              ', par$oid_cuenta_cliente: ' || var$oid_cuenta_cliente ||
                              ', par$oid_cuenta_prosegur: ' || var$oid_cuenta_prosegur ||
                              ', par$oid_cuenta_tesoreria: ' || var$oid_cuenta_tesoreria ||
                              ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                              ', par$oid_sector_boveda: ' || var$oid_sector_boveda ||
                              ', par$bol_controla_faturacion: ' || var$bol_controla_faturacion ||
                              ', par$cod_cultura: ' || par$cod_cultura ||
                              ', par$cod_usuario: ' || par$cod_usuario ||
                              ', par$cod_pais: ' || par$cod_pais,
                          par$cod_identificador   => ''); 


          svalidar_mov_shipout (
              par$oid_llamada     => par$oid_llamada,
              par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
              par$nel_index                 => par$anel_index (idx),
              par$cod_device_id             => par$acod_device_id (idx),
              par$cod_cliente               => var$cod_cliente,
              par$cod_sub_cliente           => var$cod_subcliente,
              par$cod_punto_servicio        => var$cod_pto_servicio,
              par$cod_canal                 => par$acndoc_cod_canal (idxC),
              par$cod_sub_canal             => par$acndoc_cod_sub_canal (idxC),
              par$oid_cuenta_cliente        => var$oid_cuenta_cliente,
              par$oid_cuenta_prosegur       => var$oid_cuenta_prosegur,
              par$oid_cuenta_tesoreria      => var$oid_cuenta_tesoreria,
              par$oid_sector_mae            => var$oid_sector_mae,
              par$oid_sector_boveda         => var$oid_sector_boveda,
              par$bol_controla_faturacion   => var$bol_controla_faturacion,
              par$cod_cultura               => par$cod_cultura,
              par$cod_usuario               => par$cod_usuario,
              par$cod_pais                  => par$cod_pais);

          /* LOG de validación  */
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                              'svalidar_actual_id con parametros:' ||
                              ' par$nel_index: ' || par$anel_index(idx) ||
                              ', par$fyh_gestion: ' || par$afyh_gestion(idx) ||
                              ', par$cod_actual_id: ' || par$acod_actual_id(idx) ||
                              ', par$cod_cultura: ' || par$cod_cultura,
                          par$cod_identificador   => '');

          svalidar_actual_id(
            par$oid_llamada => par$oid_llamada,
            par$nel_index    => par$anel_index(idx),
            par$fyh_gestion  => par$afyh_gestion(idx),
            par$cod_actual_id=> par$acod_actual_id(idx),
            par$cod_cultura  => par$cod_cultura);

          var$bol_crea_maesoi := 0;
          IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
            IF par$acndoc_cod_canal (idxC) = 'ING' OR par$acndoc_cod_canal (idxC) = 'REC' THEN
              var$bol_disponible := 1;

              var$cod_formulario_maecp := 'MAECPN';
              var$oid_formulario_maecp := var$oid_formulario_maecpn;
              var$oid_tipo_documento_maecp := var$oid_tipo_documento_maecpn;
              var$des_cod_externo_maecp := var$des_cod_externo_maecpn;

              var$cod_formulario_maecn := 'MAECPP';
              var$oid_formulario_maecn := var$oid_formulario_maecpp;
              var$oid_tipo_documento_maecn := var$oid_tipo_documento_maecpp;
              var$des_cod_externo_maecn := var$des_cod_externo_maecpp;

              var$cod_formulario_maeso := 'MAESOC';
              var$oid_formulario_maeso := var$oid_formulario_maesoc;
              var$oid_tipo_documento_maeso := var$oid_tipo_documento_maesoc;
              var$des_cod_externo_maeso := var$des_cod_externo_maesoc;

              IF var$bol_esmulticliente = 1 THEN
                var$bol_crea_maesoi := 1;
              END IF;
            ELSE
              var$bol_disponible := 0;

              var$cod_formulario_maecp := 'MAECPD';
              var$oid_formulario_maecp := var$oid_formulario_maecpd;
              var$oid_tipo_documento_maecp := var$oid_tipo_documento_maecpd;
              var$des_cod_externo_maecp := var$des_cod_externo_maecpd;

              var$cod_formulario_maecn      := 'MAECND';
              var$oid_formulario_maecn      := var$oid_formulario_maecnd;
              var$oid_tipo_documento_maecn  := var$oid_tipo_documento_maecnd;
              var$des_cod_externo_maecn     := var$des_cod_externo_maecnd;

              var$cod_formulario_maeso := 'MAESOD';
              var$oid_formulario_maeso := var$oid_formulario_maesod;
              var$oid_tipo_documento_maeso := var$oid_tipo_documento_maesod;
              var$des_cod_externo_maeso := var$des_cod_externo_maesod;

              /* Aplica crear MAESOI */
              IF var$bol_esmulticliente = 1 THEN
                var$bol_crea_maesoi := 1;
              END IF;
            END IF;

            /* Validar fecha gestion */
            var$fyh_gestion := par$afyh_gestion (idx);
            svalidar_fecha (
              par$oid_llamada       => par$oid_llamada,
              par$nel_index          => par$anel_index (idx),
              par$oid_sector_mae     => var$oid_sector_mae,
              par$nel_gmt_minuto     => par$anel_gmt_minuto (idx),
              par$fyh_gestion        => var$fyh_gestion,
              par$fyh_gestion_gmt0   => var$fyh_gestion_gmt0,
              par$cod_cultura        => par$cod_cultura);
              
            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                        'svalidar_fecha de gestion con parametros:' ||
                                        ' par$nel_index: ' || par$anel_index(idx) ||
                                        ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                        ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                        ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                        ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                        ', par$cod_cultura: ' || par$cod_cultura,
                                    par$cod_identificador   => '');

            /* Validar fecha contable */
            IF par$afyh_contable (idx) IS NULL THEN
              var$fyh_contable := par$afyh_gestion (idx);
            ELSE
              var$fyh_contable := par$afyh_contable (idx);
            END IF;

            svalidar_fecha (
              par$oid_llamada       => par$oid_llamada,
              par$nel_index          => par$anel_index (idx),
              par$oid_sector_mae     => var$oid_sector_mae,
              par$nel_gmt_minuto     => par$anel_gmt_minuto (idx),
              par$fyh_gestion        => var$fyh_contable,
              par$fyh_gestion_gmt0   => var$fyh_contable_gmt0,
              par$cod_cultura        => par$cod_cultura);
              
            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                        'svalidar_fecha contable con parametros:' ||
                                        ' par$nel_index: ' || par$anel_index(idx) ||
                                        ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                        ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                        ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                                        ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                        ', par$cod_cultura: ' || par$cod_cultura,
                                    par$cod_identificador   => '');

            srecuperar_valores_saldos (
              par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
              par$nel_index                 => par$anel_index (idx),
              par$cod_device_id             => par$acod_device_id (idx),
              par$cod_canal                 => par$acndoc_cod_canal (idxC),
              par$cod_sub_canal             => par$acndoc_cod_sub_canal (idxC),
              par$bol_disponible            => var$bol_disponible,
              par$saida_oids_cuenta         => var$auxe_sal_oid_cuenta,
              par$saida_oids_cliente        => var$auxe_sal_oid_cliente,
              par$saida_oids_subcliente     => var$auxe_sal_oid_subcliente,
              par$saida_oids_pto_servicio   => var$auxe_sal_oid_pto_servicio,
              par$saida_oids_cuenta_saldo   => var$auxe_sal_oid_cuenta_saldo,
              par$saida_oids_divisa         => var$auxe_sal_oid_divisa,
              par$saida_oids_denominacio    => var$auxe_sal_oid_denominacion,
              par$saida_oids_unid_medida    => var$auxe_sal_oid_unid_medida,
              par$saida_cods_niv_detalle    => var$auxe_sal_cod_niv_detalle,
              par$saida_cods_tp_efec_tot    => var$auxe_sal_cod_tp_efec_tot,
              par$saida_oids_calidad        => var$auxe_sal_oid_calidad,
              par$saida_nums_importe        => var$auxe_sal_num_importe,
              par$saida_nels_cantidad       => var$auxe_sal_nel_cantidad,
              par$cod_cultura               => par$cod_cultura);

            /* LOG recuperar valores  */
            var$des_detalle := 'Recupera valores saldos de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                'srecuperar_valores_saldos con parametros:' ||
                                ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                ', par$nel_index: ' || par$anel_index(idx) ||
                                ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                ', par$cod_canal: ' || par$acndoc_cod_canal(idxC) ||
                                ', par$cod_sub_canal: ' || par$acndoc_cod_sub_canal(idxC) ||
                                ', par$bol_disponible: ' || var$bol_disponible;
            IF var$auxe_sal_oid_cuenta IS NOT NULL AND var$auxe_sal_oid_cuenta.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_oids_cuenta: ' || var$auxe_sal_oid_cuenta(var$auxe_sal_oid_cuenta.COUNT - 1);
            END IF;

            IF var$auxe_sal_oid_cliente IS NOT NULL AND var$auxe_sal_oid_cliente.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_oids_cliente: ' || var$auxe_sal_oid_cliente(var$auxe_sal_oid_cliente.COUNT - 1);
            END IF;

            IF var$auxe_sal_oid_subcliente IS NOT NULL AND var$auxe_sal_oid_subcliente.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_oids_subcliente: ' || var$auxe_sal_oid_subcliente(var$auxe_sal_oid_subcliente.COUNT - 1);
            END IF;
            
            IF var$auxe_sal_oid_pto_servicio IS NOT NULL AND var$auxe_sal_oid_pto_servicio.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_oids_pto_servicio: ' || var$auxe_sal_oid_pto_servicio(var$auxe_sal_oid_pto_servicio.COUNT - 1);
            END IF;

            IF var$auxe_sal_oid_cuenta_saldo IS NOT NULL AND var$auxe_sal_oid_cuenta_saldo.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_oids_cuenta_saldo: ' || var$auxe_sal_oid_cuenta_saldo(var$auxe_sal_oid_cuenta_saldo.COUNT - 1);
            END IF;

            IF var$auxe_sal_oid_divisa IS NOT NULL AND var$auxe_sal_oid_divisa.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_oids_divisa: ' || var$auxe_sal_oid_divisa(var$auxe_sal_oid_divisa.COUNT - 1);
            END IF;

            IF var$auxe_sal_oid_denominacion IS NOT NULL AND var$auxe_sal_oid_denominacion.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_oids_denominacio: ' || var$auxe_sal_oid_denominacion(var$auxe_sal_oid_denominacion.COUNT - 1);
            END IF;

            IF var$auxe_sal_oid_unid_medida IS NOT NULL AND var$auxe_sal_oid_unid_medida.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_oids_unid_medida: ' || var$auxe_sal_oid_unid_medida(var$auxe_sal_oid_unid_medida.COUNT - 1);
            END IF;

            IF var$auxe_sal_cod_niv_detalle IS NOT NULL AND var$auxe_sal_cod_niv_detalle.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_cods_niv_detalle: ' || var$auxe_sal_cod_niv_detalle(var$auxe_sal_cod_niv_detalle.COUNT - 1);
            END IF;

            IF var$auxe_sal_cod_tp_efec_tot IS NOT NULL AND var$auxe_sal_cod_tp_efec_tot.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_cods_tp_efec_tot: ' || var$auxe_sal_cod_tp_efec_tot(var$auxe_sal_cod_tp_efec_tot.COUNT - 1);
            END IF;

            IF var$auxe_sal_oid_calidad IS NOT NULL AND var$auxe_sal_oid_calidad.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_oids_calidad: ' || var$auxe_sal_oid_calidad(var$auxe_sal_oid_calidad.COUNT - 1);
            END IF;

            IF var$auxe_sal_num_importe IS NOT NULL AND var$auxe_sal_num_importe.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_nums_importe: ' || var$auxe_sal_num_importe(var$auxe_sal_num_importe.COUNT - 1);
            END IF;

            IF var$auxe_sal_nel_cantidad IS NOT NULL AND var$auxe_sal_nel_cantidad.COUNT > 0 THEN
              var$des_detalle := var$des_detalle || ', par$saida_nels_cantidad: ' || var$auxe_sal_nel_cantidad(var$auxe_sal_nel_cantidad.COUNT - 1);
            END IF;

            var$des_detalle := var$des_detalle || ', par$cod_cultura: ' || par$cod_cultura;
            /* LOG recuperar valores  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                  par$des_detalle     => var$des_detalle,
                                par$cod_identificador   => '');
          END IF;
        END IF;
        
        IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
          FOR idxt IN par$aefdoc_nel_index.FIRST .. par$aefdoc_nel_index.LAST LOOP
            IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_det_index(idxt) = par$acndoc_det_index(idxC) THEN
              DBMS_OUTPUT.put_line ('validar: ' || par$aefdoc_num_importe (idxt));
              svalidar_valores (
                par$oid_llamada                => par$oid_llamada,
                par$cod_identificador_ajeno    => par$cod_identificador_ajeno,
                par$nel_index                  => par$anel_index (idx),
                par$entrada_cod_divisa         => par$aefdoc_cod_divisa (idxt),
                par$entrada_cod_denominacion   => par$aefdoc_cod_denominacion (idxt),
                par$entrada_nel_cantidad       => par$aefdoc_nel_cantidad (idxt),
                par$entrada_num_importe        => par$aefdoc_num_importe (idxt),
                par$saida_oid_divisa           => var$auxe_oid_divisa (var$auxe_oid_divisa.COUNT),
                par$saida_oid_denominacio      => var$auxe_oid_denominacion (var$auxe_oid_denominacion.COUNT),
                par$saida_oid_unid_medida      => var$auxe_oid_unid_medida (var$auxe_oid_unid_medida.COUNT),
                par$saida_cod_niv_detalle      => var$auxe_cod_niv_detalle (var$auxe_cod_niv_detalle.COUNT),
                par$saida_cod_tp_efec_tot      => var$auxe_cod_tp_efec_tot (var$auxe_cod_tp_efec_tot.COUNT),
                par$saida_oid_calidad          => var$auxe_oid_calidad (var$auxe_oid_calidad.COUNT),
                par$saida_num_importe          => var$auxe_num_importe (var$auxe_num_importe.COUNT),
                par$saida_nel_cantidad         => var$auxe_nel_cantidad (var$auxe_nel_cantidad.COUNT),
                par$cod_cultura                => par$cod_cultura);

              /* LOG validar valores  */
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación de valores con par$aefdoc_num_importe(idxt) >= 0 de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'svalidar_valores con parametros:' ||
                                    ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                    ', par$anel_index: ' || par$anel_index(idx) ||
                                    ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                    ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) ||
                                    ', par$entrada_nel_cantidad: ' ||par$aefdoc_nel_cantidad (idxt) ||
                                    ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                    ', par$saida_oid_divisa: ' || var$auxe_oid_divisa(var$auxe_oid_divisa.COUNT - 1) ||
                                    ', par$saida_oid_denominacio: ' || var$auxe_oid_denominacion(var$auxe_oid_denominacion.COUNT - 1) ||
                                    ', par$saida_oid_unid_medida: ' || var$auxe_oid_unid_medida(var$auxe_oid_unid_medida.COUNT - 1) ||
                                    ', par$saida_cod_niv_detalle: ' || var$auxe_cod_niv_detalle(var$auxe_cod_niv_detalle.COUNT - 1) ||
                                    ', par$saida_cod_tp_efec_tot: ' || var$auxe_cod_tp_efec_tot(var$auxe_cod_tp_efec_tot.COUNT - 1) ||
                                    ', par$saida_oid_calidad: ' || var$auxe_oid_calidad(var$auxe_oid_calidad.COUNT - 1) ||
                                    ', par$saida_num_importe: ' || var$auxe_num_importe(var$auxe_num_importe.COUNT - 1) ||
                                    ', par$saida_nel_cantidad: ' || var$auxe_nel_cantidad(var$auxe_nel_cantidad.COUNT - 1) ||
                                    ', par$cod_cultura: ' || par$cod_cultura 
                                    ,
                                par$cod_identificador   => '');
            END IF;
          END LOOP;
        END IF;
        IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
          /* Campos Adcionales */
          IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.COUNT > 0 THEN
            FOR idxt IN par$avtdoc_nel_index.FIRST .. par$avtdoc_nel_index.LAST LOOP
              IF par$avtdoc_nel_index (idxt) = par$anel_index (idx) AND par$avtdoc_cod_termino (idxt) IS NOT NULL
                  AND par$avtdoc_des_valor (idxt) IS NOT NULL THEN
                svalidar_terminos (
                  par$nel_index             => par$anel_index (idx),
                  par$entrada_cod_termino   => par$avtdoc_cod_termino (idxt),
                  par$entrada_des_valor     => par$avtdoc_des_valor (idxt),
                  par$saida_oid_termino     => var$auxt_oid_termino (var$auxt_oid_termino.COUNT),
                  par$saida_des_valor       => var$auxt_des_valor (var$auxt_des_valor.COUNT),
                  par$cod_usuario           => par$cod_usuario,
                  par$cod_cultura           => par$cod_cultura);
                /* LOG validar tÃ©rminos  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                par$des_version     => const$version,                            
                par$des_detalle     =>  'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                        'svalidar_terminos con parametros:' ||
                                        ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                        ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                        ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                        ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1),
                par$cod_identificador   => '');
              END IF;
            END LOOP;
          END IF;

          IF var$oid_formulario_maecp IS NULL AND var$oid_tipo_documento_maecp IS NULL
              AND var$des_cod_externo_maecp IS NULL THEN
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                VALUES (par$anel_index (idx), '2040130004', gepr_putilidades_###VERSION###.ftraduzir (
                            par$cod_cultura, '2040130004', gepr_pcomon_###VERSION###.const$CodFunMoviShipout,
                            gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_formulario_maecp, 0),
                        'VALIDACIONES');
          END IF;

          IF var$oid_formulario_maecn IS NULL AND var$oid_tipo_documento_maecn IS NULL
              AND var$des_cod_externo_maecn IS NULL THEN
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                  VALUES (par$anel_index (idx), '2040130004', gepr_putilidades_###VERSION###.ftraduzir (
                              par$cod_cultura, '2040130004', gepr_pcomon_###VERSION###.const$CodFunMoviShipout,
                              gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_formulario_maecn, 0),
                          'VALIDACIONES');
          END IF;

          IF var$oid_formulario_maeso IS NULL AND var$oid_tipo_documento_maeso IS NULL
              AND var$des_cod_externo_maeso IS NULL THEN
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                VALUES (par$anel_index (idx), '2040130004', gepr_putilidades_###VERSION###.ftraduzir (
                            par$cod_cultura, '2040130004', gepr_pcomon_###VERSION###.const$CodFunMoviShipout,
                            gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_formulario_maeso, 0),
                        'VALIDACIONES');
          END IF;

          IF var$oid_formulario_maesoi IS NULL AND var$oid_tipo_documento_maesoi IS NULL
              AND var$des_cod_externo_maesoi IS NULL THEN
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                VALUES (par$anel_index (idx), '2040130004', gepr_putilidades_###VERSION###.ftraduzir (
                            par$cod_cultura, '2040130004', gepr_pcomon_###VERSION###.const$CodFunMoviShipout,
                            gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAESOI', 0),
                        'VALIDACIONES');
          END IF;
        END IF;
        IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
          IF var$auxe_sal_oid_cuenta IS NOT NULL AND var$auxe_sal_oid_cuenta.COUNT > 0 THEN
            FOR idxS IN var$auxe_sal_oid_cuenta.FIRST .. var$auxe_sal_oid_cuenta.LAST LOOP
              var$auxi_sal_oid_divisa.delete;
              var$auxi_sal_oid_denominacion.delete;
              var$auxi_sal_oid_unid_medida.delete;
              var$auxi_sal_cod_niv_detalle.delete;
              var$auxi_sal_cod_tp_efec_tot.delete;
              var$auxi_sal_oid_calidad.delete;
              var$auxi_sal_num_importe.delete;
              var$auxi_sal_nel_cantidad.delete;

              SELECT MAQU.BOL_MULTICLIENTE
              INTO var$bol_esmulticliente
              FROM SAPR_TMAQUINA MAQU
                INNER JOIN SAPR_TCUENTA CUEN ON CUEN.OID_SECTOR = MAQU.OID_SECTOR
              WHERE CUEN.OID_CUENTA = var$auxe_sal_oid_cuenta(idxS);

              IF var$auxe_sal_oid_cuenta_saldo IS NOT NULL AND var$auxe_sal_oid_cuenta_saldo.COUNT > 0 THEN
                FOR idxi IN var$auxe_sal_oid_cuenta_saldo.FIRST .. var$auxe_sal_oid_cuenta_saldo.LAST LOOP
                  IF var$auxe_sal_oid_cuenta (idxS) = var$auxe_sal_oid_cuenta_saldo (idxi) THEN
                    var$auxi_sal_oid_divisa (var$auxi_sal_oid_divisa.COUNT) := var$auxe_sal_oid_divisa (idxi);
                    var$auxi_sal_oid_denominacion (var$auxi_sal_oid_denominacion.COUNT) := var$auxe_sal_oid_denominacion (idxi);
                    var$auxi_sal_oid_unid_medida (var$auxi_sal_oid_unid_medida.COUNT) := var$auxe_sal_oid_unid_medida (idxi);
                    var$auxi_sal_cod_niv_detalle (var$auxi_sal_cod_niv_detalle.COUNT) := var$auxe_sal_cod_niv_detalle (idxi);
                    var$auxi_sal_cod_tp_efec_tot (var$auxi_sal_cod_tp_efec_tot.COUNT) := var$auxe_sal_cod_tp_efec_tot (idxi);
                    var$auxi_sal_oid_calidad (var$auxi_sal_oid_calidad.COUNT) := var$auxe_sal_oid_calidad (idxi);
                    var$auxi_sal_num_importe (var$auxi_sal_num_importe.COUNT) := var$auxe_sal_num_importe (idxi);
                    var$auxi_sal_nel_cantidad (var$auxi_sal_nel_cantidad.COUNT) := var$auxe_sal_nel_cantidad (idxi);
                  END IF;
                END LOOP;
              END IF;

              IF NOT fhay_error (par$nel_index => par$anel_index(idx)) THEN
                /* LOG de validación  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                    'fvalidar_codigo_externo con parametros:' ||
                                    ' par$nel_index: ' ||  par$anel_index(idx) ||
                                    ', par$des_cod_externo: ' || var$des_cod_externo_maeso ||
                                    ', par$cod_device_id: ' || par$acod_device_id (idx) ||
                                    ', par$fyh_gestion: ' || var$fyh_gestion ||
                                    ', par$cod_precinto: ' || NULL ||
                                    ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                    ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                                    ', par$cod_cultura: ' || par$cod_cultura,
                                par$cod_identificador   => '');

                IF NOT fhay_error (par$nel_index => par$anel_index(idx))
                    AND fvalidar_codigo_externo (
                          par$anel_index(idx),
                          var$des_cod_externo_maeso,
                          par$acod_device_id(idx),
                          var$fyh_gestion,
                          NULL,
                          var$oid_sector_mae,
                          var$fyh_gestion_gmt0,
                          par$cod_cultura) = 0 THEN
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                      'fvalidar_codigo_externo',
                                  par$cod_identificador   => '');
                  IF var$auxe_sal_oid_cuenta IS NOT NULL AND var$auxe_sal_oid_cuenta.COUNT > 0 THEN
                    DBMS_OUTPUT.put_line ('Creacion de Movimiento (1 o 5) ');
                    DBMS_OUTPUT.put_line ('var$adocs_oid_cuenta_ori ' || var$auxe_sal_oid_cuenta(idxS));

                    /* CREAR MOVIMIENTO MAECP (1 o 5)*/
                    var$oid_documento := SYS_GUID ();
                    var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                    var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maecp;
                    var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maecp;
                    var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                    var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                    var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$auxe_sal_oid_cuenta(idxS);
                    var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$auxe_sal_oid_cuenta(idxS);
                    var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$auxe_sal_oid_cuenta(idxS);
                    var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$auxe_sal_oid_cuenta(idxS);
                    var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                    var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                    var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                    var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);


                    /* Formulario y Codigo Externo */
                    var$adocs_cod_externo (var$adocs_cod_externo.COUNT) :=
                        fcargar_codigo_externo (
                          par$des_cod_externo       => var$des_cod_externo_maecp,
                          par$cod_device_id         => par$acod_device_id (idx),
                          par$fyh_gestion           => var$fyh_gestion,
                          par$cod_precinto          => NULL,
                          par$oid_sector_mae        => var$oid_sector_mae,
                          par$fyh_gestion_gmt0      => var$fyh_gestion_gmt0,
                          par$nel_sumar_secuencia   => var$aux_nel_secuencia_cp);

                    /* LOG de código externo  */
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'fcargar_codigo_externo:' || 
                                      ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                    var$aux_nel_secuencia_cp := var$aux_nel_secuencia_cp + 1;

                    /* Campos Adcionales */
                    IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                      FOR idxt IN var$auxt_oid_termino.FIRST .. var$auxt_oid_termino.LAST LOOP
                        var$avtdoc_oid_documento (var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                        var$avtdoc_oid_termino (var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino (idxt);
                        var$avtdoc_des_valor (var$avtdoc_des_valor.COUNT) := var$auxt_des_valor (idxt);
                      END LOOP;
                    END IF;

                    /* Valores */
                    IF var$auxi_sal_oid_divisa IS NOT NULL AND var$auxi_sal_oid_divisa.COUNT > 0 THEN
                      FOR idxSe IN var$auxi_sal_oid_divisa.FIRST .. var$auxi_sal_oid_divisa.LAST LOOP
                        var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                        var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxi_sal_oid_divisa (idxSe);
                        var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxi_sal_oid_denominacion (idxSe);
                        var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxi_sal_oid_unid_medida (idxSe);
                        var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxi_sal_cod_niv_detalle (idxSe);
                        var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxi_sal_cod_tp_efec_tot (idxSe);
                        var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxi_sal_oid_calidad (idxSe);
                        var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxi_sal_num_importe (idxSe);
                        var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxi_sal_nel_cantidad (idxSe);
                      END LOOP;
                    END IF;

                    /* FIN - CREAR MOVIMIENTO MAECP (1 o 5)*/

                    /* CREAR MOVIMIENTO MAESOI (2 o 6)*/
                    IF var$bol_crea_maesoi = 1 THEN
                      DBMS_OUTPUT.put_line ('Creacion de Movimiento (2 o 6) ');
                      var$oid_documento := SYS_GUID ();
                      DBMS_OUTPUT.put_line ('var$adocs_oid_cuenta_ori ' || var$oid_cuenta_prosegur);
                      var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                      var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maesoi;
                      var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maesoi;
                      var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                      var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                      var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$auxe_sal_oid_cuenta(idxS);
                      var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_prosegur;
                      var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$auxe_sal_oid_cuenta(idxS);
                      var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_prosegur;
                      var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                      var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                      var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id (idx);
                      var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id (idxC);
                      /* Formulario y Codigo Externo */

                      var$adocs_cod_externo(var$adocs_cod_externo.COUNT) :=
                        fcargar_codigo_externo (
                            par$des_cod_externo       => var$des_cod_externo_maesoi,
                            par$cod_device_id         => par$acod_device_id(idx),
                            par$fyh_gestion           => var$fyh_gestion,
                            par$cod_precinto          => NULL,
                            par$oid_sector_mae        => var$oid_sector_mae,
                            par$fyh_gestion_gmt0      => var$fyh_gestion_gmt0,
                            par$nel_sumar_secuencia   => var$aux_nel_secuencia_inf);

                      /* LOG de código externo  */
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'fcargar_codigo_externo:' || 
                                  ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                  ,
                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                      var$aux_nel_secuencia_inf := var$aux_nel_secuencia_inf + 1;

                      /* Campos Adcionales */
                      IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                        FOR idxt IN var$auxt_oid_termino.FIRST .. var$auxt_oid_termino.LAST LOOP
                            var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                            var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                            var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                        END LOOP;
                      END IF;

                      /* Valores */
                      IF var$auxi_sal_oid_divisa IS NOT NULL AND var$auxi_sal_oid_divisa.COUNT > 0 THEN
                        FOR idxSe IN var$auxi_sal_oid_divisa.FIRST .. var$auxi_sal_oid_divisa.LAST LOOP
                          var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                          var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxi_sal_oid_divisa(idxSe);
                          var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxi_sal_oid_denominacion(idxSe);
                          var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxi_sal_oid_unid_medida(idxSe);
                          var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxi_sal_cod_niv_detalle(idxSe);
                          var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxi_sal_cod_tp_efec_tot(idxSe);
                          var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxi_sal_oid_calidad(idxSe);
                          var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxi_sal_num_importe(idxSe);
                          var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxi_sal_nel_cantidad(idxSe);
                        END LOOP;
                      END IF;
                    END IF;

                    /* FIN - CREAR MOVIMIENTO MAESOI (2 o 6)*/


                    DBMS_OUTPUT.put_line ('Creacion de Movimiento (3 o 7) ');
                    /* CREAR MOVIMIENTO MAECN (3 o 7)*/
                    var$oid_documento := SYS_GUID ();
                    var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                    var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maecn;
                    var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maecn;
                    var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                    var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                    DBMS_OUTPUT.put_line('var$adocs_oid_cuenta_ori ' || var$oid_cuenta_prosegur);
                    var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_prosegur;
                    var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_prosegur;
                    var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_prosegur;
                    var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_prosegur;
                    var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                    var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                    var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                    var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);

                    /* Formulario y Codigo Externo */
                    var$adocs_cod_externo(var$adocs_cod_externo.COUNT) :=
                        fcargar_codigo_externo (
                          par$des_cod_externo       => var$des_cod_externo_maecn,
                          par$cod_device_id         => par$acod_device_id(idx),
                          par$fyh_gestion           => var$fyh_gestion,
                          par$cod_precinto          => NULL,
                          par$oid_sector_mae        => var$oid_sector_mae,
                          par$fyh_gestion_gmt0      => var$fyh_gestion_gmt0,
                          par$nel_sumar_secuencia   => var$aux_nel_secuencia_cp);
                    
                    /* LOG de código externo  */
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                'fcargar_codigo_externo:' || 
                                ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                ,
                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                    
                    var$aux_nel_secuencia_cp := var$aux_nel_secuencia_cp + 1;


                    /* Campos Adcionales */
                    IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                        FOR idxt IN var$auxt_oid_termino.FIRST .. var$auxt_oid_termino.LAST LOOP
                          var$avtdoc_oid_documento (var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                          var$avtdoc_oid_termino (var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino (idxt);
                          var$avtdoc_des_valor (var$avtdoc_des_valor.COUNT) := var$auxt_des_valor (idxt);
                        END LOOP;
                    END IF;

                    /* Valores */
                    --TROCAR VALORES POR VALORES SOMADOS?
                    IF var$auxi_sal_oid_divisa IS NOT NULL AND var$auxi_sal_oid_divisa.COUNT > 0 THEN
                      FOR idxSe IN var$auxi_sal_oid_divisa.FIRST .. var$auxi_sal_oid_divisa.LAST LOOP
                        var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                        var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxi_sal_oid_divisa (idxSe);
                        var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxi_sal_oid_denominacion(idxSe);
                        var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxi_sal_oid_unid_medida(idxSe);
                        var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxi_sal_cod_niv_detalle(idxSe);
                        var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxi_sal_cod_tp_efec_tot(idxSe);
                        var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxi_sal_oid_calidad(idxSe);
                        var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxi_sal_num_importe(idxSe);
                        var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxi_sal_nel_cantidad(idxSe);
                      END LOOP;
                    END IF;
                  END IF;
                  /* FIN - CREAR MOVIMIENTO MAECN (3 o 7)*/
                END IF;
              END IF;
            END LOOP;
          END IF;
        END IF;
        IF NOT fhay_error (par$nel_index => par$anel_index (idx))
          AND fvalidar_codigo_externo (par$anel_index (idx),
                                        var$des_cod_externo_maeso,
                                        par$acod_device_id (idx),
                                        var$fyh_gestion,
                                        NULL,
                                        var$oid_sector_mae,
                                        var$fyh_gestion_gmt0,
                                        par$cod_cultura) = 0 THEN
          /* CREAR MOVIMIENTO MAESO  (4 o 8)*/
          DBMS_OUTPUT.put_line ('Creacion de Movimiento (4 o 8) ');
          var$oid_documento := SYS_GUID ();
          var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
          var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maeso;
          var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maeso;
          var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
          var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
          var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_prosegur;
          var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_prosegur;
          var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_prosegur;
          var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_prosegur;
          var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
          var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
          var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
          var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);

          /* Formulario y Codigo Externo */
          var$adocs_cod_externo(var$adocs_cod_externo.COUNT) :=
              fcargar_codigo_externo (
                par$des_cod_externo       => var$des_cod_externo_maeso,
                par$cod_device_id         => par$acod_device_id (idx),
                par$fyh_gestion           => var$fyh_gestion,
                par$cod_precinto          => NULL,
                par$oid_sector_mae        => var$oid_sector_mae,
                par$fyh_gestion_gmt0      => var$fyh_gestion_gmt0,
                par$nel_sumar_secuencia   => var$aux_nel_secuencia);
            
          /* LOG de código externo  */
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                  par$des_version     => const$version,                            
                  par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                      'fcargar_codigo_externo:' || 
                      ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                      ,
                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

          var$aux_nel_secuencia := var$aux_nel_secuencia + 1;

          /* Campos Adcionales */
          IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
            FOR idxt IN var$auxt_oid_termino.FIRST .. var$auxt_oid_termino.LAST LOOP
              var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
              var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
              var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
            END LOOP;
          END IF;

          /* Valores */
          IF var$auxe_oid_divisa IS NOT NULL AND var$auxe_oid_divisa.COUNT > 0 THEN
            FOR idxt IN var$auxe_oid_divisa.FIRST .. var$auxe_oid_divisa.LAST LOOP
              DBMS_OUTPUT.put_line('idxt:: ' || (idxt));
              DBMS_OUTPUT.put_line('var$auxe_num_importe(idxt):: ' || var$auxe_num_importe(idxt));
              var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
              var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxe_oid_divisa(idxt);
              var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxe_oid_denominacion(idxt);
              var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxe_oid_unid_medida(idxt);
              var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxe_cod_niv_detalle(idxt);
              var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxe_cod_tp_efec_tot(idxt);
              var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxe_oid_calidad(idxt);
              var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxe_num_importe(idxt);
              var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxe_nel_cantidad(idxt);
            END LOOP;
          END IF;

          /* FIN - CREAR MOVIMIENTO MAESO (4 o 8)*/

          /* Si no es multicliente */
          IF var$bol_esmulticliente = 0 THEN
            /* CREAR MOVIMIENTO MAESOI (9)*/

            DBMS_OUTPUT.put_line ('Creacion de Movimiento (9) ');
            var$oid_documento := SYS_GUID ();
            var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
            var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maesoi;
            var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maesoi;
            var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
            var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;

            DBMS_OUTPUT.put_line ('var$adocs_oid_cuenta_ori ' || var$oid_cuenta_cliente);
            var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
            var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_prosegur;
            var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
            var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_prosegur;
            var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
            var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
            var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
            var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);

            /* Formulario y Codigo Externo */
            var$adocs_cod_externo(var$adocs_cod_externo.COUNT) :=
              fcargar_codigo_externo (
                  par$des_cod_externo       => var$des_cod_externo_maesoi,
                  par$cod_device_id         => par$acod_device_id(idx),
                  par$fyh_gestion           => var$fyh_gestion,
                  par$cod_precinto          => NULL,
                  par$oid_sector_mae        => var$oid_sector_mae,
                  par$fyh_gestion_gmt0      => var$fyh_gestion_gmt0,
                  par$nel_sumar_secuencia   => var$aux_nel_secuencia_inf);
                
            /* LOG de código externo  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                        'fcargar_codigo_externo:' || 
                        ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                        ,
                    par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
            
            var$aux_nel_secuencia_inf := var$aux_nel_secuencia_inf + 1;

            /* Campos Adcionales */
            IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
              FOR idxt IN var$auxt_oid_termino.FIRST .. var$auxt_oid_termino.LAST LOOP
                  var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                  var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                  var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
              END LOOP;
            END IF;

            /* Valores */
            IF var$auxe_oid_divisa IS NOT NULL AND var$auxe_oid_divisa.COUNT > 0 THEN
              FOR idxt IN var$auxe_oid_divisa.FIRST .. var$auxe_oid_divisa.LAST LOOP
                  var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                  var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxe_oid_divisa(idxt);
                  var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxe_oid_denominacion(idxt);
                  var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxe_oid_unid_medida(idxt);
                  var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxe_cod_niv_detalle(idxt);
                  var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxe_cod_tp_efec_tot(idxt);
                  var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxe_oid_calidad(idxt);

                  DBMS_OUTPUT.put_line('var$auxe_num_importe(idxt): ' || var$auxe_num_importe(idxt));
                  var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxe_num_importe(idxt);
                  var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxe_nel_cantidad(idxt);
              END LOOP;
            END IF;

            /* FIN - CREAR MOVIMIENTO MAESOI (9)*/

            /* IF MAQUINA ESTA EN UNA PLANIFICACION QUE CONTRALA FATURACION? */
            IF var$bol_controla_faturacion = 1 THEN
              /* CREAR MOVIMIENTO MAESOI (10)*/

              DBMS_OUTPUT.put_line ('Creacion de Movimiento (10) ');
              var$oid_documento := SYS_GUID();
              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maesoi;
              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maesoi;
              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_tesoreria;
              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_tesoreria;
              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_boveda;
              var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
              var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);


              /* Formulario y Codigo Externo */
              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) :=
                  fcargar_codigo_externo (
                    par$des_cod_externo       => var$des_cod_externo_maesoi,
                    par$cod_device_id         => par$acod_device_id (idx),
                    par$fyh_gestion           => var$fyh_gestion,
                    par$cod_precinto          => NULL,
                    par$oid_sector_mae        => var$oid_sector_mae,
                    par$fyh_gestion_gmt0      => var$fyh_gestion_gmt0,
                    par$nel_sumar_secuencia   => var$aux_nel_secuencia_inf);
              /* LOG de código externo  */
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                      par$des_version     => const$version,                            
                      par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                          'fcargar_codigo_externo:' || 
                          ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                          ,
                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
              var$aux_nel_secuencia_inf := var$aux_nel_secuencia_inf + 1;

              /* Campos Adcionales */
              IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                FOR idxt IN var$auxt_oid_termino.FIRST .. var$auxt_oid_termino.LAST LOOP
                  var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                  var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                  var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                END LOOP;
              END IF;

              /* Valores */
              IF var$auxe_oid_divisa IS NOT NULL AND var$auxe_oid_divisa.COUNT > 0 THEN
                FOR idxt IN var$auxe_oid_divisa.FIRST .. var$auxe_oid_divisa.LAST LOOP
                  var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                  var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxe_oid_divisa(idxt);
                  var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxe_oid_denominacion(idxt);
                  var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxe_oid_unid_medida(idxt);
                  var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxe_cod_niv_detalle(idxt);
                  var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxe_cod_tp_efec_tot(idxt);
                  var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxe_oid_calidad (idxt);
                  var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxe_num_importe (idxt);
                  var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxe_nel_cantidad(idxt);
                END LOOP;
              END IF;
            /* FIN - CREAR MOVIMIENTO MAESOI (10)*/
            END IF;
          END IF;

        END IF;
      END LOOP;

      IF NOT fhay_error (par$nel_index => par$anel_index (idx)) THEN
        /* INICIO - LOG de sguardar_documento*/
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                            par$cod_identificador   => '');
        /* Grabar documentos */
        sguardar_documento (
            par$oid_llamada       => par$oid_llamada,
            par$adocs_oid                   => var$adocs_oid,
            par$adocs_oid_formulario        => var$adocs_oid_formulario,
            par$adocs_oid_tipo_documento    => var$adocs_oid_tipo_documento,
            par$adocs_fyh_gestion           => var$adocs_fyh_gestion,
            par$adocs_fyh_contable          => var$adocs_fyh_contable,
            par$adocs_cod_actual_id         => var$acod_actual_id,
            par$adocs_cod_collection_id     => var$acndoc_collection_id,
            par$adocs_cod_externo           => var$adocs_cod_externo,
            par$adocs_oid_cuenta_ori        => var$adocs_oid_cuenta_ori,
            par$adocs_oid_cuenta_des        => var$adocs_oid_cuenta_des,
            par$adocs_oid_cuentasaldo_ori   => var$adocs_oid_cuentasaldo_ori,
            par$adocs_oid_cuentasaldo_des   => var$adocs_oid_cuentasaldo_des,
            par$adocs_oid_sector_ori        => var$adocs_oid_sector_ori,
            par$adocs_oid_sector_des        => var$adocs_oid_sector_des,
            par$aefdoc_oid_documento        => var$aefdoc_oid_documento,
            par$aefdoc_oid_divisa           => var$aefdoc_oid_divisa,
            par$aefdoc_oid_denominacion     => var$aefdoc_oid_denominacion,
            par$aefdoc_oid_unid_medida      => var$aefdoc_oid_unid_medida,
            par$aefdoc_cod_niv_detalle      => var$aefdoc_cod_niv_detalle,
            par$aefdoc_cod_tp_efec_tot      => var$aefdoc_cod_tp_efec_tot,
            par$aefdoc_oid_calidad          => var$aefdoc_oid_calidad,
            par$aefdoc_num_importe          => var$aefdoc_num_importe,
            par$aefdoc_nel_cantidad         => var$aefdoc_nel_cantidad,
            par$avtdoc_oid_documento        => var$avtdoc_oid_documento,
            par$avtdoc_oid_termino          => var$avtdoc_oid_termino,
            par$avtdoc_des_valor            => var$avtdoc_des_valor,
            par$cod_usuario                 => par$cod_usuario,
            par$cod_cultura                 => par$cod_cultura,
            par$cod_ejecucion               => par$cod_ejecucion,
            par$nel_index                   => par$anel_index (idx));

        COMMIT;

          /* FIN - LOG - parametros sguardar_documento*/
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                    par$cod_identificador   => '');

        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
              VALUES (par$anel_index (idx), '0040130000',
                      gepr_putilidades_###VERSION###.ftraduzir (
                        par$cod_cultura,
                        '0040130000',
                        gepr_pcomon_###VERSION###.const$CodFunMoviShipout,
                        gepr_pcomon_###VERSION###.
                          const$codAplicacionGenesis,
                        NULL,
                        0), 'VALIDACIONES');
      END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
          ROLLBACK;
          var$err := gepr_putilidades_###VERSION###.fformat_error;

          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1,
                                          COD_CAMPO2,
                                          COD_CAMPO3,
                                          COD_CALIFICADOR)
                VALUES (par$anel_index (idx),
                        '3040130001',
                        gepr_putilidades_###VERSION###.
                        ftraduzir (
                          par$cod_cultura,
                          '3040130001',
                          gepr_pcomon_###VERSION###.const$CodFunMoviShipout,
                          gepr_pcomon_###VERSION###.
                            const$codAplicacionGenesis,
                          var$err,
                          0),
                        'VALIDACIONES');
    END;
  END LOOP;

  /* Validaciones */
  OPEN par$rc_validaciones FOR
    SELECT OID_CAMPO1 AS NEL_INDEX,
            COD_CAMPO2 AS CODIGO,
            COD_CAMPO3 AS DESCRIPCION
      FROM SAPR_GTT_TAUXILIAR
      WHERE COD_CALIFICADOR = 'VALIDACIONES';

  /* Documentos */
  OPEN par$rc_documentos FOR
    SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
      FROM SAPR_GTT_TAUXILIAR
      WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

  /* Planificacion */
  OPEN par$rc_planificaciones FOR
    SELECT OID_CAMPO1 AS NEL_INDEX,
            COD_CAMPO2 AS CODIGO_BANCO,
            COD_CAMPO3 AS CODIGO_PLANIFICACION
      FROM SAPR_GTT_TAUXILIAR
      WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

  gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in (
    const$codFuncionalidad || '.' || const$nombre_func,
    var$inserts,
    var$updates,
    var$deletes,
    var$merges,
    var$selects,
    var$registros,
    var$inicio,
    NULL,
    'C',
    par$info_ejecucion,
    var$err,
    par$cod_usuario,
    par$cod_ejecucion);
  COMMIT;
/* ===  Tratar excepciones - Rollback === */
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      var$err := gepr_putilidades_###VERSION###.fformat_error;

      var$registros :=
         var$inserts + var$updates + var$deletes + var$merges + var$selects;
      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in (
         const$codFuncionalidad || '.' || const$nombre_func,
         var$inserts,
         var$updates,
         var$deletes,
         var$merges,
         var$selects,
         var$registros,
         var$inicio,
         NULL,
         'R',
         par$info_ejecucion,
         var$err,
         par$cod_usuario,
         par$cod_ejecucion);
END sgrabar_mov_shipout;

 PROCEDURE svalidar_mov_shipout(
                                 par$oid_llamada       IN gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                 par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$oid_cuenta_prosegur     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$oid_cuenta_tesoreria    OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$bol_controla_faturacion OUT gepr_pcomon_###VERSION###.tipo$nbol_,
                                 par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                 par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$cod_banco_capital    gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_banco_tesoreria  gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_cuenta_tesoreria gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_planificacion    gepr_pcomon_###VERSION###.tipo$cod_;
    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada     => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);

    /* Validar Cuenta Prosegur */
    svalidar_cuenta(par$oid_llamada     => par$oid_llamada,
                    par$cod_identificador_ajeno => 'MAE',
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => gepr_pcomon_###VERSION###.const$CodClienteProsegur,
                    par$cod_sub_cliente         => gepr_pcomon_###VERSION###.const$CodSubClienteProsegur,
                    par$cod_punto_servicio      => gepr_pcomon_###VERSION###.const$CodPtoServicioProsegur,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_prosegur,
                    par$oid_sector              => par$oid_sector_mae);

    IF NOT fhay_error(par$nel_index => par$nel_index) THEN

      /* Recuperar Banco Capital y Banco Comision */
      BEGIN

            SELECT CLIC.COD_CLIENTE, PLAN.BOL_CONTROLA_FACTURACION, PLAN.COD_PLANIFICACION
              INTO var$cod_banco_capital, par$bol_controla_faturacion, var$cod_planificacion
              FROM SAPR_TMAQUINA MAQU
        INNER JOIN SAPR_TPLANXMAQUINA PLMA ON PLMA.OID_MAQUINA = MAQU.OID_MAQUINA AND PLMA.BOL_ACTIVO = 1
        INNER JOIN SAPR_TPLANIFICACION PLAN ON PLAN.OID_PLANIFICACION = PLMA.OID_PLANIFICACION AND PLAN.BOL_ACTIVO = 1
        INNER JOIN GEPR_TCLIENTE CLIC ON CLIC.OID_CLIENTE = PLAN.OID_CLIENTE AND PLMA.BOL_ACTIVO = 1
        INNER JOIN GEPR_TCLIENTE CLIM ON CLIM.OID_CLIENTE = PLAN.OID_CLIENTE_COMISION AND CLIM.BOL_VIGENTE = 1
             WHERE MAQU.OID_SECTOR = par$oid_sector_mae
               AND MAQU.COD_IDENTIFICACION = par$cod_device_id
               AND MAQU.BOL_ACTIVO = 1;

      EXCEPTION WHEN no_data_found THEN
        var$cod_banco_capital := NULL;
        par$bol_controla_faturacion := 0;
        var$cod_planificacion := NULL;
      END;

      IF par$bol_controla_faturacion = 1 THEN

        /* 2040130008 - Error al identificar el Banco Capital configurado en la planificacion [{0}]. */
        IF var$cod_banco_capital IS NULL THEN
          dbms_output.put_line('Error al identificar el Banco Capital configurado en la planificacion [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040130008', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040130008', gepr_pcomon_###VERSION###.const$CodFunMoviShipout, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_planificacion, 0), 'VALIDACIONES');

        END IF;

        /* 2040130005 - No existe una Delegación Central con el código [{0}] configurada en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TDELEGACION
               WHERE COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe una Delegación Central con el código [{0}] configurada en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040130005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040130005', gepr_pcomon_###VERSION###.const$CodFunMoviShipout, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodDelegacionCentral, 0), 'VALIDACIONES');

        END;

        /* 2040130006 - No existe una Planta Central con el código [{0}] configurada en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TPLANTA PLAN
          INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLAN.OID_DELEGACION
               WHERE PLAN.COD_PLANTA = gepr_pcomon_###VERSION###.const$CodPlantaCentral
                 AND PLAN.BOL_ACTIVO = 1
                 AND DELE.COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND DELE.BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe una Planta Central con el código [{0}] configurada en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040130006', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040130006', gepr_pcomon_###VERSION###.const$CodFunMoviShipout, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodPlantaCentral, 0), 'VALIDACIONES');

        END;

        /* 2040130007 - No existe un Sector Boveda con el código [{0}] configurado en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TSECTOR SECT
          INNER JOIN GEPR_TPLANTA PLAN ON PLAN.OID_PLANTA = SECT.OID_PLANTA
          INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLAN.OID_DELEGACION
               WHERE SECT.COD_SECTOR = gepr_pcomon_###VERSION###.const$CodSectorBoveda
                 AND SECT.BOL_ACTIVO = 1
                 AND PLAN.COD_PLANTA = gepr_pcomon_###VERSION###.const$CodPlantaCentral
                 AND PLAN.BOL_ACTIVO = 1
                 AND DELE.COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND DELE.BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe un Sector Boveda con el código [{0}] configurado en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040130007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040130007', gepr_pcomon_###VERSION###.const$CodFunMoviShipout, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodSectorBoveda, 0), 'VALIDACIONES');

        END;

        /* Recuperar Banco Tesoreria Y Cuenta Tesoreria */
        BEGIN

              SELECT
                NVL(SCMA.COD_SUBCLIENTE, SCDE.COD_SUBCLIENTE) COD_SUBCLIENTE,
                NVL(PSMA.COD_PTO_SERVICIO, PSDE.COD_PTO_SERVICIO) COD_PTO_SERVICIO
              INTO var$cod_banco_tesoreria, var$cod_cuenta_tesoreria
              FROM
                SAPR_TMAQUINA MAQU
                INNER JOIN SAPR_TPLANXMAQUINA PLMA ON MAQU.OID_MAQUINA = PLMA.OID_MAQUINA AND PLMA.BOL_ACTIVO = '1'
                INNER JOIN SAPR_TPLANIFICACION PLAN ON PLMA.OID_PLANIFICACION = PLAN.OID_PLANIFICACION AND PLAN.BOL_ACTIVO = 1
                INNER JOIN GEPR_TSECTOR SECT ON MAQU.OID_SECTOR = SECT.OID_SECTOR
                INNER JOIN GEPR_TPLANTA PLAA ON SECT.OID_PLANTA = PLAA.OID_PLANTA
                LEFT JOIN GEPR_TSUBCLIENTE SCMA ON PLMA.OID_SUBCLIENTE_TESORERIA = SCMA.OID_SUBCLIENTE
                LEFT JOIN GEPR_TPUNTO_SERVICIO PSMA ON PLMA.OID_PTO_SERVICIO_TESORERIA = PSMA.OID_PTO_SERVICIO
                LEFT JOIN GEPR_TDELEGACIONXCONFIG_FACTUR DECF ON PLAA.OID_DELEGACION = DECF.OID_DELEGACION AND PLAN.OID_CLIENTE = DECF.OID_CLIENTE_CAPITAL
                LEFT JOIN GEPR_TSUBCLIENTE SCDE ON DECF.OID_SUBCLIENTE_TESORERIA = SCDE.OID_SUBCLIENTE
                LEFT JOIN GEPR_TPUNTO_SERVICIO PSDE ON DECF.OID_PTO_SERVICIO_TESORERIA = PSDE.OID_PTO_SERVICIO
              WHERE MAQU.OID_SECTOR = par$oid_sector_mae
                 AND MAQU.COD_IDENTIFICACION = par$cod_device_id;

        EXCEPTION WHEN no_data_found THEN
          var$cod_banco_tesoreria := NULL;
          var$cod_cuenta_tesoreria := NULL;
        END;

        /* Validar Banco Tesoreria */
        IF var$cod_banco_tesoreria IS NULL THEN
          dbms_output.put_line('Error al identificar la Banco Tesoreria configurado para la maquina [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040130009', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040130009', gepr_pcomon_###VERSION###.const$CodFunMoviShipout, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_device_id, 0), 'VALIDACIONES');

        END IF;

        /* Validar Cuenta Tesoreria */
        IF var$cod_cuenta_tesoreria IS NULL THEN
          dbms_output.put_line('Error al identificar la Cuenta Tesoreria configurado para la maquina [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040130010', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040130010', gepr_pcomon_###VERSION###.const$CodFunMoviShipout, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_device_id, 0), 'VALIDACIONES');

        END IF;

        IF NOT fhay_error(par$nel_index => par$nel_index) THEN

          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, var$cod_banco_capital, var$cod_planificacion, 'PLANIFICACIONES');

          /* Validar Cuenta Tesoreria */
          svalidar_cuenta(par$oid_llamada     => par$oid_llamada,
                            par$cod_identificador_ajeno => NULL,
                          par$nel_index               => par$nel_index,
                          par$cod_cliente             => var$cod_banco_capital,
                          par$cod_sub_cliente         => var$cod_banco_tesoreria,
                          par$cod_punto_servicio      => var$cod_cuenta_tesoreria,
                          par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldo,
                          par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalTesoreria,
                          par$cod_device_id           => gepr_pcomon_###VERSION###.const$CodSectorBoveda,
                          par$cod_cultura             => par$cod_cultura,
                          par$cod_usuario             => par$cod_usuario,
                          par$bol_esmaquina           => 0,
                          par$bol_validar_punto       => 1,
                          par$cod_pais                => par$cod_pais,
                          par$oid_cuenta              => par$oid_cuenta_tesoreria,
                          par$oid_sector              => par$oid_sector_boveda);

        END IF;
      END IF;

    END IF;
    DBMS_OUTPUT.PUT_LINE(var$nel_existe);
  END svalidar_mov_shipout;
 
 /* Grabar Movimientos de Recuento */
  PROCEDURE sgrabar_mov_recuento(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                 par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                 par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$acod_precinto           IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                 par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                 par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                 par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                 par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                 par$adiv_nel_index          IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$adiv_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$aefdoc_div_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                 par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                 par$aefdoc_nel_tipo         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                 par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                 par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                 par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                 par$rc_validaciones         OUT sys_refcursor,
                                 par$rc_planificaciones      OUT sys_refcursor,
                                 par$rc_documentos           OUT sys_refcursor,
                                 par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_recuento';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);
      var$detalle           VARCHAR2(4000);
      var$detalle_actual    VARCHAR2(4000);

      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$bol_controla_faturacion   gepr_pcomon_###VERSION###.tipo$nbol_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable              gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0         gepr_pcomon_###VERSION###.tipo$fyh_;
      var$hay_valores               gepr_pcomon_###VERSION###.tipo$nel_ := 0;

      /* Formularios */
      /*MAEREC*/
      var$oid_formulario_maerec     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maerec gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maerec    gepr_pcomon_###VERSION###.tipo$cod_;
      /*MAERED*/
      var$oid_formulario_maered     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maered gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maered    gepr_pcomon_###VERSION###.tipo$cod_;
      /*MAEDIF*/
      var$oid_formulario_maedif     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maedif gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maedif    gepr_pcomon_###VERSION###.tipo$cod_;
      /*MAERDI*/
      var$oid_formulario_maerdi     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maerdi gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maerdi    gepr_pcomon_###VERSION###.tipo$cod_;
      /*MAERDD*/
      var$oid_formulario_maerdd     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maerdd gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maerdd    gepr_pcomon_###VERSION###.tipo$cod_;

      /* Cuentas */
      var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_cuenta_comision       gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_cuenta_tesoreria      gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_boveda         gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable        gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
      var$adocs_cod_actual_id       gepr_pcomon_###VERSION###.tipo$descs_;
      var$adocs_cod_collection_id   gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$auxecon_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxecon_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxecon_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxecon_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxecon_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxecon_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxecon_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxecon_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;
      var$auxedec_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxedec_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxedec_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxedec_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxedec_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxedec_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxedec_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxedec_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;
      var$auxedif_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxedif_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxedif_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxedif_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxedif_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxedif_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxedif_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxedif_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;
      var$auxt_oid_termino          gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor            gepr_pcomon_###VERSION###.tipo$descs_;
      var$array_nulo                gepr_pcomon_###VERSION###.tipo$descs_;
      var$tauxedec_oid_divisa       varchar2_array;
      var$tauxecon_oid_divisa       varchar2_array;
      var$tauxedif_oid_divisa       varchar2_array;

      var$aux_maerec_secuencia      gepr_pcomon_###VERSION###.tipo$nel_;
      var$aux_maered_secuencia      gepr_pcomon_###VERSION###.tipo$nel_;
      var$aux_maedif_secuencia      gepr_pcomon_###VERSION###.tipo$nel_;
      var$aux_maerdi_secuencia      gepr_pcomon_###VERSION###.tipo$nel_;
      var$aux_maerdd_secuencia      gepr_pcomon_###VERSION###.tipo$nel_;

    BEGIN
      /* INICIO - LOG de parametros iniciales*/
      IF par$oid_llamada IS NOT NULL THEN
        var$detalle := q'[Parametros iniciales: 
        par$oid_llamada: ]'             || par$oid_llamada || q'[
        par$cod_identificador_ajeno: ]' || par$cod_identificador_ajeno || q'[
        par$cod_cultura: ]'             || par$cod_cultura || q'[
        par$info_ejecucion: ]'          || par$info_ejecucion || q'[
        par$cod_usuario: ]'             || par$cod_usuario || q'[
        par$cod_pais: ]'                || par$cod_pais ;

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');

        /* INICIO LOG de arrays asociativos */
        IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
              var$detalle_actual := '';
              IF par$anel_index(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$anel_index(' || idx || '):  ' || par$anel_index(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$anel_index(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$acod_device_id IS NOT NULL AND par$acod_device_id.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
              var$detalle_actual := '';
              IF par$acod_device_id(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$acod_device_id(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$acod_cliente IS NOT NULL AND par$acod_cliente.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
              var$detalle_actual := '';
              IF par$acod_cliente(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$acod_cliente(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$acod_sub_cliente IS NOT NULL AND par$acod_sub_cliente.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
              var$detalle_actual := '';
              IF par$acod_sub_cliente(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$acod_sub_cliente(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$acod_punto_servicio IS NOT NULL AND par$acod_punto_servicio.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
              var$detalle_actual := '';
              IF par$acod_punto_servicio(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$acod_punto_servicio(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$acod_precinto IS NOT NULL AND par$acod_precinto.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$acod_precinto.first ..  par$acod_precinto.last LOOP 
              var$detalle_actual := '';
              IF par$acod_precinto(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$acod_precinto(' || idx || '):  ' || par$acod_precinto(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$acod_precinto(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$afyh_gestion IS NOT NULL AND par$afyh_gestion.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
              var$detalle_actual := '';
              IF par$afyh_gestion(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$afyh_gestion(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$afyh_contable IS NOT NULL AND par$afyh_contable.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
              var$detalle_actual := '';
              IF par$afyh_contable(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$afyh_contable(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
              var$detalle_actual := '';
              IF par$acod_actual_id(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$acod_actual_id(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$acod_collection_id IS NOT NULL AND par$acod_collection_id.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$acod_collection_id.first ..  par$acod_collection_id.last LOOP 
              var$detalle_actual := '';
              IF par$acod_collection_id(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$acod_collection_id(' || idx || '):  ' || par$acod_collection_id(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$acod_collection_id(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$anel_gmt_minuto IS NOT NULL AND par$anel_gmt_minuto.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
              var$detalle_actual := '';
              IF par$anel_gmt_minuto(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$anel_gmt_minuto(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
              var$detalle_actual := '';
              IF par$avtdoc_nel_index(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$avtdoc_nel_index(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$avtdoc_cod_termino IS NOT NULL AND par$avtdoc_cod_termino.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
              var$detalle_actual := '';
              IF par$avtdoc_cod_termino(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$avtdoc_cod_termino(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$avtdoc_des_valor IS NOT NULL AND par$avtdoc_des_valor.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
              var$detalle_actual := '';
              IF par$avtdoc_des_valor(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$avtdoc_des_valor(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$adiv_nel_index IS NOT NULL AND par$adiv_nel_index.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$adiv_nel_index.first ..  par$adiv_nel_index.last LOOP 
              var$detalle_actual := '';
              IF par$adiv_nel_index(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$adiv_nel_index(' || idx || '):  ' || par$adiv_nel_index(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$adiv_nel_index(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$adiv_index IS NOT NULL AND par$adiv_index.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$adiv_index.first ..  par$adiv_index.last LOOP 
              var$detalle_actual := '';
              IF par$adiv_index(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$adiv_index(' || idx || '):  ' || par$adiv_index(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$adiv_index(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$aefdoc_div_index IS NOT NULL AND par$aefdoc_div_index.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$aefdoc_div_index.first ..  par$aefdoc_div_index.last LOOP 
              var$detalle_actual := '';
              IF par$aefdoc_div_index(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_div_index(' || idx || '):  ' || par$aefdoc_div_index(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_div_index(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
              var$detalle_actual := '';
              IF par$aefdoc_nel_index(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_index(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$aefdoc_cod_divisa IS NOT NULL AND par$aefdoc_cod_divisa.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
              var$detalle_actual := '';
              IF par$aefdoc_cod_divisa(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_divisa(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$aefdoc_cod_denominacion IS NOT NULL AND par$aefdoc_cod_denominacion.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
              var$detalle_actual := '';
              IF par$aefdoc_cod_denominacion(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_denominacion(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$aefdoc_nel_cantidad IS NOT NULL AND par$aefdoc_nel_cantidad.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
              var$detalle_actual := '';
              IF par$aefdoc_nel_cantidad(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_cantidad(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$aefdoc_num_importe IS NOT NULL AND par$aefdoc_num_importe.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
              var$detalle_actual := '';
              IF par$aefdoc_num_importe(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_num_importe(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;

        IF par$aefdoc_nel_tipo IS NOT NULL AND par$aefdoc_nel_tipo.COUNT > 0 THEN
          var$detalle := '';
          FOR idx IN  par$aefdoc_nel_tipo.first ..  par$aefdoc_nel_tipo.last LOOP 
              var$detalle_actual := '';
              IF par$aefdoc_nel_tipo(idx) IS NOT NULL THEN
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_tipo(' || idx || '):  ' || par$aefdoc_nel_tipo(idx);
              ELSE
                var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_tipo(' || idx || '):  NULL';
              END IF;
              IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => var$detalle,
                              par$cod_identificador   => '');
                var$detalle := var$detalle_actual;
              ELSE
                var$detalle := var$detalle || const$new_line || var$detalle_actual;
              END IF;
          END LOOP;
          IF var$detalle IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
          END IF;
        END IF;
        /* FIN LOG de arrays asociativos */
      END IF;
      /* FIN - LOG de parametros iniciales*/

      /* #### Inicializar los cursores #### */
      OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
      OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
      OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

      /* Limpiar tabla temporaria */
      DELETE SAPR_GTT_TAUXILIAR;
      COMMIT;

      /* Recuperar Formularios - MAEREC */
      srecuperar_formularios(par$cod_formulario     => 'MAEREC',
                             par$oid_formulario     => var$oid_formulario_maerec,
                             par$oid_tipo_documento => var$oid_tipo_documento_maerec,
                             par$des_cod_externo    => var$des_cod_externo_maerec);

      /* LOG recuperación de formulario  */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAEREC - ' ||  
                                  'var$oid_formulario_maerec: ' || var$oid_formulario_maerec ||
                                  ', var$oid_tipo_documento_maerec: ' || var$oid_tipo_documento_maerec ||
                                  ', var$des_cod_externo_maerec: ' || var$des_cod_externo_maerec,
                              par$cod_identificador   => '');


      /* Recuperar Formularios - MAERED */
      srecuperar_formularios(par$cod_formulario     => 'MAERED',
                             par$oid_formulario     => var$oid_formulario_maered,
                             par$oid_tipo_documento => var$oid_tipo_documento_maered,
                             par$des_cod_externo    => var$des_cod_externo_maered);

      /* LOG recuperación de formulario  */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAERED - ' ||  
                                  'var$oid_formulario_maered: ' || var$oid_formulario_maered ||
                                  ', var$oid_tipo_documento_maered: ' || var$oid_tipo_documento_maered ||
                                  ', var$des_cod_externo_maered: ' || var$des_cod_externo_maered,
                              par$cod_identificador   => '');

      /* Recuperar Formularios - MAEDIF */
      srecuperar_formularios(par$cod_formulario     => 'MAEDIF',
                             par$oid_formulario     => var$oid_formulario_maedif,
                             par$oid_tipo_documento => var$oid_tipo_documento_maedif,
                             par$des_cod_externo    => var$des_cod_externo_maedif);
      
      /* LOG recuperación de formulario  */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAEDIF - ' ||  
                                  'var$oid_formulario_maedif: ' || var$oid_formulario_maedif ||
                                  ', var$oid_tipo_documento_maedif: ' || var$oid_tipo_documento_maedif ||
                                  ', var$des_cod_externo_maedif: ' || var$des_cod_externo_maedif,
                              par$cod_identificador   => '');

      /* Recuperar Formularios - MAERDI */
      srecuperar_formularios(par$cod_formulario     => 'MAERDI',
                             par$oid_formulario     => var$oid_formulario_maerdi,
                             par$oid_tipo_documento => var$oid_tipo_documento_maerdi,
                             par$des_cod_externo    => var$des_cod_externo_maerdi);
      
      /* LOG recuperación de formulario  */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAERDI - ' ||  
                                  'var$oid_formulario_maerdi: ' || var$oid_formulario_maerdi ||
                                  ', var$oid_tipo_documento_maerdi: ' || var$oid_tipo_documento_maerdi ||
                                  ', var$des_cod_externo_maerdi: ' || var$des_cod_externo_maerdi,
                              par$cod_identificador   => '');

      /* Recuperar Formularios - MAERDD */
      srecuperar_formularios(par$cod_formulario     => 'MAERDD',
                             par$oid_formulario     => var$oid_formulario_maerdd,
                             par$oid_tipo_documento => var$oid_tipo_documento_maerdd,
                             par$des_cod_externo    => var$des_cod_externo_maerdd);
      
      /* LOG recuperación de formulario  */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera formulario MAERDD - ' ||  
                                  'var$oid_formulario_maerdd: ' || var$oid_formulario_maerdd ||
                                  ', var$oid_tipo_documento_maerdd: ' || var$oid_tipo_documento_maerdd ||
                                  ', var$des_cod_externo_maerdd: ' || var$des_cod_externo_maerdd,
                              par$cod_identificador   => '');

      FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
        BEGIN
          /* Limpiar tabla temporaria */
          DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
          var$adocs_oid.delete;
          var$adocs_oid_formulario.delete;
          var$adocs_fyh_gestion.delete;
          var$adocs_fyh_contable.delete;
          var$adocs_cod_externo.delete;
          var$adocs_oid_cuenta_ori.delete;
          var$adocs_oid_cuenta_des.delete;
          var$adocs_oid_cuentasaldo_ori.delete;
          var$adocs_oid_cuentasaldo_des.delete;
          var$adocs_oid_sector_ori.delete;
          var$adocs_oid_sector_des.delete;
          var$adocs_cod_actual_id.delete;
          var$adocs_cod_collection_id.delete;
          var$aefdoc_oid_documento.delete;
          var$aefdoc_oid_divisa.delete;
          var$aefdoc_oid_denominacion.delete;
          var$aefdoc_oid_unid_medida.delete;
          var$aefdoc_cod_niv_detalle.delete;
          var$aefdoc_cod_tp_efec_tot.delete;
          var$aefdoc_oid_calidad.delete;
          var$aefdoc_num_importe.delete;
          var$aefdoc_nel_cantidad.delete;
          var$avtdoc_oid_documento.delete;
          var$avtdoc_oid_termino.delete;
          var$avtdoc_des_valor.delete;

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Por ingresar en svalidar_mov_recuento()',
                                        par$cod_identificador   => '');

          /* Procedure responsable por validaciones del documento */
          svalidar_mov_recuento(par$oid_llamada             => par$oid_llamada,
                              par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                              par$nel_index               => par$anel_index(idx),
                              par$cod_device_id           => par$acod_device_id(idx),
                              par$cod_cliente             => par$acod_cliente(idx),
                              par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                              par$cod_punto_servicio      => par$acod_punto_servicio(idx),
                              par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                              par$oid_cuenta_comision     => var$oid_cuenta_comision,
                              par$oid_cuenta_tesoreria    => var$oid_cuenta_tesoreria,
                              par$oid_sector_mae          => var$oid_sector_mae,
                              par$oid_sector_boveda       => var$oid_sector_boveda,
                              par$bol_controla_faturacion => var$bol_controla_faturacion,
                              par$cod_cultura             => par$cod_cultura,
                              par$cod_usuario             => par$cod_usuario,
                              par$cod_pais                => par$cod_pais);

          /* LOG de validación  */
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                  par$des_version     => const$version,                            
                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                      'svalidar_mov_recuento con parametros:' ||
                      ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                      ', par$nel_index: ' || par$anel_index(idx) ||
                      ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                      ', par$cod_cliente: ' || par$acod_cliente(idx) ||
                      ', par$cod_sub_cliente: ' || par$acod_sub_cliente(idx) ||
                      ', par$cod_punto_servicio: ' || par$acod_punto_servicio(idx) ||
                      ', par$oid_cuenta_cliente: ' || var$oid_cuenta_cliente ||
                      ', par$oid_cuenta_comision: ' || var$oid_cuenta_comision ||
                      ', par$oid_cuenta_tesoreria: ' || var$oid_cuenta_tesoreria ||
                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                      ', par$oid_sector_boveda: ' || var$oid_sector_boveda ||
                      ', par$bol_controla_faturacion: ' || var$bol_controla_faturacion ||
                      ', par$cod_cultura: ' || par$cod_cultura ||
                      ', par$cod_usuario: ' ||par$cod_usuario ||
                      ', par$cod_pais: ' || par$cod_pais,
                  par$cod_identificador   => '');

          IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                        'svalidar_actual_id con parametros:' ||
                        ' par$nel_index: ' || par$anel_index(idx) ||
                        ', par$fyh_gestion: ' || par$afyh_gestion(idx) ||
                        ', par$cod_actual_id: ' || par$acod_actual_id(idx) ||
                        ', par$cod_cultura: ' || par$cod_cultura,
                    par$cod_identificador   => '');

            svalidar_actual_id(par$oid_llamada             => par$oid_llamada,
              par$nel_index    => par$anel_index(idx),
              par$fyh_gestion  => par$afyh_gestion(idx),
              par$cod_actual_id=> par$acod_actual_id(idx),
              par$cod_cultura  => par$cod_cultura);

            /* CREAR MOVIMIENTO MAEREC */
            IF var$oid_formulario_maerec IS NULL AND var$oid_tipo_documento_maerec IS NULL AND var$des_cod_externo_maerec IS NULL THEN
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                    VALUES (par$anel_index(idx), '2040140004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040140004', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento,
                            gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEREC', 0), 'VALIDACIONES');
            END IF;

            /* Validar fecha gestion */
            var$fyh_gestion      := par$afyh_gestion(idx);
            svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                          par$nel_index        => par$anel_index(idx),
                          par$oid_sector_mae   => var$oid_sector_mae,
                          par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                          par$fyh_gestion      => var$fyh_gestion,
                          par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                          par$cod_cultura      => par$cod_cultura);
            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                        'svalidar_fecha de gestion con parametros:' ||
                        ' par$nel_index: ' || par$anel_index(idx) ||
                        ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                        ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                        ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                        ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                        ', par$cod_cultura: ' || par$cod_cultura,
                    par$cod_identificador   => 'MAEREC');

            /* Validar fecha contable */
            IF par$afyh_contable(idx) IS NULL THEN
                var$fyh_contable      := par$afyh_gestion(idx);                            
            ELSE
                var$fyh_contable      := par$afyh_contable(idx);                          
            END IF;

            svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                  par$nel_index        => par$anel_index(idx),
                  par$oid_sector_mae   => var$oid_sector_mae,
                  par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                  par$fyh_gestion      => var$fyh_contable,
                  par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                  par$cod_cultura      => par$cod_cultura); 

            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                  par$des_version     => const$version,                            
                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                      'svalidar_fecha contable con parametros:' ||
                      ' par$nel_index: ' || par$anel_index(idx) ||
                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                      ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                      ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                      ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                      ', par$cod_cultura: ' || par$cod_cultura,
                  par$cod_identificador   => 'MAEREC');    


            /* Validar Codigo externo */
            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                par$des_version     => const$version,                            
                par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                    'fvalidar_codigo_externo con parametros:' ||
                    ' par$nel_index: ' ||  par$anel_index(idx) ||
                    ', par$des_cod_externo: ' || var$des_cod_externo_maerec ||
                    ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                    ', par$fyh_gestion: ' || var$fyh_gestion ||
                    ', par$cod_precinto: ' || par$acod_precinto(idx) ||
                    ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                    ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                    ', par$cod_cultura: ' || par$cod_cultura,
                par$cod_identificador   => 'MAEREC');
            IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maerec, par$acod_device_id(idx), var$fyh_gestion, par$acod_precinto(idx), var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
              /* LOG de validación  */
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                  par$des_version     => const$version,                            
                  par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                      'fvalidar_codigo_externo',
                  par$cod_identificador   => 'MAEREC');
            END IF;

            var$aux_maerec_secuencia := 0;
            var$aux_maered_secuencia := 0;
            var$aux_maedif_secuencia := 0;
            var$aux_maerdi_secuencia := 0;
            var$aux_maerdd_secuencia := 0;

            IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
              IF par$adiv_nel_index IS NOT NULL AND par$adiv_nel_index.COUNT > 0 THEN
                FOR idxDiv IN par$adiv_nel_index.first .. par$adiv_nel_index.last LOOP
                  var$auxecon_oid_divisa.delete;
                  var$auxecon_oid_denominacion.delete;
                  var$auxecon_oid_unid_medida.delete;
                  var$auxecon_cod_niv_detalle.delete;
                  var$auxecon_cod_tp_efec_tot.delete;
                  var$auxecon_oid_calidad.delete;
                  var$auxecon_num_importe.delete;
                  var$auxecon_nel_cantidad.delete;
                  var$auxedec_oid_divisa.delete;
                  var$auxedec_oid_denominacion.delete;
                  var$auxedec_oid_unid_medida.delete;
                  var$auxedec_cod_niv_detalle.delete;
                  var$auxedec_cod_tp_efec_tot.delete;
                  var$auxedec_oid_calidad.delete;
                  var$auxedec_num_importe.delete;
                  var$auxedec_nel_cantidad.delete;
                  var$auxedif_oid_divisa.delete;
                  var$auxedif_oid_denominacion.delete;
                  var$auxedif_oid_unid_medida.delete;
                  var$auxedif_cod_niv_detalle.delete;
                  var$auxedif_cod_tp_efec_tot.delete;
                  var$auxedif_oid_calidad.delete;
                  var$auxedif_num_importe.delete;
                  var$auxedif_nel_cantidad.delete;
                  var$auxt_oid_termino.delete;
                  var$auxt_des_valor.delete;

                  IF par$adiv_nel_index(idxDiv) = par$anel_index(idx) THEN
                    var$oid_documento := sys_guid();
                    var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                    var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maerec;
                    var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maerec;
                    var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                    var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                    var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                    var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                    var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                    var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                    var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                    var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                    var$adocs_cod_actual_id(var$adocs_cod_actual_id.COUNT) := par$acod_actual_id(idx);
                    var$adocs_cod_collection_id(var$adocs_cod_collection_id.COUNT) := par$acod_collection_id(idx);

                    /* Formulario y Codigo Externo */
                    var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maerec,
                                                                                                par$cod_device_id       => par$acod_device_id(idx),
                                                                                                par$fyh_gestion         => var$fyh_gestion,
                                                                                                par$cod_precinto        => par$acod_precinto(idx),
                                                                                                par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                par$nel_sumar_secuencia => var$aux_maerec_secuencia);
                    /* LOG de código externo  */
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                            'fcargar_codigo_externo:' || 
                            ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                            ,
                        par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                    var$aux_maerec_secuencia := var$aux_maerec_secuencia + 1;

                    /* Campos Adcionales */
                    IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                      FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                        IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                          par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                          par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                            svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                              par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                              par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                              par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                              par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                              par$cod_usuario         => par$cod_usuario,
                                              par$cod_cultura         => par$cod_cultura);
                              /* LOG validar términos  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_terminos con parametros:' ||
                                      ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                      ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                      ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                      ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                        END IF;
                      END LOOP;
                    END IF;

                    /* Valores */
                    FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                      IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_div_index(idxt) = par$adiv_index(idxDiv) THEN

                        svalidar_valores_recuento(par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                                  par$nel_index                 => par$anel_index(idx),
                                                  par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                                  par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                                  par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                                  par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                                  par$entrada_nel_tipo          => par$aefdoc_nel_tipo(idxt),
                                                  par$saida_con_oid_divisa      => var$auxecon_oid_divisa(var$auxecon_oid_divisa.COUNT),
                                                  par$saida_con_oid_denominacio => var$auxecon_oid_denominacion(var$auxecon_oid_denominacion.COUNT),
                                                  par$saida_con_oid_unid_medida => var$auxecon_oid_unid_medida(var$auxecon_oid_unid_medida.COUNT),
                                                  par$saida_con_cod_niv_detalle => var$auxecon_cod_niv_detalle(var$auxecon_cod_niv_detalle.COUNT),
                                                  par$saida_con_cod_tp_efec_tot => var$auxecon_cod_tp_efec_tot(var$auxecon_cod_tp_efec_tot.COUNT),
                                                  par$saida_con_oid_calidad     => var$auxecon_oid_calidad(var$auxecon_oid_calidad.COUNT),
                                                  par$saida_con_num_importe     => var$auxecon_num_importe(var$auxecon_num_importe.COUNT),
                                                  par$saida_con_nel_cantidad    => var$auxecon_nel_cantidad(var$auxecon_nel_cantidad.COUNT),
                                                  par$saida_dec_oid_divisa      => var$auxedec_oid_divisa(var$auxedec_oid_divisa.COUNT),
                                                  par$saida_dec_oid_denominacio => var$auxedec_oid_denominacion(var$auxedec_oid_denominacion.COUNT),
                                                  par$saida_dec_oid_unid_medida => var$auxedec_oid_unid_medida(var$auxedec_oid_unid_medida.COUNT),
                                                  par$saida_dec_cod_niv_detalle => var$auxedec_cod_niv_detalle(var$auxedec_cod_niv_detalle.COUNT),
                                                  par$saida_dec_cod_tp_efec_tot => var$auxedec_cod_tp_efec_tot(var$auxedec_cod_tp_efec_tot.COUNT),
                                                  par$saida_dec_oid_calidad     => var$auxedec_oid_calidad(var$auxedec_oid_calidad.COUNT),
                                                  par$saida_dec_num_importe     => var$auxedec_num_importe(var$auxedec_num_importe.COUNT),
                                                  par$saida_dec_nel_cantidad    => var$auxedec_nel_cantidad(var$auxedec_nel_cantidad.COUNT),
                                                  par$saida_dif_oid_divisa      => var$auxedif_oid_divisa(var$auxedif_oid_divisa.COUNT),
                                                  par$saida_dif_oid_denominacio => var$auxedif_oid_denominacion(var$auxedif_oid_denominacion.COUNT),
                                                  par$saida_dif_oid_unid_medida => var$auxedif_oid_unid_medida(var$auxedif_oid_unid_medida.COUNT),
                                                  par$saida_dif_cod_niv_detalle => var$auxedif_cod_niv_detalle(var$auxedif_cod_niv_detalle.COUNT),
                                                  par$saida_dif_cod_tp_efec_tot => var$auxedif_cod_tp_efec_tot(var$auxedif_cod_tp_efec_tot.COUNT),
                                                  par$saida_dif_oid_calidad     => var$auxedif_oid_calidad(var$auxedif_oid_calidad.COUNT),
                                                  par$saida_dif_num_importe     => var$auxedif_num_importe(var$auxedif_num_importe.COUNT),
                                                  par$saida_dif_nel_cantidad    => var$auxedif_nel_cantidad(var$auxedif_nel_cantidad.COUNT),
                                                  par$cod_cultura               => par$cod_cultura);
                          /* LOG validar valores  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Validación de valores de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'svalidar_valores_recuento con parametros:' || const$new_line ||
                                  ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line ||
                                  ', par$nel_index: ' || par$anel_index(idx) || const$new_line ||
                                  ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) || const$new_line ||
                                  ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) || const$new_line ||
                                  ', par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) || const$new_line ||
                                  ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) || const$new_line ||
                                  ', par$entrada_nel_tipo: ' || par$aefdoc_nel_tipo(idxt) || const$new_line ||
                                  ', par$saida_con_oid_divisa: ' || var$auxecon_oid_divisa(var$auxecon_oid_divisa.COUNT - 1) || const$new_line ||
                                  ', par$saida_con_oid_denominacio: ' || var$auxecon_oid_denominacion(var$auxecon_oid_denominacion.COUNT - 1) || const$new_line ||
                                  ', par$saida_con_oid_unid_medida: ' || var$auxecon_oid_unid_medida(var$auxecon_oid_unid_medida.COUNT - 1) || const$new_line ||
                                  ', par$saida_con_cod_niv_detalle: ' || var$auxecon_cod_niv_detalle(var$auxecon_cod_niv_detalle.COUNT - 1) || const$new_line ||
                                  ', par$saida_con_cod_tp_efec_tot: ' || var$auxecon_cod_tp_efec_tot(var$auxecon_cod_tp_efec_tot.COUNT - 1) || const$new_line ||
                                  ', par$saida_con_oid_calidad: ' || var$auxecon_oid_calidad(var$auxecon_oid_calidad.COUNT - 1) || const$new_line ||
                                  ', par$saida_con_num_importe: ' || var$auxecon_num_importe(var$auxecon_num_importe.COUNT - 1) || const$new_line ||
                                  ', par$saida_con_nel_cantidad: ' || var$auxecon_nel_cantidad(var$auxecon_nel_cantidad.COUNT - 1) || const$new_line ||
                                  ', par$saida_dec_oid_divisa: ' || var$auxedec_oid_divisa(var$auxedec_oid_divisa.COUNT - 1) || const$new_line ||
                                  ', par$saida_dec_oid_denominacio: ' || var$auxedec_oid_denominacion(var$auxedec_oid_denominacion.COUNT - 1) || const$new_line ||
                                  ', par$saida_dec_oid_unid_medida: ' || var$auxedec_oid_unid_medida(var$auxedec_oid_unid_medida.COUNT - 1) || const$new_line ||
                                  ', par$saida_dec_cod_niv_detalle: ' || var$auxedec_cod_niv_detalle(var$auxedec_cod_niv_detalle.COUNT - 1) || const$new_line ||
                                  ', par$saida_dec_cod_tp_efec_tot: ' || var$auxedec_cod_tp_efec_tot(var$auxedec_cod_tp_efec_tot.COUNT - 1) || const$new_line ||
                                  ', par$saida_dec_oid_calidad: ' || var$auxedec_oid_calidad(var$auxedec_oid_calidad.COUNT - 1) || const$new_line ||
                                  ', par$saida_dec_num_importe: ' || var$auxedec_num_importe(var$auxedec_num_importe.COUNT - 1) || const$new_line ||
                                  ', par$saida_dec_nel_cantidad: ' || var$auxedec_nel_cantidad(var$auxedec_nel_cantidad.COUNT - 1) || const$new_line ||
                                  ', par$saida_dif_oid_divisa: ' || var$auxedif_oid_divisa(var$auxedif_oid_divisa.COUNT - 1) || const$new_line ||
                                  ', par$saida_dif_oid_denominacio: ' || var$auxedif_oid_denominacion(var$auxedif_oid_denominacion.COUNT - 1) || const$new_line ||
                                  ', par$saida_dif_oid_unid_medida: ' || var$auxedif_oid_unid_medida(var$auxedif_oid_unid_medida.COUNT - 1) || const$new_line ||
                                  ', par$saida_dif_cod_niv_detalle: ' || var$auxedif_cod_niv_detalle(var$auxedif_cod_niv_detalle.COUNT - 1) || const$new_line ||
                                  ', par$saida_dif_cod_tp_efec_tot: ' || var$auxedif_cod_tp_efec_tot(var$auxedif_cod_tp_efec_tot.COUNT - 1) || const$new_line ||
                                  ', par$saida_dif_oid_calidad: ' || var$auxedif_oid_calidad(var$auxedif_oid_calidad.COUNT - 1) || const$new_line ||
                                  ', par$saida_dif_num_importe: ' || var$auxedif_num_importe(var$auxedif_num_importe.COUNT - 1) || const$new_line ||
                                  ', par$saida_dif_nel_cantidad: ' || var$auxedif_nel_cantidad(var$auxedif_nel_cantidad.COUNT - 1) || const$new_line ||
                                  ', par$cod_cultura: ' || par$cod_cultura
                                  ,
                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                      END IF;

                    END LOOP;

                    IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                      /* LOG de validación  */
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                              'svalidar_terminos y svalidar_valores_recuento',
                          par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                      /* Campos Adcionales */
                      IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                        FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                          var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                          var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                          var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                        END LOOP;
                      END IF;

                      /* Valores */
                      IF var$auxecon_oid_divisa IS NOT NULL AND var$auxecon_oid_divisa.COUNT > 0 THEN
                        FOR idxt IN var$auxecon_oid_divisa.first .. var$auxecon_oid_divisa.last LOOP

                          var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                          var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxecon_oid_divisa(idxt);
                          var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxecon_oid_denominacion(idxt);
                          var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxecon_oid_unid_medida(idxt);
                          var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxecon_cod_niv_detalle(idxt);
                          var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxecon_cod_tp_efec_tot(idxt);
                          var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxecon_oid_calidad(idxt);
                          var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxecon_num_importe(idxt);
                          var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxecon_nel_cantidad(idxt);

                        END LOOP;
                      END IF;
                      /* FIN - CREAR MOVIMIENTO MAEREC */

                      /* IF MAQUINA ESTA EN UNA PLANIFICACION QUE CONTRALA FATURACION? */
                      IF var$bol_controla_faturacion = 1 THEN
                        /* Validar formularios faturacion*/
                        IF var$oid_formulario_maered IS NULL AND var$oid_tipo_documento_maered IS NULL AND var$des_cod_externo_maered IS NULL THEN
                          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                                VALUES (par$anel_index(idx), '2040120004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento,
                                        gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAERED', 0), 'VALIDACIONES');
                        END IF;

                        IF var$oid_formulario_maedif IS NULL AND var$oid_tipo_documento_maedif IS NULL AND var$des_cod_externo_maedif IS NULL THEN
                          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                                VALUES (par$anel_index(idx), '2040120004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento,
                                        gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEDIF', 0), 'VALIDACIONES');
                        END IF;

                        IF  NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                          /* CREAR MOVIMIENTO MAERED */
                          IF var$auxedec_oid_divisa IS NOT NULL and var$auxedec_oid_divisa.count > 0 THEN
                            /*Validamos que existan valores que no sean nulos en el array asociativo*/
                            var$tauxedec_oid_divisa := gepr_putilidades_###VERSION###.fconverter_array_table(par$table_varchar2 => var$auxedec_oid_divisa);
                            BEGIN
                              SELECT COUNT(1) INTO var$hay_valores 
                              FROM TABLE(var$tauxedec_oid_divisa) 
                              WHERE COLUMN_VALUE IS NOT NULL;
                            EXCEPTION
                              WHEN others THEN
                                var$hay_valores := 0;
                            END;
                            
                            IF var$hay_valores > 0 THEN
                              /* LOG de Creacion de documento  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Creación de documento MAERED',
                                  par$cod_identificador   => 'MAERED');

                              var$oid_documento := sys_guid();
                              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maered;
                              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maered;
                              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_comision;
                              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_comision;
                              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_boveda;
                              var$adocs_cod_actual_id(var$adocs_cod_actual_id.COUNT) := par$acod_actual_id(idx);
                              var$adocs_cod_collection_id(var$adocs_cod_collection_id.COUNT) := par$acod_collection_id(idx);

                              /* Formulario y Codigo Externo */
                              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maered,
                                                                                                          par$cod_device_id       => par$acod_device_id(idx),
                                                                                                          par$fyh_gestion         => var$fyh_gestion,
                                                                                                          par$cod_precinto        => par$acod_precinto(idx),
                                                                                                          par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                          par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                          par$nel_sumar_secuencia => var$aux_maered_secuencia);

                              /* LOG de código externo  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'fcargar_codigo_externo:' || 
                                      ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                              var$aux_maered_secuencia := var$aux_maered_secuencia + 1;

                              /* Campos Adcionales */
                              IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.count > 0 THEN
                                FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                  var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                  var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                  var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                END LOOP;
                              END IF;

                              /* Valores */
                              FOR idxt IN var$auxedec_oid_divisa.first .. var$auxedec_oid_divisa.last LOOP
                                var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxedec_oid_divisa(idxt);
                                var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxedec_oid_denominacion(idxt);
                                var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxedec_oid_unid_medida(idxt);
                                var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxedec_cod_niv_detalle(idxt);
                                var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxedec_cod_tp_efec_tot(idxt);
                                var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxedec_oid_calidad(idxt);
                                var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxedec_num_importe(idxt);
                                var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxedec_nel_cantidad(idxt);
                              END LOOP;
                            END IF;
                          END IF;
                          /* FIN - CREAR MOVIMIENTO MAERED */

                          /* CREAR MOVIMIENTO MAEREC */
                          IF var$auxecon_oid_divisa IS NOT NULL and var$auxecon_oid_divisa.count > 0 THEN
                            /*Validamos que existan valores que no sean nulos en el array asociativo*/
                            var$tauxecon_oid_divisa := gepr_putilidades_###VERSION###.fconverter_array_table(par$table_varchar2 => var$auxecon_oid_divisa);
                            BEGIN
                              SELECT COUNT(1) INTO var$hay_valores 
                              FROM TABLE(var$tauxecon_oid_divisa) 
                              WHERE COLUMN_VALUE IS NOT NULL;
                            EXCEPTION
                              WHEN others THEN
                                var$hay_valores := 0;
                            END;
                            
                            IF var$hay_valores > 0 THEN

                              /* LOG de Creacion de documento  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Creación de documento MAEREC',
                                  par$cod_identificador   => 'MAEREC');

                              var$oid_documento := sys_guid();
                              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maerec;
                              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maerec;
                              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_comision;
                              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_tesoreria;
                              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_boveda;
                              var$adocs_cod_actual_id(var$adocs_cod_actual_id.COUNT) := par$acod_actual_id(idx);
                              var$adocs_cod_collection_id(var$adocs_cod_collection_id.COUNT) := par$acod_collection_id(idx);

                              /* Formulario y Codigo Externo */
                              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maerec,
                                                                                                          par$cod_device_id       => par$acod_device_id(idx),
                                                                                                          par$fyh_gestion         => var$fyh_gestion,
                                                                                                          par$cod_precinto        => par$acod_precinto(idx),
                                                                                                          par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                          par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                          par$nel_sumar_secuencia => var$aux_maerec_secuencia);

                              /* LOG de código externo  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'fcargar_codigo_externo:' || 
                                      ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                              var$aux_maerec_secuencia := var$aux_maerec_secuencia + 1;
                              
                              /* Campos Adcionales */
                              IF var$auxt_oid_termino IS NOT NULL and var$auxt_oid_termino.count > 0 THEN
                                FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                  var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                  var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                  var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                END LOOP;
                              END IF;

                              /* Valores */
                              FOR idxt IN var$auxecon_oid_divisa.first .. var$auxecon_oid_divisa.last LOOP

                                var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxecon_oid_divisa(idxt);
                                var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxecon_oid_denominacion(idxt);
                                var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxecon_oid_unid_medida(idxt);
                                var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxecon_cod_niv_detalle(idxt);
                                var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxecon_cod_tp_efec_tot(idxt);
                                var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxecon_oid_calidad(idxt);
                                var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxecon_num_importe(idxt);
                                var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxecon_nel_cantidad(idxt);

                              END LOOP;
                            END IF;
                          END IF;
                          /* FIN - CREAR MOVIMIENTO MAEREC */

                          /* CREAR MOVIMIENTO MAEDIF */
                          IF var$auxedif_oid_divisa IS NOT NULL AND var$auxedif_oid_divisa.count > 0 THEN
                            /*Validamos que existan valores que no sean nulos en el array asociativo*/
                            var$tauxedif_oid_divisa := gepr_putilidades_###VERSION###.fconverter_array_table(par$table_varchar2 => var$auxedif_oid_divisa);
                            BEGIN
                              SELECT COUNT(1) INTO var$hay_valores 
                              FROM TABLE(var$tauxedif_oid_divisa) 
                              WHERE COLUMN_VALUE IS NOT NULL;
                            EXCEPTION
                              WHEN others THEN
                                var$hay_valores := 0;
                            END;

                            IF var$hay_valores > 0 THEN
                              /* LOG de Creacion de documento  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Creación de documento MAEDIF',
                                  par$cod_identificador   => 'MAEDIF');

                              var$oid_documento := sys_guid();
                              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maedif;
                              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maedif;
                              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_tesoreria;
                              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_tesoreria;
                              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_boveda;
                              var$adocs_cod_actual_id(var$adocs_cod_actual_id.COUNT) := par$acod_actual_id(idx);
                              var$adocs_cod_collection_id(var$adocs_cod_collection_id.COUNT) := par$acod_collection_id(idx);

                              /* Formulario y Codigo Externo */
                              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maedif,
                                                                                                          par$cod_device_id       => par$acod_device_id(idx),
                                                                                                          par$fyh_gestion         => var$fyh_gestion,
                                                                                                          par$cod_precinto        => par$acod_precinto(idx),
                                                                                                          par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                          par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                          par$nel_sumar_secuencia => var$aux_maedif_secuencia);

                              /* LOG de código externo  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'fcargar_codigo_externo:' || 
                                      ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                              var$aux_maedif_secuencia := var$aux_maedif_secuencia + 1;

                              /* Campos Adcionales */
                              IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.count > 0 THEN
                                FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                  var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                  var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                  var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                END LOOP;
                              END IF;

                              /* Valores */
                              FOR idxt IN var$auxedif_oid_divisa.first .. var$auxedif_oid_divisa.last LOOP

                                var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxedif_oid_divisa(idxt);
                                var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxedif_oid_denominacion(idxt);
                                var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxedif_oid_unid_medida(idxt);
                                var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxedif_cod_niv_detalle(idxt);
                                var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxedif_cod_tp_efec_tot(idxt);
                                var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxedif_oid_calidad(idxt);
                                var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxedif_num_importe(idxt);
                                var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxedif_nel_cantidad(idxt);

                              END LOOP;
                            END IF;
                          END IF;
                          /* FIN - CREAR MOVIMIENTO MAEDIF */
                        END IF;
                      END IF;
                      /* CREAR MOVIMIENTO MAERDI */
                      IF var$oid_formulario_maerdi IS NULL AND var$oid_tipo_documento_maerdi IS NULL AND var$des_cod_externo_maerdi IS NULL THEN
                        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                            VALUES (par$anel_index(idx), '2040120004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento,
                                    gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAERDI', 0), 'VALIDACIONES');
                      END IF;

                      IF  NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                        IF var$auxedif_oid_divisa IS NOT NULL AND var$auxedif_oid_divisa.count > 0 THEN
                          /*Validamos que existan valores que no sean nulos en el array asociativo*/
                          var$tauxedif_oid_divisa := gepr_putilidades_###VERSION###.fconverter_array_table(par$table_varchar2 => var$auxedif_oid_divisa);
                          BEGIN
                            SELECT COUNT(1) INTO var$hay_valores 
                            FROM TABLE(var$tauxedif_oid_divisa) 
                            WHERE COLUMN_VALUE IS NOT NULL;
                          EXCEPTION
                            WHEN others THEN
                              var$hay_valores := 0;
                          END;

                          IF var$hay_valores > 0 THEN
                            /* LOG de Creacion de documento  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Creación de documento MAERDI',
                                par$cod_identificador   => 'MAERDI');

                            var$oid_documento := sys_guid();
                            var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                            var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maerdi;
                            var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maerdi;
                            var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                            var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                            var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                            var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                            var$adocs_cod_actual_id(var$adocs_cod_actual_id.COUNT) := par$acod_actual_id(idx);
                            var$adocs_cod_collection_id(var$adocs_cod_collection_id.COUNT) := par$acod_collection_id(idx);

                            /* Formulario y Codigo Externo */
                            var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maerdi,
                                                                                                          par$cod_device_id       => par$acod_device_id(idx),
                                                                                                          par$fyh_gestion         => var$fyh_gestion,
                                                                                                          par$cod_precinto        => par$acod_precinto(idx),
                                                                                                          par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                          par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                          par$nel_sumar_secuencia => var$aux_maerdi_secuencia);

                            /* LOG de código externo  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'fcargar_codigo_externo:' || 
                                    ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                    ,
                                par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                            var$aux_maerdi_secuencia := var$aux_maerdi_secuencia + 1;

                            /* Campos Adcionales */
                            IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.count > 0 THEN
                              FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                              END LOOP;
                            END IF;

                            /* Valores */
                            IF var$auxedif_oid_divisa IS NOT NULL AND var$auxedif_oid_divisa.count > 0 THEN
                              FOR idxt IN var$auxedif_oid_divisa.first .. var$auxedif_oid_divisa.last LOOP
                                var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxedif_oid_divisa(idxt);
                                var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxedif_oid_denominacion(idxt);
                                var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxedif_oid_unid_medida(idxt);
                                var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxedif_cod_niv_detalle(idxt);
                                var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxedif_cod_tp_efec_tot(idxt);
                                var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxedif_oid_calidad(idxt);
                                var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxedif_num_importe(idxt);
                                var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxedif_nel_cantidad(idxt);
                              END LOOP;
                            END IF;
                          END IF;
                        END IF;
                      END IF;
                      /* FIN - CREAR MOVIMIENTO MAERDI */

                      /* CREAR MOVIMIENTO MAERDD */
                      IF var$oid_formulario_maerdd IS NULL AND var$oid_tipo_documento_maerdd IS NULL AND var$des_cod_externo_maerdd IS NULL THEN
                            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                                VALUES (par$anel_index(idx), '2040120004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento,
                                        gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAERDD', 0), 'VALIDACIONES');
                      END IF;

                      IF  NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                        IF var$auxedec_oid_divisa IS NOT NULL and var$auxedec_oid_divisa.count > 0 THEN
                          /*Validamos que existan valores que no sean nulos en el array asociativo*/
                          var$tauxedec_oid_divisa := gepr_putilidades_###VERSION###.fconverter_array_table(par$table_varchar2 => var$auxedec_oid_divisa);
                          BEGIN
                            SELECT COUNT(1) INTO var$hay_valores 
                            FROM TABLE(var$tauxedec_oid_divisa) 
                            WHERE COLUMN_VALUE IS NOT NULL;
                          EXCEPTION
                            WHEN others THEN
                              var$hay_valores := 0;
                          END;

                          IF var$hay_valores > 0 THEN
                            /* LOG de Creacion de documento  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Creación de documento MAERDD',
                                par$cod_identificador   => 'MAERDD');

                            var$oid_documento := sys_guid();
                            var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                            var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maerdd;
                            var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maerdd;
                            var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                            var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                            var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                            var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                            var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                            var$adocs_cod_actual_id(var$adocs_cod_actual_id.COUNT) := par$acod_actual_id(idx);
                            var$adocs_cod_collection_id(var$adocs_cod_collection_id.COUNT) := par$acod_collection_id(idx);

                            /* Formulario y Codigo Externo */
                            var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maerdd,
                                                                                                          par$cod_device_id       => par$acod_device_id(idx),
                                                                                                          par$fyh_gestion         => var$fyh_gestion,
                                                                                                          par$cod_precinto        => par$acod_precinto(idx),
                                                                                                          par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                          par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                          par$nel_sumar_secuencia => var$aux_maerdd_secuencia);

                            /* LOG de código externo  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'fcargar_codigo_externo:' || 
                                    ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                    ,
                                par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                            var$aux_maerdd_secuencia := var$aux_maerdd_secuencia + 1;

                            /* Campos Adcionales */
                            IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.count > 0 THEN
                              FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                              END LOOP;
                            END IF;

                            /* Valores */
                            IF var$auxedec_oid_divisa IS NOT NULL AND var$auxedec_oid_divisa.count > 0 THEN
                              FOR idxt IN var$auxedec_oid_divisa.first .. var$auxedec_oid_divisa.last LOOP

                                var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxedec_oid_divisa(idxt);
                                var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxedec_oid_denominacion(idxt);
                                var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxedec_oid_unid_medida(idxt);
                                var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxedec_cod_niv_detalle(idxt);
                                var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxedec_cod_tp_efec_tot(idxt);
                                var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxedec_oid_calidad(idxt);
                                var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxedec_num_importe(idxt);
                                var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxedec_nel_cantidad(idxt);

                              END LOOP;
                            END IF;
                          END IF;
                        END IF;
                      END IF;
                      /* FIN - CREAR MOVIMIENTO MAERDD */
                    END IF;
                  END IF;
                END LOOP;

                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  /* INICIO - LOG de sguardar_documento*/
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                      par$cod_identificador   => '');


                  /* Grabar documentos */
                  sguardar_documento(par$oid_llamada             => par$oid_llamada,
                                      par$adocs_oid                 => var$adocs_oid,
                                      par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                      par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                      par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                      par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                      par$adocs_cod_actual_id       => var$adocs_cod_actual_id,
                                      par$adocs_cod_collection_id   => var$adocs_cod_collection_id,
                                      par$adocs_cod_externo         => var$adocs_cod_externo,
                                      par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                      par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                      par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                      par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                      par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                      par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                      par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                      par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                      par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                      par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                      par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                      par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                      par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                      par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                      par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                      par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                      par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                      par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                      par$cod_usuario               => par$cod_usuario,
                                      par$cod_cultura               => par$cod_cultura,
                                      par$cod_ejecucion             => par$cod_ejecucion,
                                      par$nel_index                 => par$anel_index(idx));
                  /* FIN - LOG - parametros sguardar_documento*/
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                      par$cod_identificador   => '');
                  COMMIT;

                  INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                      VALUES (par$anel_index(idx), '0040140000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040140000', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento,
                              gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

                END IF;
              END IF;
            END IF;
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            var$err := gepr_putilidades_###VERSION###.fformat_error;
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                  VALUES (par$anel_index(idx), '3040140001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040140001', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 'VALIDACIONES');
            /* LOG ROLLBACK  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Se realiza ROLLBACK',
                                    par$cod_identificador   => '');
        END;

      END LOOP;

      /* Validaciones */
      OPEN par$rc_validaciones FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'VALIDACIONES';

      /* Documentos */
      OPEN par$rc_documentos FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

      /* Planificacion */
      OPEN par$rc_planificaciones FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                            var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                            null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
      COMMIT;

      /* ===  Tratar excepciones - Rollback === */
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      var$err := gepr_putilidades_###VERSION###.fformat_error;

      var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                    var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                    null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
      
      /* LOG ROLLBACK  */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se realiza ROLLBACK',
                              par$cod_identificador   => '');
  END sgrabar_mov_recuento;

  /* Validar Movimientos Recuento */
  PROCEDURE svalidar_mov_recuento(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                    par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_cuenta_comision     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_cuenta_tesoreria    OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$bol_controla_faturacion OUT gepr_pcomon_###VERSION###.tipo$nbol_,
                                    par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                    par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS


    var$cod_banco_capital    gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_banco_comision   gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_banco_tesoreria  gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_cuenta_tesoreria gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_planificacion    gepr_pcomon_###VERSION###.tipo$cod_;
    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldoFisico,
                    par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalSaldoFisico,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);

    IF NOT fhay_error(par$nel_index => par$nel_index) THEN

      /* Recuperar Banco Capital y Banco Comision */
      BEGIN

            SELECT CLIC.COD_CLIENTE, PLAN.BOL_CONTROLA_FACTURACION, CLIM.COD_CLIENTE, PLAN.COD_PLANIFICACION
              INTO var$cod_banco_capital, par$bol_controla_faturacion, var$cod_banco_comision, var$cod_planificacion
              FROM SAPR_TMAQUINA MAQU
        INNER JOIN SAPR_TPLANXMAQUINA PLMA ON PLMA.OID_MAQUINA = MAQU.OID_MAQUINA AND PLMA.BOL_ACTIVO = 1
        INNER JOIN SAPR_TPLANIFICACION PLAN ON PLAN.OID_PLANIFICACION = PLMA.OID_PLANIFICACION AND PLAN.BOL_ACTIVO = 1
        INNER JOIN GEPR_TCLIENTE CLIC ON CLIC.OID_CLIENTE = PLAN.OID_CLIENTE AND PLMA.BOL_ACTIVO = 1
        INNER JOIN GEPR_TCLIENTE CLIM ON CLIM.OID_CLIENTE = PLAN.OID_CLIENTE_COMISION AND CLIM.BOL_VIGENTE = 1
             WHERE MAQU.OID_SECTOR = par$oid_sector_mae
               AND MAQU.COD_IDENTIFICACION = par$cod_device_id
               AND MAQU.BOL_ACTIVO = 1;

      EXCEPTION WHEN no_data_found THEN
        var$cod_banco_capital := NULL;
        var$cod_banco_comision := NULL;
        par$bol_controla_faturacion := 0;
        var$cod_planificacion := NULL;
      END;

      IF par$bol_controla_faturacion = 1 THEN

        /* 2040140008 - Error al identificar el Banco Capital configurado en la planificacion [{0}]. */
        IF var$cod_banco_capital IS NULL THEN
          dbms_output.put_line('Error al identificar el Banco Capital configurado en la planificacion [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040140008', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040140008', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_planificacion, 0), 'VALIDACIONES');

        END IF;

        /* 2040140009 - Error al identificar el Banco Comision configurado en la planificacion [{0}]. */
        IF var$cod_banco_comision IS NULL THEN
          dbms_output.put_line('Error al identificar el Banco Comision configurado en la planificacion [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040140009', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040140009', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_planificacion, 0), 'VALIDACIONES');

        END IF;

        /* 2040140005 - No existe una Delegación Central con el código [{0}] configurada en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TDELEGACION
               WHERE COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe una Delegación Central con el código [{0}] configurada en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040140005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040140005', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodDelegacionCentral, 0), 'VALIDACIONES');

        END;

        /* 2040140006 - No existe una Planta Central con el código [{0}] configurada en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TPLANTA PLAN
          INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLAN.OID_DELEGACION
               WHERE PLAN.COD_PLANTA = gepr_pcomon_###VERSION###.const$CodPlantaCentral
                 AND PLAN.BOL_ACTIVO = 1
                 AND DELE.COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND DELE.BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe una Planta Central con el código [{0}] configurada en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040140006', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040140006', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodPlantaCentral, 0), 'VALIDACIONES');

        END;

        /* 2040140007 - No existe un Sector Boveda con el código [{0}] configurado en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TSECTOR SECT
          INNER JOIN GEPR_TPLANTA PLAN ON PLAN.OID_PLANTA = SECT.OID_PLANTA
          INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLAN.OID_DELEGACION
               WHERE SECT.COD_SECTOR = gepr_pcomon_###VERSION###.const$CodSectorBoveda
                 AND SECT.BOL_ACTIVO = 1
                 AND PLAN.COD_PLANTA = gepr_pcomon_###VERSION###.const$CodPlantaCentral
                 AND PLAN.BOL_ACTIVO = 1
                 AND DELE.COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND DELE.BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;

          dbms_output.put_line('No existe un Sector Boveda con el código [{0}] configurado en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040140007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040140007', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodSectorBoveda, 0), 'VALIDACIONES');

        END;

        /* Recuperar Banco Tesoreria Y Cuenta Tesoreria */
        BEGIN

              SELECT
                NVL(SCMA.COD_SUBCLIENTE, SCDE.COD_SUBCLIENTE) COD_SUBCLIENTE,
                NVL(PSMA.COD_PTO_SERVICIO, PSDE.COD_PTO_SERVICIO) COD_PTO_SERVICIO
              INTO var$cod_banco_tesoreria, var$cod_cuenta_tesoreria
              FROM
                SAPR_TMAQUINA MAQU
                INNER JOIN SAPR_TPLANXMAQUINA PLMA ON MAQU.OID_MAQUINA = PLMA.OID_MAQUINA AND PLMA.BOL_ACTIVO = '1'
                INNER JOIN SAPR_TPLANIFICACION PLAN ON PLMA.OID_PLANIFICACION = PLAN.OID_PLANIFICACION AND PLAN.BOL_ACTIVO = 1
                INNER JOIN GEPR_TSECTOR SECT ON MAQU.OID_SECTOR = SECT.OID_SECTOR
                INNER JOIN GEPR_TPLANTA PLAA ON SECT.OID_PLANTA = PLAA.OID_PLANTA
                LEFT JOIN GEPR_TSUBCLIENTE SCMA ON PLMA.OID_SUBCLIENTE_TESORERIA = SCMA.OID_SUBCLIENTE
                LEFT JOIN GEPR_TPUNTO_SERVICIO PSMA ON PLMA.OID_PTO_SERVICIO_TESORERIA = PSMA.OID_PTO_SERVICIO
                LEFT JOIN GEPR_TDELEGACIONXCONFIG_FACTUR DECF ON PLAA.OID_DELEGACION = DECF.OID_DELEGACION AND PLAN.OID_CLIENTE = DECF.OID_CLIENTE_CAPITAL
                LEFT JOIN GEPR_TSUBCLIENTE SCDE ON DECF.OID_SUBCLIENTE_TESORERIA = SCDE.OID_SUBCLIENTE
                LEFT JOIN GEPR_TPUNTO_SERVICIO PSDE ON DECF.OID_PTO_SERVICIO_TESORERIA = PSDE.OID_PTO_SERVICIO
              WHERE MAQU.OID_SECTOR = par$oid_sector_mae
                 AND MAQU.COD_IDENTIFICACION = par$cod_device_id;

        EXCEPTION WHEN no_data_found THEN
          var$cod_banco_tesoreria := NULL;
          var$cod_cuenta_tesoreria := NULL;
        END;

        /* Validar Banco Tesoreria */
        IF var$cod_banco_tesoreria IS NULL THEN
          dbms_output.put_line('Error al identificar la Banco Tesoreria configurado para la maquina [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040140010', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040140010', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_device_id, 0), 'VALIDACIONES');

        END IF;

        /* Validar Cuenta Tesoreria */
        IF var$cod_cuenta_tesoreria IS NULL THEN
          dbms_output.put_line('Error al identificar la Cuenta Tesoreria configurado para la maquina [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040140011', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040140011', gepr_pcomon_###VERSION###.const$CodFunMoviRecuento, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_device_id, 0), 'VALIDACIONES');

        END IF;

        IF NOT fhay_error(par$nel_index => par$nel_index) THEN

          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, var$cod_banco_capital, var$cod_planificacion, 'PLANIFICACIONES');

          /* Validar Cuenta Comision */
          svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                        par$cod_identificador_ajeno => NULL,
                        par$nel_index               => par$nel_index,
                        par$cod_cliente             => var$cod_banco_comision,
                        par$cod_sub_cliente         => NULL,
                        par$cod_punto_servicio      => NULL,
                        par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldo,
                        par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalAcreditacion,
                        par$cod_device_id           => gepr_pcomon_###VERSION###.const$CodSectorBoveda,
                        par$cod_cultura             => par$cod_cultura,
                        par$cod_usuario             => par$cod_usuario,
                        par$bol_esmaquina           => 0,
                        par$bol_validar_punto       => 0,
                        par$cod_pais                => par$cod_pais,
                        par$oid_cuenta              => par$oid_cuenta_comision,
                        par$oid_sector              => par$oid_sector_boveda);

          /* Validar Cuenta Tesoreria */
          svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                        par$cod_identificador_ajeno => NULL,
                        par$nel_index               => par$nel_index,
                        par$cod_cliente             => var$cod_banco_capital,
                        par$cod_sub_cliente         => var$cod_banco_tesoreria,
                        par$cod_punto_servicio      => var$cod_cuenta_tesoreria,
                        par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldo,
                        par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalTesoreria,
                        par$cod_device_id           => gepr_pcomon_###VERSION###.const$CodSectorBoveda,
                        par$cod_cultura             => par$cod_cultura,
                        par$cod_usuario             => par$cod_usuario,
                        par$bol_esmaquina           => 0,
                        par$bol_validar_punto       => 1,
                        par$cod_pais                => par$cod_pais,
                        par$oid_cuenta              => par$oid_cuenta_tesoreria,
                        par$oid_sector              => par$oid_sector_boveda);

        END IF;
      END IF;

    END IF;

  END svalidar_mov_recuento;

  

 /* Grabar Movimientos de Cierre Facturacion */
  PROCEDURE sgrabar_mov_cierre_fact(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,                                     
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$adiv_nel_index          IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$adiv_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_div_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_cierre_fact';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);

      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$bol_controla_faturacion   gepr_pcomon_###VERSION###.tipo$nbol_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;

      /* Formularios */
      var$oid_formulario_maecie     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maecie gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maecie    gepr_pcomon_###VERSION###.tipo$cod_;

      /* Cuentas */
      var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_cuenta_comision       gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_boveda         gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable        gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
      var$adocs_cod_actual_id       gepr_pcomon_###VERSION###.tipo$descs_;
      var$adocs_cod_collection_id   gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$auxe_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxe_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxe_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxe_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxe_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxe_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxe_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxe_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;
      var$auxt_oid_termino       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor         gepr_pcomon_###VERSION###.tipo$descs_;
      var$array_nulo             gepr_pcomon_###VERSION###.tipo$descs_;

      var$aux_secuencia          gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

      /* INICIO - LOG de parametros iniciales*/
      IF par$oid_llamada IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' ||
                                              ' par$oid_llamada: ' || par$oid_llamada ||
                                              ', par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                              ', par$info_ejecucion: ' || par$info_ejecucion ||
                                              ', par$cod_usuario: ' || par$cod_usuario ||
                                              ', par$cod_cultura: ' || par$cod_cultura ||
                                              ', par$cod_pais: ' || par$cod_pais,
                              par$cod_identificador   => '');

          /* INICIO LOG de arrays asociativos */
          FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_index(' || idx || '):  ' || par$anel_index(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$acod_collection_id.first ..  par$acod_collection_id.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_collection_id(' || idx || '):  ' || par$acod_collection_id(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx),
                              par$cod_identificador   => '');
          END LOOP;
           FOR idx IN  par$adiv_nel_index.first ..  par$adiv_nel_index.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$adiv_nel_index(' || idx || '):  ' || par$adiv_nel_index(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$adiv_index.first ..  par$adiv_index.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$adiv_index(' || idx || '):  ' || par$adiv_index(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$aefdoc_div_index.first ..  par$aefdoc_div_index.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_div_index(' || idx || '):  ' || par$aefdoc_div_index(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx),
                              par$cod_identificador   => '');
          END LOOP;
          FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx),
                              par$cod_identificador   => '');
          END LOOP;
          /* FIN LOG de arrays asociativos */
      END IF;
      /* FIN - LOG de parametros iniciales*/

      /* #### Inicializar los cursores #### */
      OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
      OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
      OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

      /* Limpiar tabla temporaria */
      DELETE SAPR_GTT_TAUXILIAR;
      COMMIT;

      /* Recuperar Formularios - MAECIE */
      srecuperar_formularios(par$cod_formulario     => 'MAECIE',
                             par$oid_formulario     => var$oid_formulario_maecie,
                             par$oid_tipo_documento => var$oid_tipo_documento_maecie,
                             par$des_cod_externo    => var$des_cod_externo_maecie);
      /* LOG recuperación de formulario  */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAECIE - ' ||  
                                    'var$oid_formulario_maecie: ' || var$oid_formulario_maecie ||
                                    ', var$oid_tipo_documento_maecie: ' || var$oid_tipo_documento_maecie ||
                                    ', var$des_cod_externo_maecie: ' || var$des_cod_externo_maecie,
                                par$cod_identificador   => '');

      FOR idx IN par$anel_index.first .. par$anel_index.last LOOP

          BEGIN

            /* Limpiar tabla temporaria */
            DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
            var$adocs_oid.delete;
            var$adocs_oid_formulario.delete;
            var$adocs_fyh_gestion.delete;
            var$adocs_fyh_contable.delete;
            var$adocs_cod_externo.delete;
            var$adocs_oid_cuenta_ori.delete;
            var$adocs_oid_cuenta_des.delete;
            var$adocs_oid_cuentasaldo_ori.delete;
            var$adocs_oid_cuentasaldo_des.delete;
            var$adocs_oid_sector_ori.delete;
            var$adocs_oid_sector_des.delete;  

            var$adocs_cod_actual_id.delete;
            var$adocs_cod_collection_id.delete;

            var$aefdoc_oid_documento.delete;
            var$aefdoc_oid_divisa.delete;
            var$aefdoc_oid_denominacion.delete;
            var$aefdoc_oid_unid_medida.delete;
            var$aefdoc_cod_niv_detalle.delete;
            var$aefdoc_cod_tp_efec_tot.delete;
            var$aefdoc_oid_calidad.delete;
            var$aefdoc_num_importe.delete;
            var$aefdoc_nel_cantidad.delete;
            var$avtdoc_oid_documento.delete;
            var$avtdoc_oid_termino.delete;
            var$avtdoc_des_valor.delete;

            /* Procedure responsable por validaciones del documento */
            svalidar_mov_cierre_fact(par$oid_llamada             => par$oid_llamada,     
                                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                    par$nel_index               => par$anel_index(idx),
                                    par$cod_device_id           => par$acod_device_id(idx),
                                    par$cod_cliente             => par$acod_cliente(idx),
                                    par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                    par$cod_punto_servicio      => par$acod_punto_servicio(idx),
                                    par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                    par$oid_cuenta_comision     => var$oid_cuenta_comision,
                                    par$oid_sector_mae          => var$oid_sector_mae,
                                    par$oid_sector_boveda       => var$oid_sector_boveda,
                                    par$bol_controla_faturacion => var$bol_controla_faturacion,
                                    par$cod_cultura             => par$cod_cultura,
                                    par$cod_usuario             => par$cod_usuario,
                                    par$cod_pais                => par$cod_pais);
            
            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                        'svalidar_mov_cierre_fact con parametros:' ||
                        ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                        ', par$nel_index: ' || par$anel_index(idx) ||
                        ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                        ', par$cod_cliente: ' || par$acod_cliente(idx) ||
                        ', par$cod_sub_cliente: ' || par$acod_sub_cliente(idx) ||
                        ', par$cod_punto_servicio: ' || par$acod_punto_servicio(idx) ||
                        ', par$oid_cuenta_cliente: ' || var$oid_cuenta_cliente ||
                        ', par$oid_cuenta_comision: ' || var$oid_cuenta_comision ||
                        ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                        ', par$oid_sector_boveda: ' || var$oid_sector_boveda ||
                        ', par$bol_controla_faturacion: ' || var$bol_controla_faturacion ||
                        ', par$cod_cultura: ' || par$cod_cultura ||
                        ', par$cod_usuario: ' ||par$cod_usuario ||
                        ', par$cod_pais: ' || par$cod_pais,
                    par$cod_identificador   => '');

            IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
              /* LOG de validación  */
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                      par$des_version     => const$version,                            
                      par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                          'svalidar_actual_id con parametros:' ||
                          ' par$nel_index: ' || par$anel_index(idx) ||
                          ', par$fyh_gestion: ' || TO_CHAR(par$afyh_gestion(idx), 'DD-MM-YYYY HH24:MI:SS') ||
                          ', par$cod_actual_id: ' || par$acod_actual_id(idx) ||
                          ', par$cod_cultura: ' || par$cod_cultura,
                      par$cod_identificador   => '');

              svalidar_actual_id(par$oid_llamada             => par$oid_llamada,
                par$nel_index         => par$anel_index(idx),
                par$fyh_gestion       => par$afyh_gestion(idx),
                par$cod_actual_id     => par$acod_actual_id(idx),
                par$cod_cultura       => par$cod_cultura
              );

              /* CREAR MOVIMIENTO MAECIE */
              IF var$oid_formulario_maecie IS NULL AND var$oid_tipo_documento_maecie IS NULL AND var$des_cod_externo_maecie IS NULL THEN
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                      VALUES (par$anel_index(idx), '2040150004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040150004', gepr_pcomon_###VERSION###.const$CodFunMoviCierreFact,
                              gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAECIE', 0), 'VALIDACIONES');
              END IF;

              /* Validar fecha gestion */
              var$fyh_gestion      := par$afyh_gestion(idx);
              svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                            par$nel_index        => par$anel_index(idx),
                            par$oid_sector_mae   => var$oid_sector_mae,
                            par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                            par$fyh_gestion      => var$fyh_gestion,
                            par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                            par$cod_cultura      => par$cod_cultura);
              
              /* LOG de validación  */
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                      par$des_version     => const$version,                            
                      par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                          'svalidar_fecha de gestion con parametros:' ||
                          ' par$nel_index: ' || par$anel_index(idx) ||
                          ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                          ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                          ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                          ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                          ', par$cod_cultura: ' || par$cod_cultura,
                      par$cod_identificador   => 'MAECIE');


              /* Validar fecha contable */
              IF par$afyh_contable(idx) IS NULL THEN
                  var$fyh_contable      := par$afyh_gestion(idx);                            
              ELSE
                  var$fyh_contable      := par$afyh_contable(idx);                          
              END IF;

              svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                              par$nel_index        => par$anel_index(idx),
                              par$oid_sector_mae   => var$oid_sector_mae,
                              par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                              par$fyh_gestion      => var$fyh_contable,
                              par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                              par$cod_cultura      => par$cod_cultura);  
              
              /* LOG de validación  */
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                        'svalidar_fecha contable con parametros:' ||
                        ' par$nel_index: ' || par$anel_index(idx) ||
                        ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                        ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                        ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                        ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                        ', par$cod_cultura: ' || par$cod_cultura,
                    par$cod_identificador   => 'MAECIE');


              /* Validar Codigo externo */
              /* LOG de validación  */
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                  par$des_version     => const$version,                            
                  par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                      'fvalidar_codigo_externo con parametros:' ||
                      ' par$nel_index: ' ||  par$anel_index(idx) ||
                      ', par$des_cod_externo: ' || var$des_cod_externo_maecie ||
                      ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                      ', par$fyh_gestion: ' || var$fyh_gestion ||
                      ', par$cod_precinto: ' || NULL ||
                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                      ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                      ', par$cod_cultura: ' || par$cod_cultura,
                  par$cod_identificador   => 'MAECIE');

              IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maecie, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                /* LOG de validación  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                        'fvalidar_codigo_externo',
                    par$cod_identificador   => 'MAECIE');
              END IF;

              var$aux_secuencia := 0;
              IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                -- Iteramos en base a las divisas enviadas
                IF par$adiv_nel_index IS NOT NULL AND par$adiv_nel_index.COUNT > 0 THEN
                  FOR idxDiv IN par$adiv_nel_index.first .. par$adiv_nel_index.last LOOP
                    var$auxe_oid_divisa.delete;
                    var$auxe_oid_denominacion.delete;
                    var$auxe_oid_unid_medida.delete;
                    var$auxe_cod_niv_detalle.delete;
                    var$auxe_cod_tp_efec_tot.delete;
                    var$auxe_oid_calidad.delete;
                    var$auxe_num_importe.delete;
                    var$auxe_nel_cantidad.delete;
                    var$auxt_oid_termino.delete;
                    var$auxt_des_valor.delete;

                    IF par$adiv_nel_index(idxDiv) = par$anel_index(idx) THEN

                      var$oid_documento := sys_guid();
                      var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                      var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maecie;
                      var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maecie;
                      var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                      var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                      var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_comision;
                      var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_comision;
                      var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                      var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_boveda;

                      var$adocs_cod_actual_id(var$adocs_cod_actual_id.COUNT) := par$acod_actual_id(idx);
                      var$adocs_cod_collection_id(var$adocs_cod_collection_id.COUNT) := par$acod_collection_id(idx);


                      /* Formulario y Codigo Externo */
                      var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maecie,
                                                                                                  par$cod_device_id       => par$acod_device_id(idx),
                                                                                                  par$fyh_gestion         => var$fyh_gestion,
                                                                                                  par$cod_precinto        => NULL,
                                                                                                  par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                  par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                  par$nel_sumar_secuencia => var$aux_secuencia);
                      /* LOG de código externo  */
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                              'fcargar_codigo_externo:' || 
                              ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                              ,
                          par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                      var$aux_secuencia := var$aux_secuencia + 1;
                
                      /* Campos Adcionales */
                      IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                        FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                          IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                            par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                            par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                              svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                par$cod_usuario         => par$cod_usuario,
                                                par$cod_cultura         => par$cod_cultura);
                              /* LOG validar términos  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_terminos con parametros:' ||
                                      ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                      ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                      ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                      ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                          END IF;
                        END LOOP;
                      END IF;

                      IF par$aefdoc_nel_index IS NOT NULL AND  par$aefdoc_nel_index.COUNT > 0 THEN

                        /* Valores */
                        FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                          IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_div_index(idxt) = par$adiv_index(idxDiv) THEN
                            svalidar_valores(par$oid_llamada             => par$oid_llamada,
                                              par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                              par$nel_index                 => par$anel_index(idx),
                                              par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                              par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                              par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                              par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                              par$saida_oid_divisa          => var$auxe_oid_divisa(var$auxe_oid_divisa.COUNT),
                                              par$saida_oid_denominacio     => var$auxe_oid_denominacion(var$auxe_oid_denominacion.COUNT),
                                              par$saida_oid_unid_medida     => var$auxe_oid_unid_medida(var$auxe_oid_unid_medida.COUNT),
                                              par$saida_cod_niv_detalle     => var$auxe_cod_niv_detalle(var$auxe_cod_niv_detalle.COUNT),
                                              par$saida_cod_tp_efec_tot     => var$auxe_cod_tp_efec_tot(var$auxe_cod_tp_efec_tot.COUNT),
                                              par$saida_oid_calidad         => var$auxe_oid_calidad(var$auxe_oid_calidad.COUNT),
                                              par$saida_num_importe         => var$auxe_num_importe(var$auxe_num_importe.COUNT),
                                              par$saida_nel_cantidad        => var$auxe_nel_cantidad(var$auxe_nel_cantidad.COUNT),
                                              par$cod_cultura               => par$cod_cultura);
                            /* LOG validar valores  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación de valores de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'svalidar_valores con parametros:' ||
                                    ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                    ', par$anel_index: ' || par$anel_index(idx) ||
                                    ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                    ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) ||
                                    ', par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) ||
                                    ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                    ', par$saida_oid_divisa: ' || var$auxe_oid_divisa(var$auxe_oid_divisa.COUNT - 1) ||
                                    ', par$saida_oid_denominacio: ' || var$auxe_oid_denominacion(var$auxe_oid_denominacion.COUNT - 1) ||
                                    ', par$saida_oid_unid_medida: ' || var$auxe_oid_unid_medida(var$auxe_oid_unid_medida.COUNT - 1) ||
                                    ', par$saida_cod_niv_detalle: ' || var$auxe_cod_niv_detalle(var$auxe_cod_niv_detalle.COUNT - 1) ||
                                    ', par$saida_cod_tp_efec_tot: ' || var$auxe_cod_tp_efec_tot(var$auxe_cod_tp_efec_tot.COUNT - 1) ||
                                    ', par$saida_oid_calidad: ' || var$auxe_oid_calidad(var$auxe_oid_calidad.COUNT - 1) ||
                                    ', par$saida_num_importe: ' || var$auxe_num_importe(var$auxe_num_importe.COUNT - 1) ||
                                    ', par$saida_nel_cantidad: ' || var$auxe_nel_cantidad(var$auxe_nel_cantidad.COUNT - 1) ||
                                    ', par$cod_cultura: ' || par$cod_cultura 
                                    ,
                                par$cod_identificador   => 'MAECIE');
                          END IF;

                        END LOOP;
                      END IF;

                      IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                        /* Campos Adcionales */
                        IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                          FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                            var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                            var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                            var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                          END LOOP;
                        END IF;

                        /* Valores */
                        IF var$auxe_oid_divisa IS NOT NULL AND var$auxe_oid_divisa.COUNT > 0  THEN
                          FOR idxt IN var$auxe_oid_divisa.first .. var$auxe_oid_divisa.last LOOP

                            var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                            var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxe_oid_divisa(idxt);
                            var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxe_oid_denominacion(idxt);
                            var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxe_oid_unid_medida(idxt);
                            var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxe_cod_niv_detalle(idxt);
                            var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxe_cod_tp_efec_tot(idxt);
                            var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxe_oid_calidad(idxt);
                            var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxe_num_importe(idxt);
                            var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxe_nel_cantidad(idxt);

                          END LOOP;
                        END IF;

                        /* FIN - CREAR MOVIMIENTO MAECIE */
                      END IF;
                    END IF;
                  END LOOP; 
                  IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                    /* INICIO - LOG de sguardar_documento*/
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                        par$cod_identificador   => '');

                    /* Grabar documentos */
                    sguardar_documento(par$oid_llamada             => par$oid_llamada,
                                        par$adocs_oid                 => var$adocs_oid,
                                        par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                        par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                        par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                        par$adocs_fyh_contable        => var$adocs_fyh_contable,                     
                                        par$adocs_cod_actual_id       => var$adocs_cod_actual_id,
                                        par$adocs_cod_collection_id   => var$adocs_cod_collection_id,
                                        par$adocs_cod_externo         => var$adocs_cod_externo,
                                        par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                        par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                        par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                        par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                        par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                        par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                        par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                        par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                        par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                        par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                        par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                        par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                        par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                        par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                        par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                        par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                        par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                        par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                        par$cod_usuario               => par$cod_usuario,
                                        par$cod_cultura               => par$cod_cultura,
                                        par$cod_ejecucion             => par$cod_ejecucion,
                                        par$nel_index                 => par$anel_index(idx));
                    /* FIN - LOG - parametros sguardar_documento*/
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                        par$cod_identificador   => '');

                    COMMIT;

                    INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                        VALUES (par$anel_index(idx), '0040150000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040150000', gepr_pcomon_###VERSION###.const$CodFunMoviCierreFact,
                                gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

                  END IF;
                END IF;
              END IF;
            END IF;
          EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              var$err := gepr_putilidades_###VERSION###.fformat_error;
              INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                  VALUES (par$anel_index(idx), '3040150001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040150001', gepr_pcomon_###VERSION###.const$CodFunMoviCierreFact,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 'VALIDACIONES');
              /* LOG ROLLBACK  */
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Se realiza ROLLBACK',
                                      par$cod_identificador   => '');
          END;

      END LOOP;

      /* Validaciones */
      OPEN par$rc_validaciones FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'VALIDACIONES';

      /* Documentos */
      OPEN par$rc_documentos FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

      /* Planificacion */
      OPEN par$rc_planificaciones FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                            var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                            null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
      COMMIT;

      /* ===  Tratar excepciones - Rollback === */
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      var$err := gepr_putilidades_###VERSION###.fformat_error;

      var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                    var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                    null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);

      /* LOG ROLLBACK  */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se realiza ROLLBACK',
                              par$cod_identificador   => '');
  END sgrabar_mov_cierre_fact;

  /* Validar Movimientos Cierre Facturacion */
  PROCEDURE svalidar_mov_cierre_fact(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                    par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_cuenta_comision     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                    par$bol_controla_faturacion OUT gepr_pcomon_###VERSION###.tipo$nbol_,
                                    par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                    par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                    par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$cod_banco_capital  gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_banco_comision gepr_pcomon_###VERSION###.tipo$oid_;
    var$cod_planificacion  gepr_pcomon_###VERSION###.tipo$cod_;
    var$nel_existe         gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldoFisico,
                    par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalSaldoFisico,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);

    IF NOT fhay_error(par$nel_index => par$nel_index) THEN

      /* Recuperar Banco Capital y Banco Comision */
      BEGIN

            SELECT PLAN.BOL_CONTROLA_FACTURACION, CLIM.COD_CLIENTE, PLAN.COD_PLANIFICACION, CLIC.COD_CLIENTE
              INTO par$bol_controla_faturacion, var$cod_banco_comision, var$cod_planificacion, var$cod_banco_capital
              FROM SAPR_TMAQUINA MAQU
        INNER JOIN SAPR_TPLANXMAQUINA PLMA ON PLMA.OID_MAQUINA = MAQU.OID_MAQUINA AND PLMA.BOL_ACTIVO = 1
        INNER JOIN SAPR_TPLANIFICACION PLAN ON PLAN.OID_PLANIFICACION = PLMA.OID_PLANIFICACION AND PLAN.BOL_ACTIVO = 1
        INNER JOIN GEPR_TCLIENTE CLIC ON CLIC.OID_CLIENTE = PLAN.OID_CLIENTE AND PLMA.BOL_ACTIVO = 1
        LEFT JOIN GEPR_TCLIENTE CLIM ON CLIM.OID_CLIENTE = PLAN.OID_CLIENTE_COMISION AND CLIM.BOL_VIGENTE = 1
             WHERE MAQU.OID_SECTOR = par$oid_sector_mae
               AND MAQU.COD_IDENTIFICACION = par$cod_device_id
               AND MAQU.BOL_ACTIVO = 1;

      EXCEPTION WHEN no_data_found THEN
        var$cod_banco_comision := NULL;
        par$bol_controla_faturacion := 0;
        var$cod_planificacion := NULL;
      END;

      IF par$bol_controla_faturacion = 1 THEN

        /* 2040150005 - Error al identificar el Banco Comision configurado en la planificacion [{0}]. */
        IF var$cod_banco_comision IS NULL THEN
          dbms_output.put_line('Error al identificar el Banco Comision configurado en la planificacion [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040150005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040150005', gepr_pcomon_###VERSION###.const$CodFunMoviCierreFact, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$cod_planificacion, 0), 'VALIDACIONES');

        END IF;

        /* 2040150006 - No existe una Delegación Central con el código [{0}] configurada en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TDELEGACION
               WHERE COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe una Delegación Central con el código [{0}] configurada en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040150006', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040150006', gepr_pcomon_###VERSION###.const$CodFunMoviCierreFact, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodDelegacionCentral, 0), 'VALIDACIONES');

        END;

        /* 2040150007 - No existe una Planta Central con el código [{0}] configurada en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TPLANTA PLAN
          INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLAN.OID_DELEGACION
               WHERE PLAN.COD_PLANTA = gepr_pcomon_###VERSION###.const$CodPlantaCentral
                 AND PLAN.BOL_ACTIVO = 1
                 AND DELE.COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND DELE.BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe una Planta Central con el código [{0}] configurada en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040150007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040150007', gepr_pcomon_###VERSION###.const$CodFunMoviCierreFact, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodPlantaCentral, 0), 'VALIDACIONES');

        END;

        /* 2040150008 - No existe un Sector Boveda con el código [{0}] configurado en Génesis Producto. */
        BEGIN
              SELECT COUNT(1)
                INTO var$nel_existe
                FROM GEPR_TSECTOR SECT
          INNER JOIN GEPR_TPLANTA PLAN ON PLAN.OID_PLANTA = SECT.OID_PLANTA
          INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLAN.OID_DELEGACION
               WHERE SECT.COD_SECTOR = gepr_pcomon_###VERSION###.const$CodSectorBoveda
                 AND SECT.BOL_ACTIVO = 1
                 AND PLAN.COD_PLANTA = gepr_pcomon_###VERSION###.const$CodPlantaCentral
                 AND PLAN.BOL_ACTIVO = 1
                 AND DELE.COD_DELEGACION = gepr_pcomon_###VERSION###.const$CodDelegacionCentral
                 AND DELE.BOL_VIGENTE = 1;

        EXCEPTION WHEN no_data_found THEN
          var$nel_existe := 0;
          dbms_output.put_line('No existe un Sector Boveda con el código [{0}] configurado en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2040150008', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040150008', gepr_pcomon_###VERSION###.const$CodFunMoviCierreFact, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodSectorBoveda, 0), 'VALIDACIONES');

        END;

        IF NOT fhay_error(par$nel_index => par$nel_index) THEN

          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, var$cod_banco_capital, var$cod_planificacion, 'PLANIFICACIONES');

          /* Validar Cuenta Comision */
          svalidar_cuenta(
                          par$oid_llamada     => par$oid_llamada,
                          par$cod_identificador_ajeno => NULL,
                          par$nel_index               => par$nel_index,
                          par$cod_cliente             => var$cod_banco_comision,
                          par$cod_sub_cliente         => NULL,
                          par$cod_punto_servicio      => NULL,
                          par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldo,
                          par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalComision,
                          par$cod_device_id           => gepr_pcomon_###VERSION###.const$CodSectorBoveda,
                          par$cod_cultura             => par$cod_cultura,
                          par$cod_usuario             => par$cod_usuario,
                          par$bol_esmaquina           => 0,
                          par$bol_validar_punto       => 0,
                          par$cod_pais                => par$cod_pais,
                          par$oid_cuenta              => par$oid_cuenta_comision,
                          par$oid_sector              => par$oid_sector_boveda);

        END IF;

      ELSE
        /* 2040150009 - El DeviceID informado esta relacionado a una planificación que no controla facturación y por esta razón el movimiento no podrá ser generado. */
        dbms_output.put_line('El DeviceID informado esta relacionado a una planificación que no controla facturación y por esta razón el movimiento no podrá ser generado.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2040150009', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040150009', gepr_pcomon_###VERSION###.const$CodFunMoviCierreFact, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodSectorBoveda, 0), 'VALIDACIONES');

      END IF;

    END IF;

  END svalidar_mov_cierre_fact;


  /* Grabar Movimientos de Provision Efectivo */
  PROCEDURE sgrabar_mov_provisionefectivo(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$acod_banco_capital      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                          par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                          par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,                                          
                                          par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                          par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                          par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                          par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                          par$adiv_nel_index          IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$adiv_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$aefdoc_div_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                          par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                          par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                          par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                          par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                          par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$rc_validaciones         OUT sys_refcursor,
                                          par$rc_documentos           OUT sys_refcursor,
                                          par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_provisionefectivo';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);

      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable              gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0         gepr_pcomon_###VERSION###.tipo$fyh_;

      /* Formularios */
      var$oid_formulario_maepef     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maepef gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maepef    gepr_pcomon_###VERSION###.tipo$cod_;

      /* Cuentas */
      var$oid_cuenta_capital        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_boveda         gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable        gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;      
      var$adocs_cod_actual_id       gepr_pcomon_###VERSION###.tipo$descs_;
      var$adocs_cod_collection_id   gepr_pcomon_###VERSION###.tipo$descs_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$auxe_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxe_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxe_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxe_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxe_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxe_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxe_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxe_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;
      var$auxt_oid_termino       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor         gepr_pcomon_###VERSION###.tipo$descs_;
      var$array_nulo                 gepr_pcomon_###VERSION###.tipo$descs_;

      var$aux_secuencia          gepr_pcomon_###VERSION###.tipo$nel_;
  BEGIN

        /* Grabamos parametros iniciales */
        IF par$oid_llamada IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Parametros iniciales: ' ||
                                                    ' par$oid_llamada: ' || par$oid_llamada ||
                                                    ', par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                    ', par$info_ejecucion: ' || par$info_ejecucion ||
                                                    ', par$cod_usuario: ' || par$cod_usuario ||
                                                    ', par$cod_cultura: ' || par$cod_cultura ||
                                                    ', par$cod_pais: ' || par$cod_pais,
                                    par$cod_identificador   => '');

            /* INICIO LOG de arrays asociativos */
            IF par$anel_index IS NOT NULL and par$anel_index.count > 0 THEN
                FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
                    IF par$anel_index(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_index(' || idx || '):  ' || par$anel_index(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;    
            END IF;

            IF par$acod_banco_capital IS NOT NULL AND par$acod_banco_capital.count > 0 THEN
                FOR idx IN  par$acod_banco_capital.first ..  par$acod_banco_capital.last LOOP 
                    IF par$acod_banco_capital(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_banco_capital(' || idx || '):  ' || par$acod_banco_capital(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;    
            END IF;

            IF par$afyh_gestion IS NOT NULL AND par$afyh_gestion.COUNT > 0 THEN
                FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP
                    IF par$afyh_gestion(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;
            END IF;

            IF par$afyh_contable IS NOT NULL AND par$afyh_contable.COUNT > 0 THEN
                FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP
                    IF par$afyh_contable(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;
            END IF;

            IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
                FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP
                    IF par$acod_actual_id(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;
            END IF;

            IF par$acod_collection_id IS NOT NULL AND par$acod_collection_id.COUNT > 0 THEN
                FOR idx IN  par$acod_collection_id.first ..  par$acod_collection_id.last LOOP 
                    IF par$acod_collection_id(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_collection_id(' || idx || '):  ' || par$acod_collection_id(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;
            END IF;

            IF par$anel_gmt_minuto IS NOT NULL AND par$anel_gmt_minuto.COUNT > 0 THEN
                FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
                    IF par$anel_gmt_minuto(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;
            END IF;

            IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.count > 0 THEN
                FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
                    IF par$avtdoc_nel_index(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;
            END IF;


            IF par$avtdoc_cod_termino IS NOT NULL AND par$avtdoc_cod_termino.COUNT > 0 THEN
                FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP
                    IF par$avtdoc_cod_termino(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx),
                                        par$cod_identificador   => '');                        
                    END IF;
                END LOOP;
            END IF;

            IF par$avtdoc_des_valor IS NOT NULL AND par$avtdoc_des_valor.count > 0 THEN
                FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP
                    IF par$avtdoc_des_valor(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;
            END IF;
            FOR idx IN  par$adiv_nel_index.first ..  par$adiv_nel_index.last LOOP 
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Parametros iniciales: ' || 'par$adiv_nel_index(' || idx || '):  ' || par$adiv_nel_index(idx),
                              par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$adiv_index.first ..  par$adiv_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$adiv_index(' || idx || '):  ' || par$adiv_index(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$aefdoc_div_index.first ..  par$aefdoc_div_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_div_index(' || idx || '):  ' || par$aefdoc_div_index(idx),
                                par$cod_identificador   => '');
            END LOOP;
            IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.count > 0 THEN
                FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP
                    IF par$aefdoc_nel_index(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx),
                                        par$cod_identificador   => '');                    
                    END IF;
                END LOOP;
            END IF;

            IF par$aefdoc_cod_divisa IS NOT NULL AND par$aefdoc_cod_divisa.count > 0 THEN
                FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP
                    IF par$aefdoc_cod_divisa(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;
            END IF;

            IF par$aefdoc_num_importe IS NOT NULL AND par$aefdoc_num_importe.COUNT > 0 THEN
                FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
                    IF par$aefdoc_num_importe(idx) IS NOT NULL THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx),
                                        par$cod_identificador   => '');
                    END IF;
                END LOOP;
            END IF;
        END IF;
        

      /* #### Inicializar los cursores #### */
      OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
      OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

      /* Limpiar tabla temporaria */
      DELETE SAPR_GTT_TAUXILIAR;
      COMMIT;

      /* Recuperar Formularios - MAEPEF */
      srecuperar_formularios(par$cod_formulario     => 'MAEPEF',
                             par$oid_formulario     => var$oid_formulario_maepef,
                             par$oid_tipo_documento => var$oid_tipo_documento_maepef,
                             par$des_cod_externo    => var$des_cod_externo_maepef);

      /* LOG recuperación de formulario  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAEPEF - ' ||  
                                    'var$oid_formulario_maepef: ' || var$oid_formulario_maepef ||
                                    ', var$oid_tipo_documento_maepef: ' || var$oid_tipo_documento_maepef ||
                                    ', var$des_cod_externo_maepef: ' || var$des_cod_externo_maepef,
                                par$cod_identificador   => '');

      FOR idx IN par$anel_index.first .. par$anel_index.last LOOP

          BEGIN

            /* Limpiar tabla temporaria */
            DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
            var$adocs_oid.delete;
            var$adocs_oid_formulario.delete;
            var$adocs_fyh_gestion.delete;
            var$adocs_fyh_contable.delete;
            var$adocs_cod_externo.delete;
            var$adocs_oid_cuenta_ori.delete;
            var$adocs_oid_cuenta_des.delete;
            var$adocs_oid_cuentasaldo_ori.delete;
            var$adocs_oid_cuentasaldo_des.delete;
            var$adocs_oid_sector_ori.delete;
            var$adocs_oid_sector_des.delete;
            var$adocs_cod_actual_id.delete;
            var$adocs_cod_collection_id.delete;
            var$aefdoc_oid_documento.delete;
            var$aefdoc_oid_divisa.delete;
            var$aefdoc_oid_denominacion.delete;
            var$aefdoc_oid_unid_medida.delete;
            var$aefdoc_cod_niv_detalle.delete;
            var$aefdoc_cod_tp_efec_tot.delete;
            var$aefdoc_oid_calidad.delete;
            var$aefdoc_num_importe.delete;
            var$aefdoc_nel_cantidad.delete;
            var$avtdoc_oid_documento.delete;
            var$avtdoc_oid_termino.delete;
            var$avtdoc_des_valor.delete;

             /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Comienza validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                        'svalidar_mov_provisionefectivo con parametros:' ||
                        ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                        ', par$nel_index: ' || par$anel_index(idx) ||
                        ', par$cod_banco_capital: ' || par$acod_banco_capital(idx) ||
                        ', par$oid_cuenta_capital: ' || var$oid_cuenta_capital ||
                        ', par$oid_sector_boveda: ' || var$oid_sector_boveda ||
                        ', par$cod_cultura: ' || par$cod_cultura ||
                        ', par$cod_usuario: ' || par$cod_usuario ||
                        ', par$cod_pais: ' || par$cod_pais,
                    par$cod_identificador   => '');

            /* Validar Cuenta Capital */
            svalidar_mov_provisionefectivo(par$oid_llamada             => par$oid_llamada,
                                           par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                           par$nel_index               => par$anel_index(idx),
                                           par$cod_banco_capital       => par$acod_banco_capital(idx),
                                           par$oid_cuenta_capital      => var$oid_cuenta_capital,
                                           par$oid_sector_boveda       => var$oid_sector_boveda,
                                           par$cod_cultura             => par$cod_cultura,
                                           par$cod_usuario             => par$cod_usuario,
                                           par$cod_pais                => par$cod_pais);
            
             /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Comienza validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'svalidar_actual_id con parametros:' ||
                                    ' par$nel_index: ' || par$anel_index(idx) ||
                                    ', par$fyh_gestion: ' || par$afyh_gestion(idx) ||
                                    ', par$cod_actual_id: ' || par$acod_actual_id(idx) ||
                                    ', par$cod_cultura: ' || par$cod_cultura,
                                par$cod_identificador   => '');

            svalidar_actual_id(
                par$oid_llamada     => par$oid_llamada,
                par$nel_index         => par$anel_index(idx),
                par$fyh_gestion       => par$afyh_gestion(idx),                                   
                par$cod_actual_id     => par$acod_actual_id(idx),                                 
                par$cod_cultura       => par$cod_cultura);

            /* CREAR MOVIMIENTO MAEPEF */
            IF var$oid_formulario_maepef IS NULL AND var$oid_tipo_documento_maepef IS NULL AND var$des_cod_externo_maepef IS NULL THEN
               INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                    VALUES (par$anel_index(idx), '2040110004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040110004', gepr_pcomon_###VERSION###.const$CodFunMoviProvisionEfec,
                            gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEPEF', 0), 'VALIDACIONES');
                 
            END IF;

            /* Validar fecha gestion */
            var$fyh_gestion      := par$afyh_gestion(idx);
            svalidar_fecha(   par$oid_llamada     => par$oid_llamada,
                              par$nel_index        => par$anel_index(idx),
                              par$oid_sector_mae   => var$oid_sector_boveda,
                              par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                              par$fyh_gestion      => var$fyh_gestion,
                              par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                              par$cod_cultura      => par$cod_cultura);
            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                        'svalidar_fecha de gestion con parametros:' ||
                                        ' par$nel_index: ' || par$anel_index(idx) ||
                                        ', par$oid_sector_mae: ' || var$oid_sector_boveda ||
                                        ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                        ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                        ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                        ', par$cod_cultura: ' || par$cod_cultura,
                                    par$cod_identificador   => 'MAEPEF');

            /* Validar fecha contable */
            IF par$afyh_contable(idx) IS NULL THEN
              var$fyh_contable      := par$afyh_gestion(idx);                            
            ELSE
              var$fyh_contable      := par$afyh_contable(idx);                          
            END IF;

            svalidar_fecha(par$oid_llamada       => par$oid_llamada,
                            par$nel_index        => par$anel_index(idx),
                            par$oid_sector_mae   => var$oid_sector_boveda,
                            par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                            par$fyh_gestion      => var$fyh_contable,
                            par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                            par$cod_cultura      => par$cod_cultura );  

            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                          'svalidar_fecha contable con parametros:' ||
                                          ' par$nel_index: ' || par$anel_index(idx) ||
                                          ', par$oid_sector_mae: ' || var$oid_sector_boveda ||
                                          ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                          ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                                          ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                          ', par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => 'MAEPEF');

            /* LOG de validación  */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                par$des_version     => const$version,                            
                par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                    'fvalidar_codigo_externo con parametros:' ||
                    ' par$nel_index: ' ||  par$anel_index(idx) ||
                    ', par$des_cod_externo: ' || var$des_cod_externo_maepef ||
                    ', par$cod_device_id: ' || NULL ||
                    ', par$fyh_gestion: ' || var$fyh_gestion ||
                    ', par$cod_precinto: ' || NULL ||
                    ', par$oid_sector_mae: ' || var$oid_sector_boveda ||
                    ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                    ', par$cod_cultura: ' || par$cod_cultura,
                par$cod_identificador   => 'MAEPEF');
              
              /* Validar Codigo externo */
            IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maepef, NULL, var$fyh_gestion, NULL, var$oid_sector_boveda, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN

              /* LOG de validación  */
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                              'fvalidar_codigo_externo',
                                          par$cod_identificador   => 'MAEPEF');
            END IF;

            var$aux_secuencia := 0;
            IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
              -- Iteramos en base a las divisas enviadas
              IF par$adiv_nel_index IS NOT NULL AND par$adiv_nel_index.COUNT > 0 THEN
                FOR idxDiv IN par$adiv_nel_index.first .. par$adiv_nel_index.last LOOP
                  var$auxe_oid_divisa.delete;
                  var$auxe_oid_denominacion.delete;
                  var$auxe_oid_unid_medida.delete;
                  var$auxe_cod_niv_detalle.delete;
                  var$auxe_cod_tp_efec_tot.delete;
                  var$auxe_oid_calidad.delete;
                  var$auxe_num_importe.delete;
                  var$auxe_nel_cantidad.delete;
                  var$auxt_oid_termino.delete;
                  var$auxt_des_valor.delete;
                
                  IF par$adiv_nel_index(idxDiv) = par$anel_index(idx) THEN
                    var$oid_documento := sys_guid();
                    var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                    var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maepef;
                    var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maepef;
                    var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                    var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                    var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_capital;
                    var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_capital;
                    var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_capital;
                    var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_capital;
                    var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_boveda;
                    var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_boveda;
                    var$adocs_cod_actual_id(var$adocs_cod_actual_id.COUNT) := par$acod_actual_id(idx);
                    var$adocs_cod_collection_id(var$adocs_cod_collection_id.COUNT) := par$acod_collection_id(idx);


                    /* Formulario y Codigo Externo */
                    var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => par$acod_banco_capital(idx) || 'BANCAP' || '_' || var$des_cod_externo_maepef, 
                                                                                                par$cod_device_id       => NULL,
                                                                                                par$fyh_gestion         => var$fyh_gestion,
                                                                                                par$cod_precinto        => NULL,
                                                                                                par$oid_sector_mae      => var$oid_sector_boveda,
                                                                                                par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                par$nel_sumar_secuencia => var$aux_secuencia);

                    /* LOG de código externo  */
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                par$des_version     => const$version,                            
                                                par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                    'fcargar_codigo_externo:' || 
                                                    ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                                    ,
                                                par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                    var$aux_secuencia := var$aux_secuencia + 1;
                    /* Campos Adcionales */
                    IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                      FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                        IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                          par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                          par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                            svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                              par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                              par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                              par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                              par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                              par$cod_usuario         => par$cod_usuario,
                                              par$cod_cultura         => par$cod_cultura);

                            /* LOG validar términos  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     =>  'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                        'svalidar_terminos con parametros:' ||
                                                        ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                        ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                        ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                        ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1),
                                par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                        END IF;
                      END LOOP;
                    END IF;

                    /* Valores */
                    FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                      IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_div_index(idxt) = par$adiv_index(idxDiv) THEN

                        svalidar_valores(par$oid_llamada                => par$oid_llamada,
                                        par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                        par$nel_index                 => par$anel_index(idx),
                                        par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                        par$entrada_cod_denominacion  => NULL,
                                        par$entrada_nel_cantidad      => NULL,
                                        par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                        par$saida_oid_divisa          => var$auxe_oid_divisa(var$auxe_oid_divisa.COUNT),
                                        par$saida_oid_denominacio     => var$auxe_oid_denominacion(var$auxe_oid_denominacion.COUNT),
                                        par$saida_oid_unid_medida     => var$auxe_oid_unid_medida(var$auxe_oid_unid_medida.COUNT),
                                        par$saida_cod_niv_detalle     => var$auxe_cod_niv_detalle(var$auxe_cod_niv_detalle.COUNT),
                                        par$saida_cod_tp_efec_tot     => var$auxe_cod_tp_efec_tot(var$auxe_cod_tp_efec_tot.COUNT),
                                        par$saida_oid_calidad         => var$auxe_oid_calidad(var$auxe_oid_calidad.COUNT),
                                        par$saida_num_importe         => var$auxe_num_importe(var$auxe_num_importe.COUNT),
                                        par$saida_nel_cantidad        => var$auxe_nel_cantidad(var$auxe_nel_cantidad.COUNT),
                                        par$cod_cultura               => par$cod_cultura);
                        /* LOG validar valores  */
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Validación de valores con par$aefdoc_num_importe(idxt) >= 0 de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                'svalidar_valores con parametros:' ||
                                                ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$anel_index: ' || par$anel_index(idx) ||
                                                ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                                ', par$entrada_cod_denominacion: ' || NULL ||
                                                ', par$entrada_nel_cantidad: ' ||NULL ||
                                                ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                                ', par$saida_oid_divisa: ' || var$auxe_oid_divisa(var$auxe_oid_divisa.COUNT - 1) ||
                                                ', par$saida_oid_denominacio: ' || var$auxe_oid_denominacion(var$auxe_oid_denominacion.COUNT - 1) ||
                                                ', par$saida_oid_unid_medida: ' || var$auxe_oid_unid_medida(var$auxe_oid_unid_medida.COUNT - 1) ||
                                                ', par$saida_cod_niv_detalle: ' || var$auxe_cod_niv_detalle(var$auxe_cod_niv_detalle.COUNT - 1) ||
                                                ', par$saida_cod_tp_efec_tot: ' || var$auxe_cod_tp_efec_tot(var$auxe_cod_tp_efec_tot.COUNT - 1) ||
                                                ', par$saida_oid_calidad: ' || var$auxe_oid_calidad(var$auxe_oid_calidad.COUNT - 1) ||
                                                ', par$saida_num_importe: ' || var$auxe_num_importe(var$auxe_num_importe.COUNT - 1) ||
                                                ', par$saida_nel_cantidad: ' || var$auxe_nel_cantidad(var$auxe_nel_cantidad.COUNT - 1) ||
                                                ', par$cod_cultura: ' || par$cod_cultura 
                                                ,
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                      END IF;

                    END LOOP;

                    IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                      /* Campos Adcionales */
                      IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                        FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                          var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                          var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                          var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                        END LOOP;
                      END IF;

                      /* Valores */
                      IF var$auxe_oid_divisa IS NOT NULL THEN
                        FOR idxt IN var$auxe_oid_divisa.first .. var$auxe_oid_divisa.last LOOP

                          var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                          var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxe_oid_divisa(idxt);
                          var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxe_oid_denominacion(idxt);
                          var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxe_oid_unid_medida(idxt);
                          var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxe_cod_niv_detalle(idxt);
                          var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxe_cod_tp_efec_tot(idxt);
                          var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxe_oid_calidad(idxt);
                          var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxe_num_importe(idxt);
                          var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxe_nel_cantidad(idxt);

                        END LOOP;
                      END IF;

                    /* FIN - CREAR MOVIMIENTO MAEPEF */
                    END IF;
                  END IF;
                END LOOP;
                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                  /* INICIO - LOG de sguardar_documento*/
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                      par$cod_identificador   => '');
                  /* Grabar documentos */
                  sguardar_documento(par$oid_llamada               => par$oid_llamada,
                                      par$adocs_oid                 => var$adocs_oid,
                                      par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                      par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                      par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                      par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                      par$adocs_cod_externo         => var$adocs_cod_externo,
                                      par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                      par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                      par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                      par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                      par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                      par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                      par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                      par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                      par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                      par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                      par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                      par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                      par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                      par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                      par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                      par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                      par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                      par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                      par$cod_usuario               => par$cod_usuario,
                                      par$cod_cultura               => par$cod_cultura,
                                      par$cod_ejecucion             => par$cod_ejecucion,
                                      par$nel_index                 => par$anel_index(idx),
                                      par$adocs_cod_actual_id       => var$adocs_cod_actual_id,
                                      par$adocs_cod_collection_id   => var$adocs_cod_collection_id);
                  /* FIN - LOG - parametros sguardar_documento*/
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                      par$cod_identificador   => '');
                      COMMIT;

                       INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                            VALUES (par$anel_index(idx), '0040110000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040110000', gepr_pcomon_###VERSION###.const$CodFunMoviProvisionEfec,
                                    gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

                END IF;
              END IF;
            END IF;

          EXCEPTION
            WHEN OTHERS THEN
               ROLLBACK;
               var$err := gepr_putilidades_###VERSION###.fformat_error;
               INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                    VALUES (par$anel_index(idx), '3040110001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040110001', gepr_pcomon_###VERSION###.const$CodFunMoviProvisionEfec,
                            gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 'VALIDACIONES');

          END;

      END LOOP;

      /* Validaciones */
      OPEN par$rc_validaciones FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'VALIDACIONES';

      /* Documentos */
      OPEN par$rc_documentos FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                            var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                            null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
      COMMIT;

      /* ===  Tratar excepciones - Rollback === */
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      var$err := gepr_putilidades_###VERSION###.fformat_error;

      var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                    var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                    null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);

  END sgrabar_mov_provisionefectivo;

  /* Validar Movimientos Provision Efectivo */
  PROCEDURE svalidar_mov_provisionefectivo(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                            par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                           par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                           par$cod_banco_capital       IN gepr_pcomon_###VERSION###.tipo$cod_,
                                           par$oid_cuenta_capital      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                           par$oid_sector_boveda       OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                           par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                           par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                           par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$cod_banco_capital   gepr_pcomon_###VERSION###.tipo$oid_;
    var$bol_cliente_activo  gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_cliente_capital gepr_pcomon_###VERSION###.tipo$nbol_;

  BEGIN

    IF par$cod_banco_capital IS NULL THEN
      /* 2000110005 - Es obligatorio informar un Banco Capital. */
      dbms_output.put_line('Es obligatorio informar un Banco Capital.');
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2000110005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000110005', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$CodFunMoviProvisionEfec, NULL, 0), 'VALIDACIONES');

    END IF;

    IF NOT fhay_error(par$nel_index => par$nel_index) THEN

      IF par$cod_identificador_ajeno IS NULL THEN

        /* Banco Capital */
        BEGIN
          SELECT CLIEN.COD_CLIENTE, CLIEN.BOL_VIGENTE, CLIEN.BOL_BANCO_CAPITAL
            INTO var$cod_banco_capital, var$bol_cliente_activo, var$bol_cliente_capital
            FROM GEPR_TCLIENTE CLIEN
           WHERE CLIEN.COD_CLIENTE = par$cod_banco_capital;

        EXCEPTION WHEN no_data_found THEN
          var$cod_banco_capital := NULL; var$bol_cliente_activo := 0; var$bol_cliente_capital := 0;
        END;

      ELSE

        /* Banco Capital */
        BEGIN
          SELECT CLIEN.COD_CLIENTE, CLIEN.BOL_VIGENTE, CLIEN.BOL_BANCO_CAPITAL
            INTO var$cod_banco_capital, var$bol_cliente_activo, var$bol_cliente_capital
            FROM GEPR_TCLIENTE CLIEN
      INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = CLIEN.OID_CLIENTE
                                        AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                        AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TCLIENTE'
                                        AND COAJ.COD_AJENO = par$cod_banco_capital;

        EXCEPTION WHEN no_data_found THEN
          var$cod_banco_capital := NULL; var$bol_cliente_activo := 0; var$bol_cliente_capital := 0;
        END;
      END IF;

      /* Banco Capital */
      IF var$cod_banco_capital IS NULL THEN

        IF par$cod_identificador_ajeno IS NULL THEN
          /* 2000110006 - No existe el Banco Capital [{0}] configurado en Genesis Producto. */
          dbms_output.put_line('No existe el Banco Capital [{0}] configurado en Genesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000110006', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000110006', gepr_pcomon_###VERSION###.const$CodFunMoviProvisionEfec, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_banco_capital, 0), 'VALIDACIONES');
        ELSE
          /* 2000110007 - No fue posible identificar un Banco Capital en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}]. */
          dbms_output.put_line('No fue posible identificar un Banco Capital en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000110007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000110007', gepr_pcomon_###VERSION###.const$CodFunMoviProvisionEfec, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_banco_capital, 0), 'VALIDACIONES');
        END IF;

      ELSIF var$bol_cliente_activo = 0 THEN
        /* 2000110008 - El Banco Capital no está activo. */
        dbms_output.put_line('El Banco Capital no está activo.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000110008', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000110008', gepr_pcomon_###VERSION###.const$CodFunMoviProvisionEfec, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

      ELSIF var$bol_cliente_capital = 0 THEN
        /* 2000110009 - El Cliente informado [{0}], no está configurado como Banco Capital. */
        dbms_output.put_line('El Cliente informado [{0}], no está configurado como Banco Capital.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000110009', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000110009', gepr_pcomon_###VERSION###.const$CodFunMoviProvisionEfec, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_banco_capital, 0), 'VALIDACIONES');

      END IF;

    END IF;

    IF NOT fhay_error(par$nel_index => par$nel_index) THEN
      /* Validar Cuenta Capital */
      svalidar_cuenta(par$oid_llamada           => par$oid_llamada,
                        par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                        par$nel_index               => par$nel_index,
                        par$cod_cliente             => par$cod_banco_capital,
                        par$cod_sub_cliente         => NULL,
                        par$cod_punto_servicio      => NULL,
                        par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldo,
                        par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalAcreditacion,
                        par$cod_device_id           => gepr_pcomon_###VERSION###.const$CodSectorBoveda,
                        par$cod_cultura             => par$cod_cultura,
                        par$cod_usuario             => par$cod_usuario,
                        par$bol_esmaquina           => 0,
                        par$bol_validar_punto       => 0,
                        par$cod_pais                => par$cod_pais,
                        par$oid_cuenta              => par$oid_cuenta_capital,
                        par$oid_sector              => par$oid_sector_boveda);
    END IF;

  END svalidar_mov_provisionefectivo;
  
   /* Grabar Movimientos de Ajuste */
    PROCEDURE sgrabar_mov_ajuste(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual             IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_saldo_fisico       IN gepr_pcomon_###VERSION###.tipo$nels_, 
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,                                
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_ajuste';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);

      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;

      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;

      var$fyh_contable               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;

      var$nel_secuencia_p           gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$nel_secuencia_n           gepr_pcomon_###VERSION###.tipo$nel_ := 0;

      /* Formularios */
      var$oid_formulario_maeajp     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maeajp gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maeajp    gepr_pcomon_###VERSION###.tipo$cod_;
      var$oid_formulario_maeajn     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maeajn gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maeajn    gepr_pcomon_###VERSION###.tipo$cod_;


      /* Cuentas */
      var$oid_cuenta_ajuste_p       gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_cuenta_ajuste_p_sf    gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_cuenta_ajuste_n       gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_cuenta_ajuste_n_sf    gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_actual          gepr_pcomon_###VERSION###.tipo$descs_;
      var$acndoc_collection_id      gepr_pcomon_###VERSION###.tipo$descs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$auxp_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxp_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxp_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxp_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxp_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxp_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxp_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxp_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;   

      var$auxn_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxn_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxn_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxn_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxn_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$auxn_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxn_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$auxn_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;      



      var$auxt_oid_termino          gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor            gepr_pcomon_###VERSION###.tipo$descs_;

    BEGIN
        /* INICIO - LOG de parametros iniciales*/
        IF par$oid_llamada IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' ||
                                                ' par$oid_llamada: ' || par$oid_llamada ||
                                                ', par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$info_ejecucion: ' || par$info_ejecucion ||
                                                ', par$cod_usuario: ' || par$cod_usuario ||
                                                ', par$cod_cultura: ' || par$cod_cultura ||
                                                ', par$cod_pais: ' || par$cod_pais,
                                par$cod_identificador   => '');

            /* INICIO LOG de arrays asociativos */
            FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_index(' || idx || '):  ' || par$anel_index(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$acod_actual.first ..  par$acod_actual.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_actual(' || idx || '):  ' || par$acod_actual(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$acndoc_collection_id.first ..  par$acndoc_collection_id.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_collection_id(' || idx || '):  ' || par$acndoc_collection_id(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$anel_saldo_fisico.first ..  par$anel_saldo_fisico.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_saldo_fisico(' || idx || '):  ' || par$anel_saldo_fisico(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$acndoc_nel_index.first ..  par$acndoc_nel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_nel_index(' || idx || '):  ' || par$acndoc_nel_index(idx),
                                par$cod_identificador   => '');
            END LOOP;
            IF par$acndoc_det_index IS NOT NULL AND par$acndoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$acndoc_det_index.first ..  par$acndoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_det_index(' || idx || '):  ' || par$acndoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            FOR idx IN  par$acndoc_cod_canal.first ..  par$acndoc_cod_canal.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_canal(' || idx || '):  ' || par$acndoc_cod_canal(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$acndoc_cod_sub_canal.first ..  par$acndoc_cod_sub_canal.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_sub_canal(' || idx || '):  ' || par$acndoc_cod_sub_canal(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx),
                                par$cod_identificador   => '');
            END LOOP;
            IF par$aefdoc_det_index IS NOT NULL AND par$aefdoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_det_index.first ..  par$aefdoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_det_index(' || idx || '):  ' || par$aefdoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            FOR idx IN  par$aefdoc_cod_sub_canal.first ..  par$aefdoc_cod_sub_canal.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_sub_canal(' || idx || '):  ' || par$aefdoc_cod_sub_canal(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx),
                                par$cod_identificador   => '');
            END LOOP;
            FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx),
                                par$cod_identificador   => '');
            END LOOP;
            /* FIN LOG de arrays asociativos */
        END IF;
        /* FIN - LOG de parametros iniciales*/

        /* #### Inicializar los cursores #### */
        OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

        /* Limpiar tabla temporaria */
        DELETE SAPR_GTT_TAUXILIAR;
        COMMIT;

        /* Recuperar Formularios - MAEACR */
        srecuperar_formularios(par$cod_formulario     => 'MAEAJP',
                                par$oid_formulario     => var$oid_formulario_maeajp,
                                par$oid_tipo_documento => var$oid_tipo_documento_maeajp,
                                par$des_cod_externo    => var$des_cod_externo_maeajp);
        /* LOG recuperación de formulario  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAEAJP - ' ||  
                                    'var$oid_formulario_maeajp: ' || var$oid_formulario_maeajp ||
                                    ', var$oid_tipo_documento_maeajp: ' || var$oid_tipo_documento_maeajp ||
                                    ', var$des_cod_externo_maeajp: ' || var$des_cod_externo_maeajp,
                                par$cod_identificador   => '');

        /* Recuperar Formularios - MAEANT */
        srecuperar_formularios(par$cod_formulario     => 'MAEAJN',
                                par$oid_formulario     => var$oid_formulario_maeajn,
                                par$oid_tipo_documento => var$oid_tipo_documento_maeajn,
                                par$des_cod_externo    => var$des_cod_externo_maeajn);
        /* LOG recuperación de formulario  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAEAJN - ' ||  
                                    'var$oid_formulario_maeajn: ' || var$oid_formulario_maeajn ||
                                    ', var$oid_tipo_documento_maeajn: ' || var$oid_tipo_documento_maeajn ||
                                    ', var$des_cod_externo_maeajn: ' || var$des_cod_externo_maeajn,
                                par$cod_identificador   => '');

        FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
            BEGIN
                /* Limpiar tabla temporaria */
                DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
                var$adocs_oid.delete;
                var$adocs_oid_formulario.delete;
                var$adocs_fyh_gestion.delete;            
                var$adocs_fyh_contable.delete;
                var$adocs_cod_actual.delete;
                var$acndoc_collection_id.delete;

                var$adocs_cod_externo.delete;
                var$adocs_oid_cuenta_ori.delete;
                var$adocs_oid_cuenta_des.delete;
                var$adocs_oid_cuentasaldo_ori.delete;
                var$adocs_oid_cuentasaldo_des.delete;
                var$adocs_oid_sector_ori.delete;
                var$adocs_oid_sector_des.delete;
                var$aefdoc_oid_documento.delete;
                var$aefdoc_oid_divisa.delete;
                var$aefdoc_oid_denominacion.delete;
                var$aefdoc_oid_unid_medida.delete;
                var$aefdoc_cod_niv_detalle.delete;
                var$aefdoc_cod_tp_efec_tot.delete;
                var$aefdoc_oid_calidad.delete;
                var$aefdoc_num_importe.delete;
                var$aefdoc_nel_cantidad.delete;
                var$avtdoc_oid_documento.delete;
                var$avtdoc_oid_termino.delete;
                var$avtdoc_des_valor.delete;

                var$nel_secuencia_n := 0;
                var$nel_secuencia_p := 0;  
                FOR idxC IN par$acndoc_nel_index.first .. par$acndoc_nel_index.last LOOP     

                    var$auxt_oid_termino.delete;
                    var$auxt_des_valor.delete;


                    var$auxp_oid_divisa.delete;  
                    var$auxp_oid_denominacion.delete;  
                    var$auxp_oid_unid_medida.delete;  
                    var$auxp_cod_niv_detalle.delete;  
                    var$auxp_cod_tp_efec_tot.delete;  
                    var$auxp_oid_calidad.delete;  
                    var$auxp_num_importe.delete;
                    var$auxp_nel_cantidad.delete;

                    var$auxn_oid_divisa.delete;
                    var$auxn_oid_denominacion.delete;
                    var$auxn_oid_unid_medida.delete;
                    var$auxn_cod_niv_detalle.delete;
                    var$auxn_cod_tp_efec_tot.delete;
                    var$auxn_oid_calidad.delete;
                    var$auxn_num_importe.delete;
                    var$auxn_nel_cantidad.delete;

                    IF par$acndoc_nel_index(idxC) = par$anel_index(idx) THEN
                        var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);
                        /* Procedure responsable por validaciones del documento */
                        svalidar_mov_ajuste(par$oid_llamada             => par$oid_llamada,
                                            par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                            par$nel_index               => par$anel_index(idx),
                                            par$cod_device_id           => par$acod_device_id(idx),
                                            par$cod_cliente             => par$acod_cliente(idx),
                                            par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                            par$cod_punto_servicio      => par$acod_punto_servicio(idx),
                                            par$cod_canal               => par$acndoc_cod_canal(idxC),
                                            par$cod_sub_canal           => par$acndoc_cod_sub_canal(idxC),
                                            par$oid_cuenta_ajuste_p     => var$oid_cuenta_ajuste_p,
                                            par$oid_cuenta_ajuste_p_sf  => var$oid_cuenta_ajuste_p_sf,
                                            par$oid_cuenta_ajuste_n     => var$oid_cuenta_ajuste_n,
                                            par$oid_cuenta_ajuste_n_sf  => var$oid_cuenta_ajuste_n_sf,
                                            par$oid_sector_mae          => var$oid_sector_mae,
                                            par$cod_cultura             => par$cod_cultura,
                                            par$cod_usuario             => par$cod_usuario,
                                            par$cod_pais                => par$cod_pais);
                        /* LOG de validación  */
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'svalidar_mov_ajuste con parametros:' ||
                                    ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                    ', par$nel_index: ' || par$anel_index(idx) ||
                                    ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                    ', par$cod_cliente: ' || par$acod_cliente(idx) ||
                                    ', par$cod_sub_cliente: ' || par$acod_sub_cliente(idx) ||
                                    ', par$cod_punto_servicio: ' || par$acod_punto_servicio(idx) ||
                                    ', par$cod_canal: ' || par$acndoc_cod_canal(idxC) ||
                                    ', par$cod_sub_canal: ' || par$acndoc_cod_sub_canal(idxC) ||
                                    ', par$oid_cuenta_ajuste_p: ' || var$oid_cuenta_ajuste_p ||
                                    ', par$oid_cuenta_ajuste_p_sf: ' || var$oid_cuenta_ajuste_p_sf ||
                                    ', par$oid_cuenta_ajuste_n: ' || var$oid_cuenta_ajuste_n ||
                                    ', par$oid_cuenta_ajuste_n_sf: ' || var$oid_cuenta_ajuste_n_sf ||
                                    ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                    ', par$cod_cultura: ' || par$cod_cultura ||
                                    ', par$cod_usuario: ' || par$cod_usuario ||
                                    ', par$cod_pais: ' || par$cod_pais,
                                par$cod_identificador   => '');

                        /* LOG de validación  */
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'svalidar_actual_id con parametros:' ||
                                    ' par$nel_index: ' || par$anel_index(idx) ||
                                    ', par$fyh_gestion: ' || par$afyh_gestion(idx) ||
                                    ', par$cod_actual_id: ' || par$acod_actual(idx) ||
                                    ', par$cod_cultura: ' || par$cod_cultura,
                                par$cod_identificador   => '');

                        svalidar_actual_id(par$oid_llamada             => par$oid_llamada,
                                        par$nel_index       => par$anel_index(idx),
                                        par$fyh_gestion      => par$afyh_gestion(idx),                                   
                                        par$cod_actual_id    => par$acod_actual(idx),                                 
                                        par$cod_cultura      => par$cod_cultura);                       

                        /* Valores Peticion */
                        FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                            IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_det_index(idxt) = par$acndoc_det_index(idxC) THEN

                                IF par$aefdoc_num_importe(idxt) >= 0 THEN

                                    svalidar_valores(par$oid_llamada             => par$oid_llamada,
                                            par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                            par$nel_index                 => par$anel_index(idx),
                                            par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                            par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                            par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                            par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                            par$saida_oid_divisa          => var$auxp_oid_divisa(var$auxp_oid_divisa.COUNT),
                                            par$saida_oid_denominacio     => var$auxp_oid_denominacion(var$auxp_oid_denominacion.COUNT),
                                            par$saida_oid_unid_medida     => var$auxp_oid_unid_medida(var$auxp_oid_unid_medida.COUNT),
                                            par$saida_cod_niv_detalle     => var$auxp_cod_niv_detalle(var$auxp_cod_niv_detalle.COUNT),
                                            par$saida_cod_tp_efec_tot     => var$auxp_cod_tp_efec_tot(var$auxp_cod_tp_efec_tot.COUNT),
                                            par$saida_oid_calidad         => var$auxp_oid_calidad(var$auxp_oid_calidad.COUNT),
                                            par$saida_num_importe         => var$auxp_num_importe(var$auxp_num_importe.COUNT),
                                            par$saida_nel_cantidad        => var$auxp_nel_cantidad(var$auxp_nel_cantidad.COUNT),
                                            par$cod_cultura               => par$cod_cultura);

                                    /* LOG validar valores  */
                                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Validación de valores con par$aefdoc_num_importe(idxt) >= 0 de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                            'svalidar_valores con parametros:' ||
                                            ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                            ', par$anel_index: ' || par$anel_index(idx) ||
                                            ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                            ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) ||
                                            ', par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) ||
                                            ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                            ', par$saida_oid_divisa: ' || var$auxp_oid_divisa(var$auxp_oid_divisa.COUNT - 1) ||
                                            ', par$saida_oid_denominacio: ' || var$auxp_oid_denominacion(var$auxp_oid_denominacion.COUNT - 1) ||
                                            ', par$saida_oid_unid_medida: ' || var$auxp_oid_unid_medida(var$auxp_oid_unid_medida.COUNT - 1) ||
                                            ', par$saida_cod_niv_detalle: ' || var$auxp_cod_niv_detalle(var$auxp_cod_niv_detalle.COUNT - 1) ||
                                            ', par$saida_cod_tp_efec_tot: ' || var$auxp_cod_tp_efec_tot(var$auxp_cod_tp_efec_tot.COUNT - 1) ||
                                            ', par$saida_oid_calidad: ' || var$auxp_oid_calidad(var$auxp_oid_calidad.COUNT - 1) ||
                                            ', par$saida_num_importe: ' || var$auxp_num_importe(var$auxp_num_importe.COUNT - 1) ||
                                            ', par$saida_nel_cantidad: ' || var$auxp_nel_cantidad(var$auxp_nel_cantidad.COUNT - 1) ||
                                            ', par$cod_cultura: ' || par$cod_cultura 
                                            ,
                                        par$cod_identificador   => '');
                                ELSE 
                                    svalidar_valores(par$oid_llamada             => par$oid_llamada,
                                            par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                            par$nel_index                 => par$anel_index(idx),
                                            par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                            par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                            par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                            par$entrada_num_importe       => ABS(par$aefdoc_num_importe(idxt)),
                                            par$saida_oid_divisa          => var$auxn_oid_divisa(var$auxn_oid_divisa.COUNT),
                                            par$saida_oid_denominacio     => var$auxn_oid_denominacion(var$auxn_oid_denominacion.COUNT),
                                            par$saida_oid_unid_medida     => var$auxn_oid_unid_medida(var$auxn_oid_unid_medida.COUNT),
                                            par$saida_cod_niv_detalle     => var$auxn_cod_niv_detalle(var$auxn_cod_niv_detalle.COUNT),
                                            par$saida_cod_tp_efec_tot     => var$auxn_cod_tp_efec_tot(var$auxn_cod_tp_efec_tot.COUNT),
                                            par$saida_oid_calidad         => var$auxn_oid_calidad(var$auxn_oid_calidad.COUNT),
                                            par$saida_num_importe         => var$auxn_num_importe(var$auxn_num_importe.COUNT),
                                            par$saida_nel_cantidad        => var$auxn_nel_cantidad(var$auxn_nel_cantidad.COUNT),
                                            par$cod_cultura               => par$cod_cultura); 

                                    /* LOG validar valores  */
                                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Validación de valores con par$aefdoc_num_importe(idxt) < 0 de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                            'svalidar_valores con parametros:' ||
                                            ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                            ', par$anel_index: ' || par$anel_index(idx) ||
                                            ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                            ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) ||
                                            ', par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) ||
                                            ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                            ', par$saida_oid_divisa: ' || var$auxn_oid_divisa(var$auxn_oid_divisa.COUNT - 1) ||
                                            ', par$saida_oid_denominacio: ' || var$auxn_oid_denominacion(var$auxn_oid_denominacion.COUNT - 1) ||
                                            ', par$saida_oid_unid_medida: ' || var$auxn_oid_unid_medida(var$auxn_oid_unid_medida.COUNT - 1) ||
                                            ', par$saida_cod_niv_detalle: ' || var$auxn_cod_niv_detalle(var$auxn_cod_niv_detalle.COUNT - 1) ||
                                            ', par$saida_cod_tp_efec_tot: ' || var$auxn_cod_tp_efec_tot(var$auxn_cod_tp_efec_tot.COUNT - 1) ||
                                            ', par$saida_oid_calidad: ' || var$auxn_oid_calidad(var$auxn_oid_calidad.COUNT - 1) ||
                                            ', par$saida_num_importe: ' || var$auxn_num_importe(var$auxn_num_importe.COUNT - 1) ||
                                            ', par$saida_nel_cantidad: ' || var$auxn_nel_cantidad(var$auxn_nel_cantidad.COUNT - 1) ||
                                            ', par$cod_cultura: ' || par$cod_cultura 
                                            ,
                                        par$cod_identificador   => '');
                                END IF;
                            END IF;
                        END LOOP;


                        /*INSERT MOVIMIENTO VALORES POSITIVOS*/
                        IF  var$auxp_oid_divisa IS NOT NULL AND  var$auxp_oid_divisa.COUNT > 0 THEN
                            /* LOG valores positivos */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Comienza tratamiento de valores positivos (var$auxp_oid_divisa IS NOT NULL AND var$auxp_oid_divisa.COUNT > 0) de movimiento de indice ('|| par$anel_index(idx) ||')',
                                par$cod_identificador   => '');


                            /* CREAR MAEAJP */   
                            IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                                /* LOG de validación  */
                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Creación de formulario MAEAJP de movimiento de indice (' || par$anel_index(idx) || ')',
                                    par$cod_identificador   => 'MAEAJP');

                                
                                /* Validar fecha gestion */
                                var$fyh_gestion      := par$afyh_gestion(idx);

                                svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                    par$nel_index        => par$anel_index(idx),
                                    par$oid_sector_mae   => var$oid_sector_mae,
                                    par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                    par$fyh_gestion      => var$fyh_gestion,
                                    par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                    par$cod_cultura      => par$cod_cultura);
                                
                                /* LOG de validación  */
                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                            'svalidar_fecha de gestion con parametros:' ||
                                            ' par$nel_index: ' || par$anel_index(idx) ||
                                            ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                            ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                            ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                            ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                            ', par$cod_cultura: ' || par$cod_cultura,
                                        par$cod_identificador   => 'MAEAJP');

                                    /* Validar fecha contable */
                                    IF par$afyh_contable(idx) IS NULL THEN
                                        var$fyh_contable      := par$afyh_gestion(idx);                            
                                    ELSE
                                        var$fyh_contable      := par$afyh_contable(idx);                          
                                    END IF;

                                    svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                        par$nel_index        => par$anel_index(idx),
                                        par$oid_sector_mae   => var$oid_sector_mae,
                                        par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                        par$fyh_gestion      => var$fyh_contable,
                                        par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                                        par$cod_cultura      => par$cod_cultura);     

                                    /* LOG de validación  */
                                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                              'svalidar_fecha contable con parametros:' ||
                                              ' par$nel_index: ' || par$anel_index(idx) ||
                                              ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                              ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                              ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                                              ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                              ', par$cod_cultura: ' || par$cod_cultura,
                                          par$cod_identificador   => 'MAEAJP');


                                    /* Validar Codigo externo */
                                    /* LOG de validación  */
                                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                            'fvalidar_codigo_externo con parametros:' ||
                                            ' par$nel_index: ' ||  par$anel_index(idx) ||
                                            ', par$des_cod_externo: ' || var$des_cod_externo_maeajp ||
                                            ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                            ', par$fyh_gestion: ' || var$fyh_gestion ||
                                            ', par$cod_precinto: ' || NULL ||
                                            ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                            ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                                            ', par$cod_cultura: ' || par$cod_cultura,
                                        par$cod_identificador   => 'MAEAJP');
                                    IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maeajp, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                                        /* LOG de validación  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                                'fvalidar_codigo_externo',
                                            par$cod_identificador   => 'MAEAJP');

                                        var$oid_documento := sys_guid();
                                        var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                                        var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maeajp;
                                        var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maeajp;
                                        var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                                        var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                                        var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_ajuste_p;
                                        var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_ajuste_p;
                                        var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_ajuste_p;
                                        var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_ajuste_p;
                                        var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                                        var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;


                                        var$adocs_cod_actual(var$adocs_cod_actual.COUNT) := par$acod_actual(idx);
                                        /* Formulario y Codigo Externo */
                                        var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maeajp,
                                                                                                            par$cod_device_id       => par$acod_device_id(idx),
                                                                                                            par$fyh_gestion         => var$fyh_gestion,
                                                                                                            par$cod_precinto        => NULL,
                                                                                                            par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                            par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                            par$nel_sumar_secuencia => var$nel_secuencia_p);
                                       

                                       
                                        /* LOG de código externo  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                        par$des_version     => const$version,                            
                                                        par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                            'fcargar_codigo_externo:' || 
                                                            ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                                            ,
                                                        par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                         var$nel_secuencia_p := var$nel_secuencia_p + 1;
                                        /* Campos Adcionales */
                                        IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                                            FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                                                IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                                                    par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                                                    par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                                                    svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                                        par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                                        par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                                        par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                                        par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                                        par$cod_usuario         => par$cod_usuario,
                                                                        par$cod_cultura         => par$cod_cultura);
                                                    /* LOG validar términos  */
                                                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                        par$des_version     => const$version,                            
                                                        par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                            'svalidar_terminos con parametros:' ||
                                                            ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                            ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                            ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                            ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                                            ,
                                                        par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                                END IF;
                                            END LOOP;
                                        END IF;


                                        IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                                            /* Campos Adcionales */
                                            IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                                                FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                                    var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                                    var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                                    var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                                END LOOP;
                                            END IF;

                                            /* Valores */
                                            IF var$auxp_oid_divisa IS NOT NULL AND var$auxp_oid_divisa.COUNT > 0 THEN
                                                FOR idxt IN var$auxp_oid_divisa.first .. var$auxp_oid_divisa.last LOOP

                                                    var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                                    var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxp_oid_divisa(idxt);
                                                    var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxp_oid_denominacion(idxt);
                                                    var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxp_oid_unid_medida(idxt);
                                                    var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxp_cod_niv_detalle(idxt);
                                                    var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxp_cod_tp_efec_tot(idxt);
                                                    var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxp_oid_calidad(idxt);
                                                    var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxp_num_importe(idxt);
                                                    var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxp_nel_cantidad(idxt);

                                                END LOOP;
                                            END IF;                  
                                        END IF;
                                    /* FIN CREAR MAEAJP */  

                                    /* CREAR MAEAJN */                           
                                    IF (NOT fhay_error(par$nel_index => par$anel_index(idx))) AND par$anel_saldo_fisico(idx) = 1 THEN
                                        /* LOG de validación  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Creación de formulario MAEAJN de movimiento de indice ('|| par$anel_index(idx) ||')',
                                            par$cod_identificador   => 'MAEAJN');

                                        /* Validar fecha gestion */
                                        var$fyh_gestion      := par$afyh_gestion(idx);
                                        svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                                par$nel_index        => par$anel_index(idx),
                                                par$oid_sector_mae   => var$oid_sector_mae,
                                                par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                                par$fyh_gestion      => var$fyh_gestion,
                                                par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                                par$cod_cultura      => par$cod_cultura);
                                        /* LOG de validación  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                par$des_version     => const$version,                            
                                                par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                    'svalidar_fecha de gestion con parametros:' ||
                                                    ' par$nel_index: ' || par$anel_index(idx) ||
                                                    ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                                    ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                                    ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                                    ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                                    ', par$cod_cultura: ' || par$cod_cultura,
                                                par$cod_identificador   => 'MAEAJN');

                                        /* Validar Codigo externo */
                                        /* LOG de validación  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                                'fvalidar_codigo_externo con parametros:' ||
                                                ' par$nel_index: ' ||  par$anel_index(idx) ||
                                                ', par$des_cod_externo: ' || var$des_cod_externo_maeajn ||
                                                ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                                ', par$fyh_gestion: ' || var$fyh_gestion ||
                                                ', par$cod_precinto: ' || NULL ||
                                                ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                                ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                                                ', par$cod_cultura: ' || par$cod_cultura,
                                            par$cod_identificador   => 'MAEAJN');
                                        IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maeajn, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                                            /* LOG de validación  */
                                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                par$des_version     => const$version,                            
                                                par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                                    'fvalidar_codigo_externo',
                                                par$cod_identificador   => 'MAEAJN');

                                            var$oid_documento := sys_guid();
                                            var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                                            var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maeajn;
                                            var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maeajn;
                                            var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                                            var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                                            var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_ajuste_n_sf;
                                            var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_ajuste_n_sf;
                                            var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_ajuste_n_sf;
                                            var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_ajuste_n_sf;
                                            var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                                            var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;


                                            var$adocs_cod_actual(var$adocs_cod_actual.COUNT) := par$acod_actual(idx);
                                            var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idx);
                                            /* Formulario y Codigo Externo */
                                            var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maeajn,
                                                                                                                par$cod_device_id       => par$acod_device_id(idx),
                                                                                                                par$fyh_gestion         => var$fyh_gestion,
                                                                                                                par$cod_precinto        => NULL,
                                                                                                                par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                                par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                                par$nel_sumar_secuencia => var$nel_secuencia_n);
                                             /* LOG de código externo  */
                                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                        par$des_version     => const$version,                            
                                                        par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                            'fcargar_codigo_externo:' || 
                                                            ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                                            ,
                                                        par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));


                                                var$nel_secuencia_n := var$nel_secuencia_n + 1 ;                                                                            

                                            /* Campos Adcionales */
                                            IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                                                FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                                                    IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                                                        par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                                                        par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                                                        svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                                            par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                                            par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                                            par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                                            par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                                            par$cod_usuario         => par$cod_usuario,
                                                                            par$cod_cultura         => par$cod_cultura);

                                                        /* LOG validar términos  */
                                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                            par$des_version     => const$version,                            
                                                            par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                                'svalidar_terminos con parametros:' ||
                                                                ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                                ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                                ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                                ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                                                ,
                                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                                    END IF;
                                                END LOOP;
                                            END IF;


                                            IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                                                /* Campos Adcionales */
                                                IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                                                FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                                    var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                                    var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                                    var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                                END LOOP;
                                                END IF;

                                                /* Valores */
                                                IF var$auxp_oid_divisa IS NOT NULL AND var$auxp_oid_divisa.COUNT > 0 THEN
                                                FOR idxt IN var$auxp_oid_divisa.first .. var$auxp_oid_divisa.last LOOP

                                                    var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                                    var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxp_oid_divisa(idxt);
                                                    var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxp_oid_denominacion(idxt);
                                                    var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxp_oid_unid_medida(idxt);
                                                    var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxp_cod_niv_detalle(idxt);
                                                    var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxp_cod_tp_efec_tot(idxt);
                                                    var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxp_oid_calidad(idxt);
                                                    var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxp_num_importe(idxt);
                                                    var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxp_nel_cantidad(idxt);

                                                END LOOP;
                                                END IF;                  
                                            END IF;

                                            END IF;
                                    END IF;

                                    END IF;
                            END IF;
                        END IF;

                        /*INSERT MOVIMIENTO VALORES NEGATIVO*/
                        IF  var$auxn_oid_divisa IS NOT NULL AND  var$auxn_oid_divisa.COUNT > 0 THEN
                            /* LOG valores negativos */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Comienza tratamiento de valores negativos (var$auxn_oid_divisa IS NOT NULL AND var$auxn_oid_divisa.COUNT > 0) de movimiento de indice ('|| par$anel_index(idx) ||')',
                                par$cod_identificador   => '');

                            /* CREAR MAEAJN */   
                            IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                                /* LOG de validación  */
                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Creación de formulario MAEAJN de movimiento de indice ('|| par$anel_index(idx) ||')',
                                    par$cod_identificador   => 'MAEAJN');
                                
                                /* Validar fecha gestion */
                                var$fyh_gestion      := par$afyh_gestion(idx);
                               
                                svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                    par$nel_index   => par$anel_index(idx),
                                    par$oid_sector_mae   => var$oid_sector_mae,
                                    par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                    par$fyh_gestion      => var$fyh_gestion,
                                    par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                    par$cod_cultura      => par$cod_cultura);
                                
                                /* LOG de validación  */
                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                            'svalidar_fecha de gestion con parametros:' ||
                                            ' par$nel_index: ' || par$anel_index(idx) ||
                                            ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                            ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                            ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                            ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                            ', par$cod_cultura: ' || par$cod_cultura,
                                        par$cod_identificador   => 'MAEAJN');

                                /* Validar Codigo externo */
                                /* LOG de validación  */
                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                    par$des_version     => const$version,                            
                                    par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                        'fvalidar_codigo_externo con parametros:' ||
                                        ' par$nel_index: ' ||  par$anel_index(idx) ||
                                        ', par$des_cod_externo: ' || var$des_cod_externo_maeajn ||
                                        ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                        ', par$fyh_gestion: ' || var$fyh_gestion ||
                                        ', par$cod_precinto: ' || NULL ||
                                        ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                        ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                                        ', par$cod_cultura: ' || par$cod_cultura,
                                    par$cod_identificador   => 'MAEAJN');

                                IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maeajn, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                                    /* LOG de validación  */
                                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                            'fvalidar_codigo_externo',
                                        par$cod_identificador   => 'MAEAJN');

                                    var$oid_documento := sys_guid();
                                    var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                                    var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maeajn;
                                    var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maeajn;
                                    var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;                                
                                    var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;                                
                                    var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_ajuste_n;
                                    var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_ajuste_n;
                                    var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_ajuste_n;
                                    var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_ajuste_n;
                                    var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                                    var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;


                                    var$adocs_cod_actual(var$adocs_cod_actual.COUNT) := par$acod_actual(idx);
                                    var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idx);
                                    /* Formulario y Codigo Externo */
                                    var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maeajn,
                                                                                                        par$cod_device_id       => par$acod_device_id(idx),
                                                                                                        par$fyh_gestion         => var$fyh_gestion,
                                                                                                        par$cod_precinto        => NULL,
                                                                                                        par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                        par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                        par$nel_sumar_secuencia => var$nel_secuencia_n);
                                     /* LOG de código externo  */
                                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                        par$des_version     => const$version,                            
                                                        par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                            'fcargar_codigo_externo:' || 
                                                            ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                                            ,
                                                        par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                                    var$nel_secuencia_n := var$nel_secuencia_n + 1 ;                                                                              

                                    /* Campos Adcionales */
                                    IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                                        FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                                            IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                                                par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                                                par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                                                svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                                    par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                                    par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                                    par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                                    par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                                    par$cod_usuario         => par$cod_usuario,
                                                                    par$cod_cultura         => par$cod_cultura);
                                                /* LOG validar términos  */
                                                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                    par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                    par$des_version     => const$version,                            
                                                    par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                        'svalidar_terminos con parametros:' ||
                                                        ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                        ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                        ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                        ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                                        ,
                                                    par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                            END IF;
                                        END LOOP;
                                    END IF;


                                    IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                                        /* Campos Adcionales */
                                        IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                                            FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                            var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                            var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                            var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                            END LOOP;
                                        END IF;

                                        /* Valores */
                                        IF var$auxn_oid_divisa IS NOT NULL AND var$auxn_oid_divisa.COUNT > 0 THEN
                                            FOR idxt IN var$auxn_oid_divisa.first .. var$auxn_oid_divisa.last LOOP

                                            var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                            var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxn_oid_divisa(idxt);
                                            var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxn_oid_denominacion(idxt);
                                            var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxn_oid_unid_medida(idxt);
                                            var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxn_cod_niv_detalle(idxt);
                                            var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxn_cod_tp_efec_tot(idxt);
                                            var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxn_oid_calidad(idxt);
                                            var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxn_num_importe(idxt);
                                            var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxn_nel_cantidad(idxt);

                                            END LOOP;
                                        END IF;                  
                                    END IF;
                                    /* FIN CREAR MAEAJN */  

                                    /* CREAR MAEAJP */                           
                                    IF (NOT fhay_error(par$nel_index => par$anel_index(idx)))  AND par$anel_saldo_fisico(idx) = 1 THEN
                                        /* LOG de validación  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Creación de formulario MAEAJP de movimiento de indice ('|| par$anel_index(idx) ||')',
                                            par$cod_identificador   => 'MAEAJP');

                                        /* Validar fecha gestion */
                                        var$fyh_gestion      := par$afyh_gestion(idx);
                                        svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                                par$nel_index        => par$anel_index(idx),
                                                par$oid_sector_mae   => var$oid_sector_mae,
                                                par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                                par$fyh_gestion      => var$fyh_gestion,
                                                par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                                par$cod_cultura      => par$cod_cultura);
                                        
                                        /* LOG de validación  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                par$des_version     => const$version,                            
                                                par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                    'svalidar_fecha de gestion con parametros:' ||
                                                    ' par$nel_index: ' || par$anel_index(idx) ||
                                                    ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                                    ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                                    ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                                    ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                                    ', par$cod_cultura: ' || par$cod_cultura,
                                                par$cod_identificador   => 'MAEAJP');

                                        /* Validar Codigo externo */
                                        /* LOG de validación  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                                'fvalidar_codigo_externo con parametros:' ||
                                                ' par$nel_index: ' ||  par$anel_index(idx) ||
                                                ', par$des_cod_externo: ' || var$des_cod_externo_maeajp ||
                                                ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                                ', par$fyh_gestion: ' || var$fyh_gestion ||
                                                ', par$cod_precinto: ' || NULL ||
                                                ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                                ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                                                ', par$cod_cultura: ' || par$cod_cultura,
                                            par$cod_identificador   => 'MAEAJP');

                                        IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maeajp, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                                            /* LOG de validación  */
                                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                par$des_version     => const$version,                            
                                                par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                                    'fvalidar_codigo_externo',
                                                par$cod_identificador   => 'MAEAJP');

                                            var$oid_documento := sys_guid();
                                            var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                                            var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maeajp;
                                            var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maeajp;
                                            var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                                            var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                                            var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_ajuste_p_sf;
                                            var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_ajuste_p_sf;
                                            var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_ajuste_p_sf;
                                            var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_ajuste_p_sf;
                                            var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                                            var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;


                                            var$adocs_cod_actual(var$adocs_cod_actual.COUNT) := par$acod_actual(idx);
                                            var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idx);
                                            /* Formulario y Codigo Externo */
                                            var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maeajp,
                                                                                                                par$cod_device_id       => par$acod_device_id(idx),
                                                                                                                par$fyh_gestion         => var$fyh_gestion,
                                                                                                                par$cod_precinto        => NULL,
                                                                                                                par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                                par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                                par$nel_sumar_secuencia => var$nel_secuencia_p);
                                             /* LOG de código externo  */
                                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                        par$des_version     => const$version,                            
                                                        par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                            'fcargar_codigo_externo:' || 
                                                            ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                                            ,
                                                        par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                                            var$nel_secuencia_p := var$nel_secuencia_p + 1 ;                                                                              

                                            /* Campos Adcionales */
                                            IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                                                FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                                                    IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                                                        par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                                                        par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                                                        svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                                            par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                                            par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                                            par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                                            par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                                            par$cod_usuario         => par$cod_usuario,
                                                                            par$cod_cultura         => par$cod_cultura);
                                                        /* LOG validar términos  */
                                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                            par$des_version     => const$version,                            
                                                            par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                                'svalidar_terminos con parametros:' ||
                                                                ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                                ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                                ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                                ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                                                ,
                                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                                    END IF;
                                                END LOOP;
                                            END IF;                                     

                                            IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                                                /* Campos Adcionales */
                                                IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                                                    FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                                        var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                                        var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                                        var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                                    END LOOP;
                                                END IF;

                                                /* Valores */
                                                IF var$auxn_oid_divisa IS NOT NULL AND var$auxn_oid_divisa.COUNT > 0 THEN
                                                    FOR idxt IN var$auxn_oid_divisa.first .. var$auxn_oid_divisa.last LOOP

                                                        var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                                        var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$auxn_oid_divisa(idxt);
                                                        var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$auxn_oid_denominacion(idxt);
                                                        var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$auxn_oid_unid_medida(idxt);
                                                        var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$auxn_cod_niv_detalle(idxt);
                                                        var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$auxn_cod_tp_efec_tot(idxt);
                                                        var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$auxn_oid_calidad(idxt);
                                                        var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$auxn_num_importe(idxt);
                                                        var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$auxn_nel_cantidad(idxt);

                                                    END LOOP;
                                                END IF;                  
                                            END IF;
                                        END IF;
                                    END IF;
                                END IF;
                            END IF;
                        END IF;                      
                    END IF;
                END LOOP; 

                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                    /* INICIO - LOG de sguardar_documento*/
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                        par$cod_identificador   => '');

                    /* Grabar documentos */
                    sguardar_documento(par$oid_llamada             => par$oid_llamada,
                                        par$adocs_oid                 => var$adocs_oid,
                                        par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                        par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                        par$adocs_fyh_gestion         => var$adocs_fyh_gestion,                                       
                                        par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                        par$adocs_cod_actual_id       => var$adocs_cod_actual,
                                        par$adocs_cod_collection_id   => var$acndoc_collection_id,
                                        par$adocs_cod_externo         => var$adocs_cod_externo,
                                        par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                        par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                        par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                        par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                        par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                        par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                        par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                        par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                        par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                        par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                        par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                        par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                        par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                        par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                        par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                        par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                        par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                        par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                        par$cod_usuario               => par$cod_usuario,
                                        par$cod_cultura               => par$cod_cultura,
                                        par$cod_ejecucion             => par$cod_ejecucion,
                                        par$nel_index                 => par$anel_index(idx));

                    /* FIN - LOG - parametros sguardar_documento*/
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                        par$cod_identificador   => '');

                    INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                    VALUES (par$anel_index(idx), '0040120000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040120000', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                                        gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');
                    COMMIT;


                END IF;

            EXCEPTION
                WHEN OTHERS THEN
                ROLLBACK;
                var$err := gepr_putilidades_###VERSION###.fformat_error;
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                        VALUES (par$anel_index(idx), '3040120001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                                gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 'VALIDACIONES');

                /* LOG ROLLBACK  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Se realiza ROLLBACK',
                                        par$cod_identificador   => '');
            END;

        END LOOP;

        /* Validaciones */
        OPEN par$rc_validaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'VALIDACIONES';

        /* Documentos */
        OPEN par$rc_documentos FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

        /* Planificacion */
        OPEN par$rc_planificaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                                var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                                null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
        COMMIT;

      /* ===  Tratar excepciones - Rollback === */
    EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        var$err := gepr_putilidades_###VERSION###.fformat_error;

        var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                        var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                        null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
        /* LOG ROLLBACK  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se realiza ROLLBACK',
                                par$cod_identificador   => '');
    END sgrabar_mov_ajuste;

  /* Validar Movimientos Ajuste */
  PROCEDURE svalidar_mov_ajuste(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_, 
                                par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$oid_cuenta_ajuste_p     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_cuenta_ajuste_p_sf  OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_cuenta_ajuste_n     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_cuenta_ajuste_n_sf  OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS


    var$nel_existe         gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

    /* Validar Cuenta Positivo */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_ajuste_p,
                    par$oid_sector              => par$oid_sector_mae);



    /* Validar Cuenta Positivo Saldo Fisico*/
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldoFisico,
                    par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalSaldoFisico,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_ajuste_p_sf,
                    par$oid_sector              => par$oid_sector_mae);

    /* Validar Cuenta Negativo */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_ajuste_n,
                    par$oid_sector              => par$oid_sector_mae);



    /* Validar Cuenta Negativo Saldo Fisico*/
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldoFisico,
                    par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalSaldoFisico,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_ajuste_n_sf,
                    par$oid_sector              => par$oid_sector_mae);


  END svalidar_mov_ajuste;
  
  /* Guardar documento */
  PROCEDURE sguardar_documento(par$oid_llamada               IN gepr_pcomon_###VERSION###.tipo$oid_,
                               par$adocs_oid                 IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_formulario      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_tipo_documento  IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_fyh_gestion         IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                               par$adocs_fyh_contable        IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                               par$adocs_cod_actual_id       IN gepr_pcomon_###VERSION###.tipo$descs_,
                               par$adocs_cod_collection_id   IN gepr_pcomon_###VERSION###.tipo$descs_,
                               par$adocs_cod_externo         IN gepr_pcomon_###VERSION###.tipo$cods_,
                               par$adocs_oid_cuenta_ori      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_cuenta_des      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_cuentasaldo_ori IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_cuentasaldo_des IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_sector_ori      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$adocs_oid_sector_des      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_oid_documento      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_oid_divisa         IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_oid_denominacion   IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_oid_unid_medida    IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_cod_niv_detalle    IN gepr_pcomon_###VERSION###.tipo$cods_,
                               par$aefdoc_cod_tp_efec_tot    IN gepr_pcomon_###VERSION###.tipo$cods_,
                               par$aefdoc_oid_calidad        IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$aefdoc_num_importe        IN gepr_pcomon_###VERSION###.tipo$imps_,
                               par$aefdoc_nel_cantidad       IN gepr_pcomon_###VERSION###.tipo$nels_,
                               par$avtdoc_oid_documento      IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$avtdoc_oid_termino        IN gepr_pcomon_###VERSION###.tipo$oids_,
                               par$avtdoc_des_valor          IN gepr_pcomon_###VERSION###.tipo$descs_,
                               par$cod_usuario               IN gepr_pcomon_###VERSION###.tipo$usr_,
                               par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_,
                               par$cod_ejecucion             OUT gepr_pcomon_###VERSION###.tipo$nel_,
                               par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_) IS

      var$inserts              gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates              gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes              gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects              gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$info_ejecucion       gepr_pcomon_###VERSION###.tipo$desc_;
      var$cod_estado_documento gepr_pcomon_###VERSION###.tipo$cod_ := gepr_pcomon_###VERSION###.const$CodEstadoDocEnCurso;
      var$cod_comprobante      gepr_pcomon_###VERSION###.tipo$cod_ := '';
      var$rowver               gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$esnuevo              BOOLEAN := true;
      const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.sguardar_documento';
      var$existe               gepr_pcomon_###VERSION###.tipo$nel_ := 0;


    BEGIN

      IF NOT gepr_putilidades_###VERSION###.farray_vacio_oid(par$adocs_oid) THEN
        /* Grabar documento */
        FOR idx IN par$adocs_oid.first .. par$adocs_oid.last LOOP
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CALIFICADOR)
               VALUES (par$nel_index, par$adocs_cod_externo(idx), 'CODIGO_EXTERNO');

          /* LOG */
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
              par$des_origen      => const$des_origen,
              par$des_version     => const$version,                            
              par$des_detalle     => 'Previo a procedure supd_tdocumento',
              par$cod_identificador   => '');

          sapr_pdocumento_###VERSION###.supd_tdocumento(par$oid_documento            => par$adocs_oid(idx),
                                               par$oid_formulario           => par$adocs_oid_formulario(idx),
                                               par$oid_cuenta_origen        => par$adocs_oid_cuenta_ori(idx),
                                               par$oid_cuenta_destino       => par$adocs_oid_cuenta_des(idx),
                                               par$oid_cuenta_saldo_origen  => par$adocs_oid_cuentasaldo_ori(idx),
                                               par$oid_cuenta_saldo_destino => par$adocs_oid_cuentasaldo_des(idx),
                                               par$oid_documento_padre      => '',
                                               par$oid_documento_sustituto  => '',
                                               par$oid_tipo_documento       => par$adocs_oid_tipo_documento(idx),
                                               par$oid_sector_origen        => par$adocs_oid_sector_ori(idx),
                                               par$oid_sector_destino       => par$adocs_oid_sector_des(idx),
                                               par$oid_grupo_documento      => '',
                                               par$oid_movimentacion_fondo  => '',
                                               par$fyh_plan_certificacion   => par$adocs_fyh_gestion(idx),
                                               par$fyh_gestion              => par$adocs_fyh_gestion(idx),
                                               par$fyh_contable             => par$adocs_fyh_contable(idx),
                                               par$cod_externo              => par$adocs_cod_externo(idx),
                                               par$cod_estado               => var$cod_estado_documento,
                                               par$usuario                  => par$cod_usuario,
                                               par$cod_cultura              => par$cod_cultura,
                                               par$rowver                   => NULL,
                                               par$esnuevo                  => var$esnuevo,
                                               par$inserts                  => var$inserts,
                                               par$updates                  => var$updates,
                                               par$cod_actual_id            => par$adocs_cod_actual_id(idx),
                                               par$cod_collection_id        => par$adocs_cod_collection_id(idx)
                                               );
          /* LOG */
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
              par$des_origen      => const$des_origen,
              par$des_version     => const$version,                            
              par$des_detalle     => 'Previo a procedure sins_thist_mov_documento',
              par$cod_identificador   => '');
          /* Grabar historico del documento */
          sapr_pdocumento_###VERSION###.sins_thist_mov_documento(par$oid_documento => par$adocs_oid(idx),
                                                        par$cod_estado    => var$cod_estado_documento,
                                                        par$usuario       => par$cod_usuario,
                                                        par$inserts       => var$inserts);

          IF (par$adocs_cod_actual_id(idx) IS NOT NULL ) THEN

              BEGIN
                /* LOG */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                    par$des_origen      => const$des_origen,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Previo a procedure sgrabar_integracion_documento',
                    par$cod_identificador   => '');
                sapr_pdocumento_###VERSION###.sgrabar_integracion_documento(
                                  par$oid_llamada => par$oid_llamada,
                                  par$oid_documento   => par$adocs_oid(idx),                         
                                  par$cod_usuario             => par$cod_usuario);

              EXCEPTION
                WHEN OTHERS THEN
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                  par$des_origen      => const$des_origen,
                  par$des_version     => const$version,                            
                  par$des_detalle     => 'Ocurre excepción en sapr_pdocumento_###VERSION###.sgrabar_integracion_documento: ' || sqlerrm ,
                  par$cod_identificador   => '');
              END;
              
          END IF;

      END LOOP;

      /* Grabar los efectivos del documento */
      IF NOT gepr_putilidades_###VERSION###.farray_vacio_oid(par$aefdoc_oid_divisa) THEN
        /* LOG */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Grabar los efectivos del documento',
            par$cod_identificador   => '');

        FOR idx IN par$aefdoc_oid_divisa.first .. par$aefdoc_oid_divisa.last LOOP

          IF par$aefdoc_oid_divisa(idx) IS NOT NULL THEN
             /* LOG */
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                par$des_origen      => const$des_origen,
                par$des_version     => const$version,                            
                par$des_detalle     => 'Previo a procedure sins_tefectivoxdocumento para oid_divisa' || par$aefdoc_oid_divisa(idx),
                par$cod_identificador   => '');
            sapr_pdocumento_###VERSION###.sins_tefectivoxdocumento(par$oid_documento     => par$aefdoc_oid_documento(idx),
                                                          par$oid_divisa        => par$aefdoc_oid_divisa(idx),
                                                          par$oid_denominacion  => par$aefdoc_oid_denominacion(idx),
                                                          par$oid_unidad_medida => par$aefdoc_oid_unid_medida(idx),
                                                          par$cod_nivel_detalle => par$aefdoc_cod_niv_detalle(idx),
                                                          par$cod_tipo_efec_tot => par$aefdoc_cod_tp_efec_tot(idx),
                                                          par$oid_calidad       => par$aefdoc_oid_calidad(idx),
                                                          par$num_importe       => par$aefdoc_num_importe(idx),
                                                          par$nel_cantidad      => par$aefdoc_nel_cantidad(idx),
                                                          par$usuario           => par$cod_usuario,
                                                          par$inserts           => var$inserts);
          END IF;
        END LOOP;
      END IF;

      /* Grabar los valores de los terminos del documento */
      IF NOT gepr_putilidades_###VERSION###.farray_vacio_oid(par$avtdoc_oid_termino) THEN
        /* LOG */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Grabar los valores de los terminos del documento',
            par$cod_identificador   => '');
        FOR idx IN par$avtdoc_oid_termino.first .. par$avtdoc_oid_termino.last LOOP
          /* LOG */
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
              par$des_origen      => const$des_origen,
              par$des_version     => const$version,                            
              par$des_detalle     => 'Previo a procedure sins_tvalor_terminoxdoc para oid_termino' || par$avtdoc_oid_termino(idx),
              par$cod_identificador   => '');
          sapr_pdocumento_###VERSION###.sins_tvalor_terminoxdoc(par$oid_documento => par$avtdoc_oid_documento(idx),
                                                        par$oid_termino   => par$avtdoc_oid_termino(idx),
                                                        par$des_valor     => par$avtdoc_des_valor(idx),
                                                        par$usuario       => par$cod_usuario,
                                                        par$inserts       => var$inserts);
        END LOOP;
      END IF;

      /* Aceptar Documento */
      FOR idx IN par$adocs_oid.first .. par$adocs_oid.last LOOP

        SELECT ROWVER
          INTO var$rowver
          FROM SAPR_TDOCUMENTO
        WHERE OID_DOCUMENTO = par$adocs_oid(idx);

        var$cod_estado_documento := gepr_pcomon_###VERSION###.const$CodEstadoDocConfirmado;

        /* LOG */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Previo a procedure sejecutar_doc para oid_documento' || par$adocs_oid(idx),
            par$cod_identificador   => '');
        sapr_ptransiciones_###VERSION###.sejecutar_doc(par$oid_llamada => par$oid_llamada,
                                              par$oid_documento        => par$adocs_oid(idx),
                                              par$cod_estado_documento => var$cod_estado_documento,
                                              par$cod_comprobante      => var$cod_comprobante,
                                              par$rowver               => var$rowver,
                                              par$usuario              => par$cod_usuario,
                                              par$cod_cultura          => par$cod_cultura,
                                              par$info_ejecucion       => var$info_ejecucion,
                                              par$hacer_commit         => 0,
                                              par$inserts              => var$inserts,
                                              par$updates              => var$updates,
                                              par$deletes              => var$deletes,
                                              par$selects              => var$selects,
                                              par$cod_ejecucion        => par$cod_ejecucion);
        
      END LOOP;

    END IF;

  END sguardar_documento;

 /* Validar terminos */
   PROCEDURE svalidar_terminos(par$nel_index            IN gepr_pcomon_###VERSION###.tipo$nel_,
                              par$entrada_cod_termino  IN gepr_pcomon_###VERSION###.tipo$cod_,
                              par$entrada_des_valor    IN gepr_pcomon_###VERSION###.tipo$desc_,
                              par$saida_oid_termino   OUT gepr_pcomon_###VERSION###.tipo$oid_,
                              par$saida_des_valor     OUT gepr_pcomon_###VERSION###.tipo$desc_,
                              par$cod_usuario          IN gepr_pcomon_###VERSION###.tipo$cod_,
                              par$cod_cultura          IN gepr_pcomon_###VERSION###.tipo$cod_) IS
  var$oid_formato  gepr_pcomon_###VERSION###.tipo$oid_;
  BEGIN

    BEGIN
      SELECT OID_TERMINO, par$entrada_des_valor
        INTO par$saida_oid_termino, par$saida_des_valor
        FROM GEPR_TTERMINO
       WHERE COD_TERMINO = par$entrada_cod_termino AND BOL_VIGENTE = 1;

    EXCEPTION WHEN no_data_found THEN
      par$saida_oid_termino := NULL;
      par$saida_des_valor := NULL;

      SELECT OID_FORMATO
      INTO  var$oid_formato
      FROM GEPR_TFORMATO
      WHERE COD_FORMATO = '1';

      GEPR_PTERMINOS_IAC_###VERSION###.supd_termino(par$saida_oid_termino, par$entrada_cod_termino, par$entrada_des_valor, null, var$oid_formato,
       500, null, null, 0, 0, 1, par$cod_usuario, 0, 0, null);
       
      par$saida_des_valor := par$entrada_des_valor;

       
    END;

  END svalidar_terminos;


  /* Validar Valores */
  PROCEDURE svalidar_valores(par$oid_llamada               IN gepr_pcomon_###VERSION###.tipo$oid_,
                             par$cod_identificador_ajeno   IN gepr_pcomon_###VERSION###.tipo$cod_,
                             par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_,
                             par$entrada_cod_divisa        IN gepr_pcomon_###VERSION###.tipo$cod_,
                             par$entrada_cod_denominacion  IN gepr_pcomon_###VERSION###.tipo$cod_,
                             par$entrada_nel_cantidad      IN gepr_pcomon_###VERSION###.tipo$nel_,
                             par$entrada_num_importe       IN gepr_pcomon_###VERSION###.tipo$imp_,
                             par$saida_oid_divisa          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                             par$saida_oid_denominacio     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                             par$saida_oid_unid_medida     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                             par$saida_cod_niv_detalle     OUT gepr_pcomon_###VERSION###.tipo$cod_,
                             par$saida_cod_tp_efec_tot     OUT gepr_pcomon_###VERSION###.tipo$cod_,
                             par$saida_oid_calidad         OUT gepr_pcomon_###VERSION###.tipo$oid_,
                             par$saida_num_importe         OUT gepr_pcomon_###VERSION###.tipo$imp_,
                             par$saida_nel_cantidad        OUT gepr_pcomon_###VERSION###.tipo$nel_,
                             par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'svalidar_valores';
    var$oid_divisa      gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_denominacio gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_unid_medida gepr_pcomon_###VERSION###.tipo$oid_ := NULL;
    var$cod_niv_detalle gepr_pcomon_###VERSION###.tipo$cod_ := 'T';
    var$cod_tp_efec_tot gepr_pcomon_###VERSION###.tipo$cod_ := 'A';
    var$oid_calidad     gepr_pcomon_###VERSION###.tipo$oid_ := NULL;
    var$bol_divisa_vigente gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_denomi_vigente gepr_pcomon_###VERSION###.tipo$nbol_;

  BEGIN

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Entrada: ' || const$new_line
                        || 'par$oid_llamada: ' || par$oid_llamada || const$new_line
                        || 'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line
                        || 'par$nel_index: ' || par$nel_index || const$new_line
                        || 'par$entrada_cod_divisa: ' || par$entrada_cod_divisa || const$new_line
                        || 'par$entrada_cod_denominacion: ' || par$entrada_cod_denominacion || const$new_line
                        || 'par$entrada_nel_cantidad: ' || par$entrada_nel_cantidad || const$new_line
                        || 'par$entrada_num_importe: ' || par$entrada_num_importe || const$new_line
                        || 'par$cod_cultura: ' || par$cod_cultura,
                        par$cod_identificador   => ''); 

    IF par$entrada_cod_divisa IS NULL THEN
      /* 2000030007 - El código de la divisa es obligatório cuando se informa un importe. */
      dbms_output.put_line('El código de la divisa es obligatório cuando se informa un importe.');
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2000030007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000030007', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2000030007 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000030007', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0),
                        par$cod_identificador   => '');

    ELSE

      IF par$cod_identificador_ajeno IS NULL THEN

        /* Divisa */
        BEGIN

          SELECT OID_DIVISA, BOL_VIGENTE
            INTO var$oid_divisa, var$bol_divisa_vigente
            FROM GEPR_TDIVISA
           WHERE COD_ISO_DIVISA = par$entrada_cod_divisa;

        EXCEPTION WHEN no_data_found THEN
          var$oid_divisa := NULL;
          var$bol_divisa_vigente := 0;
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, '2000030001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030001', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                       gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_divisa, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2000030001 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030001', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_divisa, 0),
                        par$cod_identificador   => ''); 
        END;

        /* Denominacion */
        IF par$entrada_cod_denominacion IS NOT NULL AND var$oid_divisa IS NOT NULL THEN

          var$cod_niv_detalle := 'D';

          BEGIN

            SELECT OID_DENOMINACION, BOL_VIGENTE, CASE WHEN BOL_BILLETE = 1 THEN 'B' ELSE 'M' END COD_TIPO_EFECTIVO
              INTO var$oid_denominacio, var$bol_denomi_vigente, var$cod_tp_efec_tot
              FROM GEPR_TDENOMINACION
             WHERE COD_DENOMINACION = par$entrada_cod_denominacion
               AND OID_DIVISA = var$oid_divisa;

          EXCEPTION WHEN no_data_found THEN
            var$oid_denominacio := NULL;
            var$bol_denomi_vigente := 0;
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                 VALUES (par$nel_index, '2000030004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030004', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                         gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_denominacion, 0), 'VALIDACIONES');

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2000030004 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030004', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_denominacion, 0),
                        par$cod_identificador   => '');
          END;

        END IF;

      ELSE

        /* Divisa */
        BEGIN

          SELECT CA.OID_TABLA_GENESIS, DIV.BOL_VIGENTE
            INTO var$oid_divisa, var$bol_divisa_vigente
            FROM GEPR_TCODIGO_AJENO CA
      INNER JOIN GEPR_TDIVISA DIV ON DIV.OID_DIVISA = CA.OID_TABLA_GENESIS
           WHERE CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno
             AND CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TDIVISA'
             AND CA.COD_AJENO = par$entrada_cod_divisa
             AND CA.BOL_ACTIVO = 1;

        EXCEPTION WHEN no_data_found THEN
          var$oid_divisa := NULL;
          var$bol_divisa_vigente := 0;
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, '2000030002', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030002', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                       gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_divisa, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2000030002 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030002', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_divisa, 0),
                        par$cod_identificador   => '');
        END;

        /* Denominacion */
        IF par$entrada_cod_denominacion IS NOT NULL AND var$oid_divisa IS NOT NULL THEN

          var$cod_niv_detalle := 'D';

          BEGIN

              SELECT DEN.OID_DENOMINACION, DEN.BOL_VIGENTE, CASE WHEN DEN.BOL_BILLETE = 1 THEN 'B' ELSE 'M' END COD_TIPO_EFECTIVO
                INTO var$oid_denominacio, var$bol_denomi_vigente, var$cod_tp_efec_tot
                FROM GEPR_TDENOMINACION DEN
               INNER JOIN GEPR_TCODIGO_AJENO CA
                  ON CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TDENOMINACION'
                 AND CA.OID_TABLA_GENESIS = DEN.OID_DENOMINACION
               WHERE DEN.OID_DIVISA = var$oid_divisa
                 AND CA.COD_AJENO = par$entrada_cod_denominacion
                 AND CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno;

          EXCEPTION WHEN no_data_found THEN
            var$oid_denominacio := NULL;
            var$bol_denomi_vigente := 0;
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                 VALUES (par$nel_index, '2000030005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030005', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                         gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_denominacion, 0), 'VALIDACIONES');

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2000030005 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030005', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_denominacion, 0),
                        par$cod_identificador   => ''); 
          END;

        END IF;

      END IF;

      IF NOT fhay_error(par$nel_index => par$nel_index) THEN
        par$saida_oid_divisa      := var$oid_divisa;
        par$saida_oid_denominacio := var$oid_denominacio;
        par$saida_oid_unid_medida := var$oid_unid_medida;
        par$saida_cod_niv_detalle := var$cod_niv_detalle;
        par$saida_cod_tp_efec_tot := var$cod_tp_efec_tot;
        par$saida_oid_calidad     := var$oid_calidad;
        par$saida_num_importe     := par$entrada_num_importe;
        par$saida_nel_cantidad    := par$entrada_nel_cantidad;

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Salida: ' || const$new_line
                        || 'par$saida_oid_divisa: ' || var$oid_divisa || const$new_line
                        || 'par$saida_oid_denominacio: ' || var$oid_denominacio || const$new_line
                        || 'par$saida_oid_unid_medida: ' || var$oid_unid_medida || const$new_line
                        || 'par$saida_cod_niv_detalle: ' || var$cod_niv_detalle || const$new_line
                        || 'par$saida_cod_tp_efec_tot: ' || var$cod_tp_efec_tot || const$new_line
                        || 'par$saida_oid_calidad: ' || var$oid_calidad || const$new_line
                        || 'par$saida_num_importe: ' || par$entrada_num_importe || const$new_line
                        || 'par$saida_nel_cantidad: ' || par$entrada_nel_cantidad || const$new_line,
                        par$cod_identificador   => ''); 
      END IF;

    END IF;

  END svalidar_valores;

/* Validar valores acreditacion */
  PROCEDURE svalidar_valores_acreditacion(par$oid_llamada               IN gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$cod_identificador_ajeno   IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$entrada_cod_divisa        IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$entrada_cod_denominacion  IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$entrada_nel_cantidad      IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$entrada_num_importe       IN gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$entrada_nel_tipo          IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$saida_acr_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_acr_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_acr_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_acr_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_acr_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_acr_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_acr_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_acr_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$saida_com_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_com_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_com_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_com_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_com_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_com_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_com_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_com_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_, 
                                          par$saida_tot_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_tot_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_tot_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_tot_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_tot_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_tot_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_tot_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_tot_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$oid_divisa      gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_denominacio gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_unid_medida gepr_pcomon_###VERSION###.tipo$oid_ := NULL;
    var$cod_niv_detalle gepr_pcomon_###VERSION###.tipo$cod_ := 'T';
    var$cod_tp_efec_tot gepr_pcomon_###VERSION###.tipo$cod_ := 'A';
    var$oid_calidad     gepr_pcomon_###VERSION###.tipo$oid_ := NULL;
    var$bol_divisa_vigente gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_denomi_vigente gepr_pcomon_###VERSION###.tipo$nbol_;

  BEGIN

    IF par$entrada_cod_divisa IS NULL THEN
      /* 2000030007 - El código de la divisa es obligatório cuando se informa un importe. */
      dbms_output.put_line('El código de la divisa es obligatório cuando se informa un importe.');
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2000030007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000030007', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

    ELSE

      IF par$cod_identificador_ajeno IS NULL THEN

        /* Divisa */
        BEGIN

          SELECT OID_DIVISA, BOL_VIGENTE
            INTO var$oid_divisa, var$bol_divisa_vigente
            FROM GEPR_TDIVISA
           WHERE COD_ISO_DIVISA = par$entrada_cod_divisa;

        EXCEPTION WHEN no_data_found THEN
          var$oid_divisa := NULL;
          var$bol_divisa_vigente := 0;
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, '2000030001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030001', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                       gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_divisa, 0), 'VALIDACIONES');
        END;

        /* Denominacion */
        IF par$entrada_cod_denominacion IS NOT NULL AND var$oid_divisa IS NOT NULL THEN

          var$cod_niv_detalle := 'D';

          BEGIN

            SELECT OID_DENOMINACION, BOL_VIGENTE, CASE WHEN BOL_BILLETE = 1 THEN 'B' ELSE 'M' END COD_TIPO_EFECTIVO
              INTO var$oid_denominacio, var$bol_denomi_vigente, var$cod_tp_efec_tot
              FROM GEPR_TDENOMINACION
             WHERE COD_DENOMINACION = par$entrada_cod_denominacion
               AND OID_DIVISA = var$oid_divisa;

          EXCEPTION WHEN no_data_found THEN
            var$oid_denominacio := NULL;
            var$bol_denomi_vigente := 0;
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                 VALUES (par$nel_index, '2000030004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030004', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                         gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_denominacion, 0), 'VALIDACIONES');
          END;

        END IF;

      ELSE

        /* Divisa */
        BEGIN

          SELECT CA.OID_TABLA_GENESIS, DIV.BOL_VIGENTE
            INTO var$oid_divisa, var$bol_divisa_vigente
            FROM GEPR_TCODIGO_AJENO CA
      INNER JOIN GEPR_TDIVISA DIV ON DIV.OID_DIVISA = CA.OID_TABLA_GENESIS
           WHERE CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno
             AND CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TDIVISA'
             AND CA.COD_AJENO = par$entrada_cod_divisa
             AND CA.BOL_ACTIVO = 1;

        EXCEPTION WHEN no_data_found THEN
          var$oid_divisa := NULL;
          var$bol_divisa_vigente := 0;
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, '2000030002', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030002', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                       gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_divisa, 0), 'VALIDACIONES');
        END;

        /* Denominacion */
        IF par$entrada_cod_denominacion IS NOT NULL AND var$oid_divisa IS NOT NULL THEN

          var$cod_niv_detalle := 'D';

          BEGIN

              SELECT DEN.OID_DENOMINACION, DEN.BOL_VIGENTE, CASE WHEN DEN.BOL_BILLETE = 1 THEN 'B' ELSE 'M' END COD_TIPO_EFECTIVO
                INTO var$oid_denominacio, var$bol_denomi_vigente, var$cod_tp_efec_tot
                FROM GEPR_TDENOMINACION DEN
               INNER JOIN GEPR_TCODIGO_AJENO CA
                  ON CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TDENOMINACION'
                 AND CA.OID_TABLA_GENESIS = DEN.OID_DENOMINACION
               WHERE DEN.OID_DIVISA = var$oid_divisa
                 AND CA.COD_AJENO = par$entrada_cod_denominacion
                 AND CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno;

          EXCEPTION WHEN no_data_found THEN
            var$oid_denominacio := NULL;
            var$bol_denomi_vigente := 0;
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                 VALUES (par$nel_index, '2000030005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030005', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                         gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_denominacion, 0), 'VALIDACIONES');
          END;

        END IF;

      END IF;

      IF NOT fhay_error(par$nel_index => par$nel_index) THEN
       IF par$entrada_nel_tipo = 0 THEN
          par$saida_acr_oid_divisa      := var$oid_divisa;
          par$saida_acr_oid_denominacio := var$oid_denominacio;
          par$saida_acr_oid_unid_medida := var$oid_unid_medida;
          par$saida_acr_cod_niv_detalle := var$cod_niv_detalle;
          par$saida_acr_cod_tp_efec_tot := var$cod_tp_efec_tot;
          par$saida_acr_oid_calidad     := var$oid_calidad;
          par$saida_acr_num_importe     := par$entrada_num_importe;
          par$saida_acr_nel_cantidad    := par$entrada_nel_cantidad;

        ELSIF par$entrada_nel_tipo = 1 THEN

          par$saida_com_oid_divisa      := var$oid_divisa;
          par$saida_com_oid_denominacio := var$oid_denominacio;
          par$saida_com_oid_unid_medida := var$oid_unid_medida;
          par$saida_com_cod_niv_detalle := var$cod_niv_detalle;
          par$saida_com_cod_tp_efec_tot := var$cod_tp_efec_tot;
          par$saida_com_oid_calidad     := var$oid_calidad;
          par$saida_com_num_importe     := par$entrada_num_importe;
          par$saida_com_nel_cantidad    := par$entrada_nel_cantidad;

        ELSIF par$entrada_nel_tipo = 2 THEN

          par$saida_tot_oid_divisa      := var$oid_divisa;
          par$saida_tot_oid_denominacio := var$oid_denominacio;
          par$saida_tot_oid_unid_medida := var$oid_unid_medida;
          par$saida_tot_cod_niv_detalle := var$cod_niv_detalle;
          par$saida_tot_cod_tp_efec_tot := var$cod_tp_efec_tot;
          par$saida_tot_oid_calidad     := var$oid_calidad;
          par$saida_tot_num_importe     := par$entrada_num_importe;
          par$saida_tot_nel_cantidad    := par$entrada_nel_cantidad;

        END IF;     
      END IF;

    END IF;

  END svalidar_valores_acreditacion;

 /* Validar valores recuento */
  PROCEDURE svalidar_valores_recuento(par$cod_identificador_ajeno   IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$entrada_cod_divisa        IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$entrada_cod_denominacion  IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$entrada_nel_cantidad      IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$entrada_num_importe       IN gepr_pcomon_###VERSION###.tipo$imp_,
                                      par$entrada_nel_tipo          IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$saida_con_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_con_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_con_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_con_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_con_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_con_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_con_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                      par$saida_con_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$saida_dec_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dec_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dec_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dec_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_dec_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_dec_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dec_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                      par$saida_dec_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$saida_dif_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dif_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dif_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dif_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_dif_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$saida_dif_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$saida_dif_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                      par$saida_dif_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$oid_divisa      gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_denominacio gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_unid_medida gepr_pcomon_###VERSION###.tipo$oid_ := NULL;
    var$cod_niv_detalle gepr_pcomon_###VERSION###.tipo$cod_ := 'T';
    var$cod_tp_efec_tot gepr_pcomon_###VERSION###.tipo$cod_ := 'A';
    var$oid_calidad     gepr_pcomon_###VERSION###.tipo$oid_ := NULL;
    var$bol_divisa_vigente gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_denomi_vigente gepr_pcomon_###VERSION###.tipo$nbol_;

  BEGIN

    IF par$entrada_cod_divisa IS NULL THEN
      /* 2000030007 - El código de la divisa es obligatório cuando se informa un importe. */
      dbms_output.put_line('El código de la divisa es obligatório cuando se informa un importe.');
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2000030007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000030007', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

    ELSE

      IF par$cod_identificador_ajeno IS NULL THEN

        /* Divisa */
        BEGIN

          SELECT OID_DIVISA, BOL_VIGENTE
            INTO var$oid_divisa, var$bol_divisa_vigente
            FROM GEPR_TDIVISA
           WHERE COD_ISO_DIVISA = par$entrada_cod_divisa;

        EXCEPTION WHEN no_data_found THEN
          var$oid_divisa := NULL;
          var$bol_divisa_vigente := 0;
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, '2000030001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030001', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                       gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_divisa, 0), 'VALIDACIONES');
        END;

        /* Denominacion */
        IF par$entrada_cod_denominacion IS NOT NULL AND var$oid_divisa IS NOT NULL THEN

          var$cod_niv_detalle := 'D';

          BEGIN

            SELECT OID_DENOMINACION, BOL_VIGENTE, CASE WHEN BOL_BILLETE = 1 THEN 'B' ELSE 'M' END COD_TIPO_EFECTIVO
              INTO var$oid_denominacio, var$bol_denomi_vigente, var$cod_tp_efec_tot
              FROM GEPR_TDENOMINACION
             WHERE COD_DENOMINACION = par$entrada_cod_denominacion
               AND OID_DIVISA = var$oid_divisa;

          EXCEPTION WHEN no_data_found THEN
            var$oid_denominacio := NULL;
            var$bol_denomi_vigente := 0;
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                 VALUES (par$nel_index, '2000030004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030004', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                         gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_denominacion, 0), 'VALIDACIONES');
          END;

        END IF;

      ELSE

        /* Divisa */
        BEGIN

          SELECT CA.OID_TABLA_GENESIS, DIV.BOL_VIGENTE
            INTO var$oid_divisa, var$bol_divisa_vigente
            FROM GEPR_TCODIGO_AJENO CA
      INNER JOIN GEPR_TDIVISA DIV ON DIV.OID_DIVISA = CA.OID_TABLA_GENESIS
           WHERE CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno
             AND CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TDIVISA'
             AND CA.COD_AJENO = par$entrada_cod_divisa
             AND CA.BOL_ACTIVO = 1;

        EXCEPTION WHEN no_data_found THEN
          var$oid_divisa := NULL;
          var$bol_divisa_vigente := 0;
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, '2000030002', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030002', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                       gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_divisa, 0), 'VALIDACIONES');
        END;

        /* Denominacion */
        IF par$entrada_cod_denominacion IS NOT NULL AND var$oid_divisa IS NOT NULL THEN

          var$cod_niv_detalle := 'D';

          BEGIN

              SELECT DEN.OID_DENOMINACION, DEN.BOL_VIGENTE, CASE WHEN DEN.BOL_BILLETE = 1 THEN 'B' ELSE 'M' END COD_TIPO_EFECTIVO
                INTO var$oid_denominacio, var$bol_denomi_vigente, var$cod_tp_efec_tot
                FROM GEPR_TDENOMINACION DEN
               INNER JOIN GEPR_TCODIGO_AJENO CA
                  ON CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TDENOMINACION'
                 AND CA.OID_TABLA_GENESIS = DEN.OID_DENOMINACION
               WHERE DEN.OID_DIVISA = var$oid_divisa
                 AND CA.COD_AJENO = par$entrada_cod_denominacion
                 AND CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno;

          EXCEPTION WHEN no_data_found THEN
            var$oid_denominacio := NULL;
            var$bol_denomi_vigente := 0;
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                 VALUES (par$nel_index, '2000030005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030005', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                         gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_denominacion, 0), 'VALIDACIONES');
          END;

        END IF;

      END IF;

      IF NOT fhay_error(par$nel_index => par$nel_index) THEN
        IF par$entrada_nel_tipo = 0 THEN
          par$saida_con_oid_divisa      := var$oid_divisa;
          par$saida_con_oid_denominacio := var$oid_denominacio;
          par$saida_con_oid_unid_medida := var$oid_unid_medida;
          par$saida_con_cod_niv_detalle := var$cod_niv_detalle;
          par$saida_con_cod_tp_efec_tot := var$cod_tp_efec_tot;
          par$saida_con_oid_calidad     := var$oid_calidad;
          par$saida_con_num_importe     := par$entrada_num_importe;
          par$saida_con_nel_cantidad    := par$entrada_nel_cantidad;

        ELSIF par$entrada_nel_tipo = 1 THEN

          par$saida_dec_oid_divisa      := var$oid_divisa;
          par$saida_dec_oid_denominacio := var$oid_denominacio;
          par$saida_dec_oid_unid_medida := var$oid_unid_medida;
          par$saida_dec_cod_niv_detalle := var$cod_niv_detalle;
          par$saida_dec_cod_tp_efec_tot := var$cod_tp_efec_tot;
          par$saida_dec_oid_calidad     := var$oid_calidad;
          par$saida_dec_num_importe     := par$entrada_num_importe;
          par$saida_dec_nel_cantidad    := par$entrada_nel_cantidad;

        ELSE

          par$saida_dif_oid_divisa      := var$oid_divisa;
          par$saida_dif_oid_denominacio := var$oid_denominacio;
          par$saida_dif_oid_unid_medida := var$oid_unid_medida;
          par$saida_dif_cod_niv_detalle := var$cod_niv_detalle;
          par$saida_dif_cod_tp_efec_tot := var$cod_tp_efec_tot;
          par$saida_dif_oid_calidad     := var$oid_calidad;
          par$saida_dif_num_importe     := par$entrada_num_importe;
          par$saida_dif_nel_cantidad    := par$entrada_nel_cantidad;

        END IF;
      END IF;

    END IF;

  END svalidar_valores_recuento;

  /* Recuperar valores saldos */
 PROCEDURE srecuperar_valores_saldos(par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$bol_disponible          IN gepr_pcomon_###VERSION###.tipo$nbol_,
                                      par$saida_oids_cuenta       OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_cliente      OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_subcliente   OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_pto_servicio OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_cuenta_saldo OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_divisa       OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_denominacio  OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_oids_unid_medida  OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_cods_niv_detalle  OUT gepr_pcomon_###VERSION###.tipo$cods_,
                                      par$saida_cods_tp_efec_tot  OUT gepr_pcomon_###VERSION###.tipo$cods_,
                                      par$saida_oids_calidad      OUT gepr_pcomon_###VERSION###.tipo$oids_,
                                      par$saida_nums_importe      OUT gepr_pcomon_###VERSION###.tipo$imps_,
                                      par$saida_nels_cantidad     OUT gepr_pcomon_###VERSION###.tipo$nels_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$cuenta_mov           gepr_pcomon_###VERSION###.tipo$cuenta;
    var$bol_cliente_activo   gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_sector_activo    gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_canal_activo     gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_sub_canal_activo gepr_pcomon_###VERSION###.tipo$nbol_;
    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

    /* Saldos efectivos*/
    CURSOR cur$saldos(par$oid_sector           IN gepr_pcomon_###VERSION###.tipo$oid_,
                      par$oid_sub_canal        IN gepr_pcomon_###VERSION###.tipo$oid_,
                      par$bol_disponible       IN gepr_pcomon_###VERSION###.tipo$nbol_,
                      par$oid_cliente_prosegur IN gepr_pcomon_###VERSION###.tipo$oid_) IS
              SELECT SAEF.OID_CUENTA_SALDO
                   , CUEN.OID_CLIENTE
                   , CUEN.OID_SUBCLIENTE
                   , CUEN.OID_PTO_SERVICIO
                   , SAEF.OID_DIVISA
                   , SAEF.OID_DENOMINACION /*ESTA AGRUPADO POR DENOMINACION */
                   , SAEF.COD_NIVEL_DETALLE
                   , SAEF.OID_UNIDAD_MEDIDA
                   , SAEF.OID_CALIDAD
                   , SAEF.COD_TIPO_EFECTIVO_TOTAL
                   , SUM(SAEF.NUM_IMPORTE) NUM_IMPORTE /*SUM PARA PREVENIR EXISTENCIA DE 2 REGISTROS*/
                   , SUM(SAEF.NEL_CANTIDAD) NEL_CANTIDAD
                FROM SAPR_TSALDO_EFECTIVO SAEF
          INNER JOIN SAPR_VCUENTA CUEN ON CUEN.OID_CUENTA = SAEF.OID_CUENTA_SALDO
                                      AND CUEN.OID_SECTOR = par$oid_sector
                                      AND CUEN.OID_SUBCANAL = par$oid_sub_canal
                                      AND CUEN.OID_CLIENTE <> par$oid_cliente_prosegur
               WHERE SAEF.BOL_DISPONIBLE = par$bol_disponible
                 AND SAEF.NUM_IMPORTE <> 0
            GROUP BY SAEF.OID_CUENTA_SALDO
                   , CUEN.OID_CLIENTE
                   , CUEN.OID_SUBCLIENTE
                   , CUEN.OID_PTO_SERVICIO
                   , SAEF.OID_DIVISA
                   , SAEF.OID_DENOMINACION
                   , SAEF.COD_NIVEL_DETALLE
                   , SAEF.OID_UNIDAD_MEDIDA
                   , SAEF.OID_CALIDAD
                   , SAEF.COD_TIPO_EFECTIVO_TOTAL
            ORDER BY SAEF.OID_CUENTA_SALDO;

  BEGIN

    IF par$cod_device_id IS NULL THEN
      /* 2000020001 - Es obligatorio informar un DeviceID. */
      dbms_output.put_line('Es obligatório informar un DeviceID.');
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2000020001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020001', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

    END IF;
    IF par$cod_canal IS NULL THEN
      /* 2000020023 - Es obligatorio informar un canal. */
      dbms_output.put_line('Es obligatorio informar un canal.');
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2000020023', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020023', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

    END IF;
    IF par$cod_sub_canal IS NULL THEN
      /* 2000020024 - Es obligatorio informar un sub canal. */
      dbms_output.put_line('Es obligatorio informar un sub canal.');
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2000020024', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020024', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

    END IF;

    IF NOT fhay_error(par$nel_index => par$nel_index) THEN

      IF par$cod_identificador_ajeno IS NULL THEN

        /* Sector */
        BEGIN
          SELECT SECT.OID_SECTOR, SECT.COD_SECTOR, SECT.BOL_ACTIVO
            INTO var$cuenta_mov.oid_sector, var$cuenta_mov.cod_sector, var$bol_sector_activo
            FROM GEPR_TSECTOR SECT WHERE SECT.COD_SECTOR = par$cod_device_id;

        EXCEPTION WHEN no_data_found THEN
          var$bol_sector_activo := 0; var$cuenta_mov.oid_sector := NULL; var$cuenta_mov.cod_sector := NULL;
        END;

        /* Canal */
        BEGIN
          SELECT CANA.OID_CANAL, CANA.COD_CANAL, CANA.BOL_VIGENTE
            INTO var$cuenta_mov.oid_canal, var$cuenta_mov.cod_canal, var$bol_canal_activo
            FROM GEPR_TCANAL CANA
           WHERE CANA.COD_CANAL = par$cod_canal;

        EXCEPTION WHEN no_data_found THEN
          var$bol_canal_activo := 0; var$cuenta_mov.oid_canal := NULL; var$cuenta_mov.cod_canal := NULL;
        END;

        /* SubCanal */
        BEGIN
          SELECT SBCA.OID_SUBCANAL, SBCA.COD_SUBCANAL, SBCA.BOL_VIGENTE
            INTO var$cuenta_mov.oid_subcanal, var$cuenta_mov.cod_subcanal, var$bol_sub_canal_activo
            FROM GEPR_TSUBCANAL SBCA
           WHERE SBCA.COD_SUBCANAL = par$cod_sub_canal;

        EXCEPTION WHEN no_data_found THEN
          var$bol_sub_canal_activo := 0; var$cuenta_mov.oid_subcanal := NULL; var$cuenta_mov.cod_subcanal := NULL;
        END;

      ELSE

        /* Sector */
          BEGIN
            SELECT SECT.OID_SECTOR, SECT.COD_SECTOR, SECT.BOL_ACTIVO
              INTO var$cuenta_mov.oid_sector, var$cuenta_mov.cod_sector, var$bol_sector_activo
              FROM GEPR_TSECTOR SECT
        INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = SECT.OID_SECTOR
                                          AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                          AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TSECTOR'
                                          AND COAJ.COD_AJENO = par$cod_device_id;

          EXCEPTION WHEN no_data_found THEN
            var$bol_sector_activo := 0; var$cuenta_mov.oid_sector := NULL; var$cuenta_mov.cod_sector := NULL;
          END;

        /* Canal */
        BEGIN
              SELECT CANA.OID_CANAL, CANA.COD_CANAL, CANA.BOL_VIGENTE
                INTO var$cuenta_mov.oid_canal, var$cuenta_mov.cod_canal, var$bol_canal_activo
                FROM GEPR_TCANAL CANA
          INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = CANA.OID_CANAL
                                            AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                            AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TCANAL'
                                            AND COAJ.COD_AJENO = par$cod_canal;

        EXCEPTION WHEN no_data_found THEN
          var$bol_canal_activo := 0; var$cuenta_mov.oid_canal := NULL; var$cuenta_mov.cod_canal := NULL;
        END;

        /* SubCanal */
        BEGIN
              SELECT SBCA.OID_SUBCANAL, SBCA.COD_SUBCANAL, SBCA.BOL_VIGENTE
                INTO var$cuenta_mov.oid_subcanal, var$cuenta_mov.cod_subcanal, var$bol_sub_canal_activo
                FROM GEPR_TSUBCANAL SBCA
          INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = SBCA.OID_SUBCANAL
                                            AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                            AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TSUBCANAL'
                                            AND COAJ.COD_AJENO = par$cod_sub_canal;
        EXCEPTION WHEN no_data_found THEN
          var$bol_sub_canal_activo := 0; var$cuenta_mov.oid_subcanal := NULL; var$cuenta_mov.cod_subcanal := NULL;
        END;

      END IF;

      /* Cliente */
      BEGIN
        SELECT CLIEN.OID_CLIENTE, CLIEN.COD_CLIENTE, CLIEN.BOL_VIGENTE
          INTO var$cuenta_mov.oid_cliente, var$cuenta_mov.cod_cliente, var$bol_cliente_activo
          FROM GEPR_TCLIENTE CLIEN
          INNER JOIN GEPR_TCODIGO_AJENO CA ON CA.OID_TABLA_GENESIS = CLIEN.OID_CLIENTE
         WHERE CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TCLIENTE'
           AND CA.cod_ajeno = gepr_pcomon_###VERSION###.const$CodClienteProsegur
           AND CA.COD_IDENTIFICADOR = 'MAE';
      EXCEPTION WHEN no_data_found THEN
        var$bol_cliente_activo := 0; var$cuenta_mov.oid_cliente := NULL; var$cuenta_mov.cod_cliente := NULL;
      END;

      /* === Validaciones === */

      /* Sector */
      IF var$cuenta_mov.oid_sector IS NULL THEN

        IF par$cod_identificador_ajeno IS NULL THEN
          /* 2000020002 - No existe una máquina con el DeviceID [{0}] configurada en Génesis Producto. */
          dbms_output.put_line('No existe una máquina con el DeviceID [{0}] configurada en Génesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020002', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020002', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_device_id, 0), 'VALIDACIONES');
        ELSE
          /* 2000020003 - No fue posible identificar un DeviceID en Genesis Producto, utilizando el codigo identificador [{0}] y el codigo ajeno [{0}]. */
          dbms_output.put_line('No fue posible identificar un DeviceID en Genesis Producto, utilizando el codigo identificador [{0}] y el codigo ajeno [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020003', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020003', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_device_id, 0), 'VALIDACIONES');
        END IF;

      ELSIF var$bol_sector_activo = 0 THEN
        /* 2000020004 - La maquina no está activa. */
        dbms_output.put_line('La maquina no está activa.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020004', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

      END IF;

      /* Canal */
      IF var$cuenta_mov.oid_canal IS NULL THEN

        IF par$cod_identificador_ajeno IS NULL THEN
          /* 2000020019 - No existe el canal [{0}] configurado en Genesis Producto. */
          dbms_output.put_line('No existe el canal [{0}] configurado en Genesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020019', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020019', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_canal, 0), 'VALIDACIONES');
        ELSE
          /* 2000020025 - No fue posible identificar un canal en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}]. */
          dbms_output.put_line('No fue posible identificar un canal en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020025', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020025', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_device_id, 0), 'VALIDACIONES');
        END IF;

      ELSIF var$bol_canal_activo = 0 THEN
        /* 2000020020 - El canal no está activo. */
        dbms_output.put_line('El canal no está activo.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020020', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020020', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

      END IF;

      /* SubCanal */
      IF var$cuenta_mov.oid_subcanal IS NULL THEN

        IF par$cod_identificador_ajeno IS NULL THEN
          /* 2000020021 - No existe el sub canal [{0}] configurado en Genesis Producto. */
          dbms_output.put_line('No existe el sub canal [{0}] configurado en Genesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020021', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020021', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_sub_canal, 0), 'VALIDACIONES');
        ELSE
          /* 2000020026 - No fue posible identificar un sub canal en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}]. */
          dbms_output.put_line('No fue posible identificar un sub canal en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020026', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020026', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_device_id, 0), 'VALIDACIONES');
        END IF;

      ELSIF var$bol_sub_canal_activo = 0 THEN
        /* 2000020022 - El sub canal no está activo. */
        dbms_output.put_line('El sub canal no está activo.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020022', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020022', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

      END IF;

      /* Cliente */
      IF var$cuenta_mov.oid_cliente IS NULL THEN
        /* 2000020006 - No existe el cliente [{0}] configurado en Genesis Producto. */
        dbms_output.put_line('No existe el cliente [{0}] configurado en Genesis Producto.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020006', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020006', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, gepr_pcomon_###VERSION###.const$CodClienteProsegur, 0), 'VALIDACIONES');

      ELSIF var$bol_cliente_activo = 0 THEN
        /* 2000020008 - El cliente no está activo. */
        dbms_output.put_line('El cliente no está activo.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020008', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020008', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

      END IF;

      IF NOT fhay_error(par$nel_index => par$nel_index) THEN

DBMS_OUTPUT.PUT_LINE ('AAA: 1');
DBMS_OUTPUT.PUT_LINE ('var$cuenta_mov.oid_sector: ' || var$cuenta_mov.oid_sector);
DBMS_OUTPUT.PUT_LINE ('var$cuenta_mov.oid_subcanal: ' || var$cuenta_mov.oid_subcanal);
DBMS_OUTPUT.PUT_LINE ('var$cuenta_mov.par$bol_disponible: ' || par$bol_disponible);
DBMS_OUTPUT.PUT_LINE ('var$cuenta_mov.oid_cliente: ' || var$cuenta_mov.oid_cliente);
         /* Recuerar valores */
         FOR rec$saldo IN cur$saldos(var$cuenta_mov.oid_sector, var$cuenta_mov.oid_subcanal, par$bol_disponible, var$cuenta_mov.oid_cliente) LOOP
DBMS_OUTPUT.PUT_LINE ('AAA: 2');
           IF par$saida_oids_cuenta IS NULL OR par$saida_oids_cuenta.COUNT = 0 THEN
             DBMS_OUTPUT.PUT_LINE ('AAA: 3');
             par$saida_oids_cuenta(par$saida_oids_cuenta.COUNT) := rec$saldo.oid_cuenta_saldo;             
             par$saida_oids_cliente(par$saida_oids_cliente.COUNT)      := rec$saldo.OID_CLIENTE;
             par$saida_oids_subcliente(par$saida_oids_subcliente.COUNT)   := rec$saldo.OID_SUBCLIENTE;
             par$saida_oids_pto_servicio(par$saida_oids_pto_servicio.COUNT) := rec$saldo.OID_PTO_SERVICIO;
           ELSE
             DBMS_OUTPUT.PUT_LINE ('AAA: 4');
             IF par$saida_oids_cuenta.COUNT > 0 THEN
               DBMS_OUTPUT.PUT_LINE ('AAA: 5');
               IF par$saida_oids_cuenta(par$saida_oids_cuenta.COUNT - 1) <> rec$saldo.oid_cuenta_saldo THEN
                DBMS_OUTPUT.PUT_LINE ('AAA: 6');
                    par$saida_oids_cuenta(par$saida_oids_cuenta.COUNT) := rec$saldo.oid_cuenta_saldo;
                 DBMS_OUTPUT.PUT_LINE ('AAA: 7');
                    par$saida_oids_cliente(par$saida_oids_cliente.COUNT)      := rec$saldo.OID_CLIENTE;
                    par$saida_oids_subcliente(par$saida_oids_subcliente.COUNT)   := rec$saldo.OID_SUBCLIENTE;
                    par$saida_oids_pto_servicio(par$saida_oids_pto_servicio.COUNT) := rec$saldo.OID_PTO_SERVICIO;
               END IF;
             END IF;
           END IF;

            par$saida_oids_cuenta_saldo(par$saida_oids_cuenta_saldo.COUNT)    := rec$saldo.oid_cuenta_saldo;
            par$saida_oids_divisa(par$saida_oids_divisa.COUNT)           := rec$saldo.oid_divisa;
            par$saida_oids_denominacio(par$saida_oids_denominacio.COUNT) := rec$saldo.oid_denominacion;
            par$saida_oids_unid_medida(par$saida_oids_unid_medida.COUNT) := rec$saldo.oid_unidad_medida;
            par$saida_cods_niv_detalle(par$saida_cods_niv_detalle.COUNT) := rec$saldo.cod_nivel_detalle;
            par$saida_cods_tp_efec_tot(par$saida_cods_tp_efec_tot.COUNT) := rec$saldo.cod_tipo_efectivo_total;
            par$saida_oids_calidad(par$saida_oids_calidad.COUNT)         := rec$saldo.oid_calidad;
            par$saida_nums_importe(par$saida_nums_importe.COUNT)         := rec$saldo.num_importe;
            par$saida_nels_cantidad(par$saida_nels_cantidad.COUNT)       := rec$saldo.nel_cantidad;

         END LOOP rec$saldo;

      END IF;

    END IF;

    DBMS_OUTPUT.PUT_LINE(var$nel_existe);

  END srecuperar_valores_saldos;


   /* Validar valores ajuste */
  PROCEDURE svalidar_valores_ajuste(par$cod_identificador_ajeno   IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$nel_index                 IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$entrada_cod_divisa        IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$entrada_cod_denominacion  IN gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$entrada_nel_cantidad      IN gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$entrada_num_importe       IN gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_pos_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_pos_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_pos_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_pos_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_pos_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_pos_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_pos_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_pos_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_,
                                          par$saida_neg_oid_divisa      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_neg_oid_denominacio OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_neg_oid_unid_medida OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_neg_cod_niv_detalle OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_neg_cod_tp_efec_tot OUT gepr_pcomon_###VERSION###.tipo$cod_,
                                          par$saida_neg_oid_calidad     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                          par$saida_neg_num_importe     OUT gepr_pcomon_###VERSION###.tipo$imp_,
                                          par$saida_neg_nel_cantidad    OUT gepr_pcomon_###VERSION###.tipo$nel_, 
                                          par$cod_cultura               IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$oid_divisa      gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_denominacio gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_unid_medida gepr_pcomon_###VERSION###.tipo$oid_ := NULL;
    var$cod_niv_detalle gepr_pcomon_###VERSION###.tipo$cod_ := 'T';
    var$cod_tp_efec_tot gepr_pcomon_###VERSION###.tipo$cod_ := 'A';
    var$oid_calidad     gepr_pcomon_###VERSION###.tipo$oid_ := NULL;
    var$bol_divisa_vigente gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_denomi_vigente gepr_pcomon_###VERSION###.tipo$nbol_;

  BEGIN

    IF par$entrada_cod_divisa IS NULL THEN
      /* 2000030007 - El código de la divisa es obligatório cuando se informa un importe. */
      dbms_output.put_line('El código de la divisa es obligatório cuando se informa un importe.');
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2000030007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000030007', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

    ELSE

      IF par$cod_identificador_ajeno IS NULL THEN

        /* Divisa */
        BEGIN

          SELECT OID_DIVISA, BOL_VIGENTE
            INTO var$oid_divisa, var$bol_divisa_vigente
            FROM GEPR_TDIVISA
           WHERE COD_ISO_DIVISA = par$entrada_cod_divisa;

        EXCEPTION WHEN no_data_found THEN
          var$oid_divisa := NULL;
          var$bol_divisa_vigente := 0;
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, '2000030001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030001', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                       gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_divisa, 0), 'VALIDACIONES');
        END;

        /* Denominacion */
        IF par$entrada_cod_denominacion IS NOT NULL AND var$oid_divisa IS NOT NULL THEN

          var$cod_niv_detalle := 'D';

          BEGIN

            SELECT OID_DENOMINACION, BOL_VIGENTE, CASE WHEN BOL_BILLETE = 1 THEN 'B' ELSE 'M' END COD_TIPO_EFECTIVO
              INTO var$oid_denominacio, var$bol_denomi_vigente, var$cod_tp_efec_tot
              FROM GEPR_TDENOMINACION
             WHERE COD_DENOMINACION = par$entrada_cod_denominacion
               AND OID_DIVISA = var$oid_divisa;

          EXCEPTION WHEN no_data_found THEN
            var$oid_denominacio := NULL;
            var$bol_denomi_vigente := 0;
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                 VALUES (par$nel_index, '2000030004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030004', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                         gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$entrada_cod_denominacion, 0), 'VALIDACIONES');
          END;

        END IF;

      ELSE

        /* Divisa */
        BEGIN

          SELECT CA.OID_TABLA_GENESIS, DIV.BOL_VIGENTE
            INTO var$oid_divisa, var$bol_divisa_vigente
            FROM GEPR_TCODIGO_AJENO CA
      INNER JOIN GEPR_TDIVISA DIV ON DIV.OID_DIVISA = CA.OID_TABLA_GENESIS
           WHERE CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno
             AND CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TDIVISA'
             AND CA.COD_AJENO = par$entrada_cod_divisa
             AND CA.BOL_ACTIVO = 1;

        EXCEPTION WHEN no_data_found THEN
          var$oid_divisa := NULL;
          var$bol_divisa_vigente := 0;
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
               VALUES (par$nel_index, '2000030002', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030002', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                       gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_divisa, 0), 'VALIDACIONES');
        END;

        /* Denominacion */
        IF par$entrada_cod_denominacion IS NOT NULL AND var$oid_divisa IS NOT NULL THEN

          var$cod_niv_detalle := 'D';

          BEGIN

              SELECT DEN.OID_DENOMINACION, DEN.BOL_VIGENTE, CASE WHEN DEN.BOL_BILLETE = 1 THEN 'B' ELSE 'M' END COD_TIPO_EFECTIVO
                INTO var$oid_denominacio, var$bol_denomi_vigente, var$cod_tp_efec_tot
                FROM GEPR_TDENOMINACION DEN
               INNER JOIN GEPR_TCODIGO_AJENO CA
                  ON CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TDENOMINACION'
                 AND CA.OID_TABLA_GENESIS = DEN.OID_DENOMINACION
               WHERE DEN.OID_DIVISA = var$oid_divisa
                 AND CA.COD_AJENO = par$entrada_cod_denominacion
                 AND CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno;

          EXCEPTION WHEN no_data_found THEN
            var$oid_denominacio := NULL;
            var$bol_denomi_vigente := 0;
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                 VALUES (par$nel_index, '2000030005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2000030005', gepr_pcomon_###VERSION###.const$CodFunGenericoDivisa,
                         gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$entrada_cod_denominacion, 0), 'VALIDACIONES');
          END;

        END IF;

      END IF;


      IF NOT fhay_error(par$nel_index => par$nel_index) THEN
       IF par$entrada_num_importe >= 0 THEN
          par$saida_pos_oid_divisa      := var$oid_divisa;
          par$saida_pos_oid_denominacio := var$oid_denominacio;
          par$saida_pos_oid_unid_medida := var$oid_unid_medida;
          par$saida_pos_cod_niv_detalle := var$cod_niv_detalle;
          par$saida_pos_cod_tp_efec_tot := var$cod_tp_efec_tot;
          par$saida_pos_oid_calidad     := var$oid_calidad;
          par$saida_pos_num_importe     := par$entrada_num_importe;
          par$saida_pos_nel_cantidad    := par$entrada_nel_cantidad;

        ELSE 

          par$saida_neg_oid_divisa      := var$oid_divisa;
          par$saida_neg_oid_denominacio := var$oid_denominacio;
          par$saida_neg_oid_unid_medida := var$oid_unid_medida;
          par$saida_neg_cod_niv_detalle := var$cod_niv_detalle;
          par$saida_neg_cod_tp_efec_tot := var$cod_tp_efec_tot;
          par$saida_neg_oid_calidad     := var$oid_calidad;
          par$saida_neg_num_importe     := ABS(par$entrada_num_importe);
          par$saida_neg_nel_cantidad    := par$entrada_nel_cantidad;



        END IF;     
      END IF;

    END IF;

  END svalidar_valores_ajuste;



  /* Recuperar fomularios */
  PROCEDURE srecuperar_formularios(par$cod_formulario     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                   par$oid_formulario     OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                   par$oid_tipo_documento OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                   par$des_cod_externo    OUT gepr_pcomon_###VERSION###.tipo$cod_) IS

  BEGIN

    BEGIN

      SELECT OID_FORMULARIO, OID_TIPO_DOCUMENTO, DES_COD_EXTERNO
        INTO par$oid_formulario, par$oid_tipo_documento, par$des_cod_externo
        FROM SAPR_TFORMULARIO F
       WHERE COD_FORMULARIO = par$cod_formulario AND BOL_ACTIVO = 1;

    EXCEPTION WHEN no_data_found THEN
      par$oid_formulario := NULL;
      par$oid_tipo_documento := NULL;
      par$des_cod_externo := NULL;
    END;

  END srecuperar_formularios;

 /* Validar Cuenta */
  PROCEDURE svalidar_cuenta(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                            par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                            par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                            par$bol_esmaquina           IN gepr_pcomon_###VERSION###.tipo$nbol_,
                            par$bol_validar_punto       IN gepr_pcomon_###VERSION###.tipo$nbol_,
                            par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                            par$oid_cuenta              OUT gepr_pcomon_###VERSION###.tipo$oid_,
                            par$oid_sector              OUT gepr_pcomon_###VERSION###.tipo$oid_) IS

    const$des_origen CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.' || 'svalidar_cuenta';

    var$cuenta_mov gepr_pcomon_###VERSION###.tipo$cuenta;
    var$cuenta_sal gepr_pcomon_###VERSION###.tipo$cuenta;

    var$bol_mae_activo          gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_cliente_activo      gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_sub_cliente_activo  gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_pto_servicio_activo gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_canal_activo        gepr_pcomon_###VERSION###.tipo$nbol_;
    var$bol_sub_canal_activo    gepr_pcomon_###VERSION###.tipo$nbol_;

    var$nel_existe              gepr_pcomon_###VERSION###.tipo$nel_;
    var$nel_inserts             gepr_pcomon_###VERSION###.tipo$nel_;
    var$nel_updates             gepr_pcomon_###VERSION###.tipo$nel_;
    var$nel_selects             gepr_pcomon_###VERSION###.tipo$nel_;
    var$nel_existe_device_id    gepr_pcomon_###VERSION###.tipo$nel_;
    var$nel_existe_pais         gepr_pcomon_###VERSION###.tipo$nel_;

    /*CLIENTES */
    var$anel_cli_index                   gepr_pcomon_###VERSION###.tipo$nels_;
    var$acod_cli_cliente                 gepr_pcomon_###VERSION###.tipo$cods_;
    var$ades_cli_cliente                 gepr_pcomon_###VERSION###.tipo$descs_;
    var$aoid_cli_tipo_cliente            gepr_pcomon_###VERSION###.tipo$oids_;
    var$acod_cli_bancario                gepr_pcomon_###VERSION###.tipo$cods_;
    var$abol_cli_vigente                 gepr_pcomon_###VERSION###.tipo$nbols_;
    var$abol_cli_totaliza_saldo          gepr_pcomon_###VERSION###.tipo$nbols_;
    var$abol_cli_abona_por_total         gepr_pcomon_###VERSION###.tipo$nbols_;
    var$abol_cli_banco_capital           gepr_pcomon_###VERSION###.tipo$nbols_;
    var$abol_cli_banco_comision          gepr_pcomon_###VERSION###.tipo$nbols_;
    var$anum_cli_percent_comision        gepr_pcomon_###VERSION###.tipo$nels_;
    
    /* SUBCLIENTE */
    var$aoid_sc_cliente                  gepr_pcomon_###VERSION###.tipo$oids_;
    var$anel_sc_cli_index                gepr_pcomon_###VERSION###.tipo$nels_;
    var$anel_sc_index                    gepr_pcomon_###VERSION###.tipo$nels_;
    var$acod_sc_subcliente               gepr_pcomon_###VERSION###.tipo$cods_;
    var$ades_sc_subcliente               gepr_pcomon_###VERSION###.tipo$descs_;
    var$aoid_sc_tipo_subcliente          gepr_pcomon_###VERSION###.tipo$oids_;
    var$abol_sc_enviado_saldos           gepr_pcomon_###VERSION###.tipo$nbols_;
    var$abol_sc_vigente                  gepr_pcomon_###VERSION###.tipo$nbols_;
    var$abol_sc_totaliza_saldo           gepr_pcomon_###VERSION###.tipo$nbols_;

    /* PUNTO_SERVICIO */
    var$aoid_pto_subcliente              gepr_pcomon_###VERSION###.tipo$oids_;
    var$anel_pto_index                   gepr_pcomon_###VERSION###.tipo$nels_;
    var$anel_pto_sc_index                gepr_pcomon_###VERSION###.tipo$nels_;
    var$acod_pto_pto_servicio            gepr_pcomon_###VERSION###.tipo$cods_;
    var$ades_pto_pto_servicio            gepr_pcomon_###VERSION###.tipo$descs_;
    var$aoid_pto_tipo_pto_servicio       gepr_pcomon_###VERSION###.tipo$oids_;
    var$abol_pto_vigente                 gepr_pcomon_###VERSION###.tipo$nbols_;
    var$abol_pto_totaliza_saldo          gepr_pcomon_###VERSION###.tipo$nbols_;

    var$oid_cli_tipo_cliente             gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_cliente                      gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_tipo_subcliente              gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_subcliente                   gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_punto_servicio               gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_tipo_punto_serv              gepr_pcomon_###VERSION###.tipo$oid_;
    var$obs_detalle                      gepr_pcomon_###VERSION###.tipo$obs_;

    /*VARIABLES LOCALES*/
    var$cod_cliente                     gepr_pcomon_###VERSION###.tipo$cod_;
    var$cod_subcliente                  gepr_pcomon_###VERSION###.tipo$cod_;
    var$cod_punto_servicio              gepr_pcomon_###VERSION###.tipo$cod_;
    var$cod_ajeno_existente             gepr_pcomon_###VERSION###.tipo$cod_;
    var$des_ajeno_existente             gepr_pcomon_###VERSION###.tipo$desc_;
    var$mensaje                         gepr_pcomon_###VERSION###.tipo$desc_;
    var$mensajeEntidadTraducida         gepr_pcomon_###VERSION###.tipo$cod_;
    

    var$cod_pais                        gepr_pcomon_###VERSION###.tipo$cod_;
    var$oid_pais                        gepr_pcomon_###VERSION###.tipo$oid_;

  BEGIN

    var$obs_detalle := 'Parametros de entrada:' || const$new_line
                        || 'par$oid_llamada: ' || par$oid_llamada || const$new_line
                        || 'par$nel_index: ' || par$nel_index || const$new_line
                        || 'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line
                        || 'par$cod_cliente: ' || par$cod_cliente || const$new_line
                        || 'par$cod_sub_cliente: ' || par$cod_sub_cliente || const$new_line
                        || 'par$cod_punto_servicio: ' || par$cod_punto_servicio || const$new_line
                        || 'par$cod_canal: ' || par$cod_canal || const$new_line
                        || 'par$cod_sub_canal: ' || par$cod_sub_canal || const$new_line
                        || 'par$cod_device_id: ' || par$cod_device_id || const$new_line
                        || 'par$cod_cultura: ' || par$cod_cultura || const$new_line
                        || 'par$cod_usuario: ' || par$cod_usuario || const$new_line;
    IF par$bol_esmaquina = 1 THEN
      var$obs_detalle := var$obs_detalle || 'par$bol_esmaquina: 1' || const$new_line;
    ELSE
      var$obs_detalle := var$obs_detalle || 'par$bol_esmaquina: 0' || const$new_line;
    END IF;

    IF par$bol_validar_punto = 1 THEN
      var$obs_detalle := var$obs_detalle || 'par$bol_validar_punto: 1' || const$new_line;
    ELSE
      var$obs_detalle := var$obs_detalle || 'par$bol_validar_punto: 0' || const$new_line;
    END IF;


    var$obs_detalle := var$obs_detalle || 'par$cod_pais: ' || par$cod_pais;

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$des_origen,
                                        par$des_version     => const$version,
                                        par$des_detalle     => var$obs_detalle,
                                        par$cod_identificador   => '');
    
   

    /* Validar código pais*/
    /* Al recibir el par$cod_pais de tipo OUT necesito crear una variable*/
    var$cod_pais := par$cod_pais;
    GEPR_PPAIS_###VERSION###.srecuperar_pais(par$oid_llamada => par$oid_llamada,
                          par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                          par$cod_pais => var$cod_pais,
                          par$oid_pais => var$oid_pais,
                          par$cod_cultura => par$cod_cultura);
     
     if var$oid_pais is not null AND par$bol_esmaquina = 1 then
        DBMS_OUTPUT.PUT_LINE('Validar_cuenta: Validacion de DeviceID');
         IF par$cod_device_id IS NULL THEN
          /* 2000020001 - Es obligatorio informar un DeviceID. */
          dbms_output.put_line('Es obligatório informar un DeviceID.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020001', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => 'Es obligatório informar un DeviceID.: 2000020001 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020001', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0),
                                  par$cod_identificador   => '');
         ELSE

          BEGIN
            IF par$cod_identificador_ajeno is null THEN
              SELECT  count(*)
              INTO    var$nel_existe_device_id 
              FROM    sapr_tmaquina maquina
              inner join  gepr_tsector sector on maquina.oid_sector = sector.oid_sector
              inner join gepr_tplanta planta on planta.oid_planta = sector.oid_planta
              inner join gepr_tdelegacion delegacion on delegacion.oid_delegacion = planta.oid_delegacion
              inner join gepr_tpais pais on pais.oid_pais = delegacion.oid_pais
              WHERE
                maquina.cod_identificacion = par$cod_device_id
                and pais.cod_pais = var$cod_pais;
            ELSE
              SELECT  count(*)
              INTO    var$nel_existe_device_id 
              FROM    sapr_tmaquina maquina
              inner join gepr_tcodigo_ajeno camaqui on camaqui.oid_tabla_genesis = maquina.oid_maquina and upper(camaqui.cod_tipo_tabla_genesis) = 'SAPR_TMAQUINA' and camaqui.COD_IDENTIFICADOR = par$cod_identificador_ajeno 
              inner join  gepr_tsector sector on maquina.oid_sector = sector.oid_sector
              inner join gepr_tplanta planta on planta.oid_planta = sector.oid_planta
              inner join gepr_tdelegacion delegacion on delegacion.oid_delegacion = planta.oid_delegacion
              inner join gepr_tpais pais on pais.oid_pais = delegacion.oid_pais
              inner join gepr_tcodigo_ajeno capais on capais.oid_tabla_genesis = pais.oid_pais and upper(capais.cod_tipo_tabla_genesis) = 'GEPR_TPAIS' and capais.COD_IDENTIFICADOR = par$cod_identificador_ajeno
              WHERE
                  camaqui.cod_ajeno = par$cod_device_id
                  and capais.cod_ajeno = var$cod_pais;
            END IF;

          EXCEPTION
            WHEN OTHERS THEN
              var$nel_existe_device_id  := 0;
          END;

          IF var$nel_existe_device_id  = 0 THEN
            /* 2040010008 - No fue posible encontrar una maquina con el codigo Genesis: {0}. */
            dbms_output.put_line('No fue posible encontrar una maquina con el codigo Genesis: {0}.');
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
              VALUES (par$nel_index, '2040010008', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040010008', gepr_pcomon_###VERSION###.const$CodFunGenerico, gepr_pcomon_###VERSION###.const$codAplicacionSaldos, par$cod_device_id, 0), 'VALIDACIONES');
          
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2040010008 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040010008', gepr_pcomon_###VERSION###.const$CodFunGenerico, gepr_pcomon_###VERSION###.const$codAplicacionSaldos, par$cod_device_id, 0),
                                  par$cod_identificador   => '');
          END IF;

        END IF;
     End if;
   
    IF par$cod_cliente IS NULL THEN
      /* 2000020005 - Es obligatorio informar un cliente. */
      dbms_output.put_line('Es obligatorio informar un cliente.');
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2000020005', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020005', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020005 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020005', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0),
                                  par$cod_identificador   => '');
    END IF;
    IF par$bol_validar_punto = 1 THEN
      IF par$cod_sub_cliente IS NULL THEN
        /* 2000020009 - Es obligatorio informar un sub cliente. */
        dbms_output.put_line('Es obligatorio informar un sub cliente.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020009', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020009', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020009 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020009', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0),
                                  par$cod_identificador   => '');
      END IF;
      IF par$cod_punto_servicio IS NULL THEN
        /* 2000020013 - Es obligatorio informar un punto servicio. */
        dbms_output.put_line('Es obligatorio informar un punto servicio.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020013', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020013', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020013 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020013', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0),
                                  par$cod_identificador   => '');
      END IF;
    END IF;

    DBMS_OUTPUT.PUT_LINE('Validar_cuenta: Validacion de codigo de cliente');
    /*CLIENTE*/
    begin
      if par$cod_identificador_ajeno IS NULL then
        select OID_CLIENTE, COD_CLIENTE
          into var$oid_cliente, var$cod_cliente
          from GEPR_TCLIENTE
         where cod_cliente = par$cod_cliente;
      else
        select CA.OID_TABLA_GENESIS, CLIENTE.COD_CLIENTE
          into var$oid_cliente, var$cod_cliente
          from GEPR_TCODIGO_AJENO CA
          inner join GEPR_TCLIENTE CLIENTE ON CA.OID_TABLA_GENESIS = CLIENTE.OID_CLIENTE
         where CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TCLIENTE'
          and CA.cod_ajeno=par$cod_cliente and CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno;
      end if;
      exception
        when no_data_found then
          var$oid_cliente := NULL;
          var$cod_cliente := par$cod_cliente;
    end;

   dbms_output.put_line('var$oid_cliente: ' || var$oid_cliente);
   dbms_output.put_line('var$cod_cliente: ' || var$cod_cliente);

    var$anel_cli_index(var$anel_cli_index.COUNT) :=  par$nel_index;
    var$acod_cli_cliente(var$acod_cli_cliente.COUNT) := var$cod_cliente;
    var$ades_cli_cliente(var$ades_cli_cliente.COUNT) :=  var$cod_cliente;
   
    begin
      select OID_TIPO_CLIENTE
        into var$oid_cli_tipo_cliente
        from GEPR_TTIPO_CLIENTE
       where trim(COD_TIPO_CLIENTE) = '0';
    exception
      when no_data_found then
        var$oid_cli_tipo_cliente:=NULL;
    end;

    var$aoid_cli_tipo_cliente(var$aoid_cli_tipo_cliente.COUNT) := var$oid_cli_tipo_cliente;
    var$acod_cli_bancario(var$acod_cli_bancario.COUNT) := '';
    var$abol_cli_vigente(var$abol_cli_vigente.COUNT) := 1;
    var$abol_cli_totaliza_saldo(var$abol_cli_totaliza_saldo.COUNT) := 0;
    var$abol_cli_abona_por_total(var$abol_cli_abona_por_total.COUNT) := 0;
    var$abol_cli_banco_capital(var$abol_cli_banco_capital.COUNT) := 0;
    var$abol_cli_banco_comision(var$abol_cli_banco_comision.COUNT) := 0;
    var$anum_cli_percent_comision(var$anum_cli_percent_comision.COUNT) := NULL;

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,
                          par$des_detalle     => 'DATOS DE CLIENTE - '          || const$new_line
                                                || 'var$oid_cliente: '          || var$oid_cliente || const$new_line
                                                || 'var$cod_cliente: '          || var$cod_cliente || const$new_line
                                                || 'var$oid_cli_tipo_cliente: ' || var$oid_cli_tipo_cliente
                                                ,
                          par$cod_identificador   => '');

    -- Si el cliente no existe se dará de alta, chequear codigo ajeno
    IF var$oid_cliente IS NULL THEN
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                    par$des_origen      => const$des_origen,
                                    par$des_version     => const$version,
                                    par$des_detalle     => 'El cliente no existe, se dará de alta. Validamos si existe el código ajeno para el alta',
                                    par$cod_identificador   => '');

      BEGIN
        SELECT CLIE.COD_CLIENTE, CLIE.DES_CLIENTE
          INTO var$cod_ajeno_existente, var$des_ajeno_existente
          FROM GEPR_TCODIGO_AJENO AJEN
            INNER JOIN GEPR_TCLIENTE CLIE ON CLIE.OID_CLIENTE = AJEN.OID_TABLA_GENESIS
        WHERE AJEN.COD_TIPO_TABLA_GENESIS = 'GEPR_TCLIENTE' AND 
              AJEN.COD_IDENTIFICADOR = 'MAE' AND 
              AJEN.COD_AJENO = var$cod_cliente;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            var$cod_ajeno_existente := NULL;
            var$des_ajeno_existente := NULL;
      END;
      IF var$cod_ajeno_existente IS NOT NULL THEN
        /*Traducir palabra CLIENTE*/
        var$mensajeEntidadTraducida := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'CLIENTE',
                                    gepr_pcomon_###VERSION###.const$CodFunConfigurarCliente,
                                    gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                    NULL,
                                    0);

        /*Buscamos el mensaje traducido*/
        /*El código externo {0} ya está configurado para el {1} de código {2} y descripción {3}.*/
        var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040010028',
        gepr_pcomon_###VERSION###.const$CodFunGenerico,
        gepr_pcomon_###VERSION###.const$codAplicacionSaldos,
        var$cod_cliente || '|' || var$mensajeEntidadTraducida  || '|' || var$cod_ajeno_existente || '|' ||  var$des_ajeno_existente,
        0);

        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2040010028', var$mensaje, 'VALIDACIONES');

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,
                            par$des_detalle     => var$mensaje,
                            par$cod_identificador   => '');
      END IF;
    END IF;

    /*SUBCLIENTE*/
    begin
      if par$cod_identificador_ajeno IS NULL then
        select OID_SUBCLIENTE, COD_SUBCLIENTE
          into var$oid_subcliente, var$cod_subcliente
          from GEPR_TSUBCLIENTE
         where cod_subcliente = par$cod_sub_cliente
         AND OID_CLIENTE = var$oid_cliente;
      else
        select CA.OID_TABLA_GENESIS, SUBCLI.COD_SUBCLIENTE
          into var$oid_subcliente, var$cod_subcliente
          from GEPR_TCODIGO_AJENO CA
          inner join GEPR_TSUBCLIENTE SUBCLI ON SUBCLI.OID_SUBCLIENTE = CA.OID_TABLA_GENESIS
         where CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TSUBCLIENTE'
          and CA.cod_ajeno=par$cod_sub_cliente and CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno
           AND SUBCLI.OID_CLIENTE = var$oid_cliente;
      end if;
      exception
        when no_data_found then
          var$oid_subcliente := NULL;
          var$cod_subcliente := par$cod_sub_cliente;
    end;

    var$aoid_sc_cliente(var$aoid_sc_cliente.COUNT) := var$oid_cliente;
    var$anel_sc_cli_index(var$anel_sc_cli_index.COUNT) := par$nel_index;
    var$anel_sc_index(var$anel_sc_index.COUNT) := 0;
    var$acod_sc_subcliente(var$acod_sc_subcliente.COUNT) := var$cod_subcliente;
    var$ades_sc_subcliente(var$ades_sc_subcliente.COUNT) := var$cod_subcliente;
    begin
      select OID_TIPO_SUBCLIENTE
        into var$oid_tipo_subcliente
        from gepr_ttipo_subcliente
       where trim(COD_TIPO_SUBCLIENTE) = '0';
      exception
        when no_data_found then
          var$oid_tipo_subcliente := NULL;
    end;

    var$aoid_sc_tipo_subcliente(var$aoid_sc_tipo_subcliente.COUNT) := var$oid_tipo_subcliente;
    var$abol_sc_enviado_saldos(var$abol_sc_enviado_saldos.COUNT) := 0;
    var$abol_sc_vigente(var$abol_sc_vigente.COUNT) := 1;
    var$abol_sc_totaliza_saldo(var$abol_sc_totaliza_saldo.COUNT) := 0;

    dbms_output.put_line('var$oid_subcliente: ' || var$oid_subcliente);
    dbms_output.put_line('var$cod_subcliente: ' || var$cod_subcliente);

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                      par$des_origen      => const$des_origen,
                      par$des_version     => const$version,
                      par$des_detalle     => 'DATOS DE SUBCLIENTE - '       || const$new_line
                                            || 'var$oid_cliente: '          || var$oid_cliente || const$new_line
                                            || 'var$oid_subcliente: '       || var$oid_subcliente || const$new_line
                                            || 'var$cod_subcliente: '       || var$cod_subcliente || const$new_line
                                            || 'var$oid_tipo_subcliente: '  || var$oid_tipo_subcliente
                                            ,
                      par$cod_identificador   => '');

    -- Si el subcliente no existe se dará de alta, chequear codigo ajeno
    IF var$oid_subcliente IS NULL THEN
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                    par$des_origen      => const$des_origen,
                                    par$des_version     => const$version,
                                    par$des_detalle     => 'El subcliente no existe, se dará de alta. Validamos si existe el código ajeno para el alta',
                                    par$cod_identificador   => '');

      BEGIN
        SELECT SUBC.COD_SUBCLIENTE, SUBC.DES_SUBCLIENTE
          INTO var$cod_ajeno_existente, var$des_ajeno_existente
          FROM GEPR_TCODIGO_AJENO AJEN
            INNER JOIN GEPR_TSUBCLIENTE SUBC ON SUBC.OID_SUBCLIENTE = AJEN.OID_TABLA_GENESIS
        WHERE AJEN.COD_TIPO_TABLA_GENESIS = 'GEPR_TSUBCLIENTE' AND 
              AJEN.COD_IDENTIFICADOR = 'MAE' AND 
              AJEN.COD_AJENO = var$cod_subcliente;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            var$cod_ajeno_existente := NULL;
            var$des_ajeno_existente := NULL;
      END;
      IF var$cod_ajeno_existente IS NOT NULL THEN
        /*Traducir palabra SUBCLIENTE*/
        var$mensajeEntidadTraducida := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'SUBCLIENTE',
                                    gepr_pcomon_###VERSION###.const$CodFunConfigurarCliente,
                                    gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                    NULL,
                                    0);

        /*Buscamos el mensaje traducido*/
        /*El código externo {0} ya está configurado para el {1} de código {2} y descripción {3}.*/
        var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040010028',
        gepr_pcomon_###VERSION###.const$CodFunGenerico,
        gepr_pcomon_###VERSION###.const$codAplicacionSaldos,
        var$cod_subcliente || '|' || var$mensajeEntidadTraducida  || '|' || var$cod_ajeno_existente || '|' ||  var$des_ajeno_existente,
        0);

        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2040010028', var$mensaje, 'VALIDACIONES');

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,
                            par$des_detalle     => var$mensaje,
                            par$cod_identificador   => '');
      END IF;
    END IF;

    /*PUNTO DE SERVICIO*/
    begin
      if par$cod_identificador_ajeno IS NULL then
        select OID_PTO_SERVICIO, COD_PTO_SERVICIO
          into var$oid_punto_servicio, var$cod_punto_servicio
          from GEPR_TPUNTO_SERVICIO
         where COD_PTO_SERVICIO = par$cod_punto_servicio
         and OID_SUBCLIENTE = var$oid_subcliente;
      else
        select CA.OID_TABLA_GENESIS, PUNTO.COD_PTO_SERVICIO
          into var$oid_punto_servicio, var$cod_punto_servicio
          from GEPR_TCODIGO_AJENO CA
          inner join GEPR_TPUNTO_SERVICIO PUNTO ON PUNTO.OID_PTO_SERVICIO = CA.OID_TABLA_GENESIS
         where CA.COD_TIPO_TABLA_GENESIS = 'GEPR_TPUNTO_SERVICIO'
          and CA.cod_ajeno=par$cod_punto_servicio and CA.COD_IDENTIFICADOR = par$cod_identificador_ajeno
          and PUNTO.OID_SUBCLIENTE = var$oid_subcliente;
      end if;
      exception
        when no_data_found then
          var$oid_punto_servicio := NULL;
          var$cod_punto_servicio := par$cod_punto_servicio;
    end;


    var$aoid_pto_subcliente(var$aoid_pto_subcliente.COUNT) := var$oid_subcliente;
    var$anel_pto_index(var$anel_pto_index.COUNT) := 0;
    var$anel_pto_sc_index(var$anel_pto_sc_index.COUNT) := 0;
    var$acod_pto_pto_servicio(var$acod_pto_pto_servicio.COUNT) := var$cod_punto_servicio;
    var$ades_pto_pto_servicio(var$ades_pto_pto_servicio.COUNT) := var$cod_punto_servicio;

    dbms_output.put_line('var$cod_punto_servicio: ' ||  var$cod_punto_servicio);

    begin
      select OID_TIPO_PUNTO_SERVICIO
        into var$oid_tipo_punto_serv
        from gepr_ttipo_punto_servicio
       where trim(COD_TIPO_PUNTO_SERVICIO) = '3';
      exception
        when no_data_found then
          var$oid_tipo_punto_serv := NULL;
    end;

    var$aoid_pto_tipo_pto_servicio(var$aoid_pto_tipo_pto_servicio.COUNT) := var$oid_tipo_punto_serv;
    var$abol_pto_vigente(var$abol_pto_vigente.COUNT) := 1;
    var$abol_pto_totaliza_saldo(var$abol_pto_totaliza_saldo.COUNT) := 1;

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => 'DATOS DE PUNTOSERVICIO - '    || const$new_line
                                                        || 'var$oid_punto_servicio: '   || var$oid_punto_servicio || const$new_line
                                                        || 'var$oid_subcliente: '       || var$oid_subcliente || const$new_line
                                                        || 'var$cod_punto_servicio: '   || var$cod_punto_servicio || const$new_line
                                                        || 'var$oid_tipo_punto_serv: '  || var$oid_tipo_punto_serv
                                                        ,
                                  par$cod_identificador   => '');

    -- Si el punto de servicio no existe se dará de alta, chequear codigo ajeno
    IF var$oid_punto_servicio IS NULL THEN
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                    par$des_origen      => const$des_origen,
                                    par$des_version     => const$version,
                                    par$des_detalle     => 'El punto de servicio no existe, se dará de alta. Validamos si existe el código ajeno para el alta',
                                    par$cod_identificador   => '');

      BEGIN
        SELECT PTO.COD_PTO_SERVICIO, PTO.DES_PTO_SERVICIO
          INTO var$cod_ajeno_existente, var$des_ajeno_existente
          FROM GEPR_TCODIGO_AJENO AJEN
            INNER JOIN GEPR_TPUNTO_SERVICIO PTO ON PTO.OID_PTO_SERVICIO = AJEN.OID_TABLA_GENESIS
        WHERE AJEN.COD_TIPO_TABLA_GENESIS = 'GEPR_TPUNTO_SERVICIO' AND 
              AJEN.COD_IDENTIFICADOR = 'MAE' AND 
              AJEN.COD_AJENO = var$cod_punto_servicio;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            var$cod_ajeno_existente := NULL;
            var$des_ajeno_existente := NULL;
      END;
      IF var$cod_ajeno_existente IS NOT NULL THEN
        /*Traducir palabra PUNTOSERVICIO*/
        var$mensajeEntidadTraducida := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'PUNTOSERVICIO',
                                    gepr_pcomon_###VERSION###.const$CodFunConfigurarCliente,
                                    gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                    NULL,
                                    0);

        /*Buscamos el mensaje traducido*/
        /*El código externo {0} ya está configurado para el {1} de código {2} y descripción {3}.*/
        var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040010028',
        gepr_pcomon_###VERSION###.const$CodFunGenerico,
        gepr_pcomon_###VERSION###.const$codAplicacionSaldos,
        var$cod_punto_servicio || '|' || var$mensajeEntidadTraducida  || '|' || var$cod_ajeno_existente || '|' ||  var$des_ajeno_existente,
        0);

        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2040010028', var$mensaje, 'VALIDACIONES');

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,
                            par$des_detalle     => var$mensaje,
                            par$cod_identificador   => '');
      END IF;
    END IF;

    IF NOT fhay_error(par$nel_index => par$nel_index) THEN

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,
                                      par$des_detalle     => 'Previo a grabar clientes',
                                      par$cod_identificador   => '');

      sgrabar_clientes(
                          par$oid_llamada                     => par$oid_llamada,
                          /* CLIENTE */
                          par$anel_cli_index                   => var$anel_cli_index,
                          par$acod_cli_cliente                 => var$acod_cli_cliente,
                          par$ades_cli_cliente                 => var$ades_cli_cliente,
                          par$aoid_cli_tipo_cliente            => var$aoid_cli_tipo_cliente,
                          par$acod_cli_bancario                => var$acod_cli_bancario,
                          par$abol_cli_vigente                 => var$abol_cli_vigente,
                          par$abol_cli_totaliza_saldo          => var$abol_cli_totaliza_saldo,
                          par$abol_cli_abona_por_total         => var$abol_cli_abona_por_total,
                          par$abol_cli_banco_capital           => var$abol_cli_banco_capital,
                          par$abol_cli_banco_comision          => var$abol_cli_banco_comision,
                          par$anum_cli_percent_comision        => var$anum_cli_percent_comision,

                          /* SUBCLIENTE */
                          par$aoid_sc_cliente                  => var$aoid_sc_cliente,
                          par$anel_sc_cli_index                => var$anel_sc_cli_index,
                          par$anel_sc_index                    => var$anel_sc_index,
                          par$acod_sc_subcliente               => var$acod_sc_subcliente,
                          par$ades_sc_subcliente               => var$ades_sc_subcliente,
                          par$aoid_sc_tipo_subcliente          => var$aoid_sc_tipo_subcliente,
                          par$abol_sc_enviado_saldos           => var$abol_sc_enviado_saldos,
                          par$abol_sc_vigente                  => var$abol_sc_vigente,
                          par$abol_sc_totaliza_saldo           => var$abol_sc_totaliza_saldo,

                          /* PUNTO_SERVICIO */
                          par$aoid_pto_subcliente              => var$aoid_pto_subcliente,
                          par$anel_pto_index                   => var$anel_pto_index,
                          par$anel_pto_sc_index                => var$anel_pto_sc_index,
                          par$acod_pto_pto_servicio            => var$acod_pto_pto_servicio,
                          par$ades_pto_pto_servicio            => var$ades_pto_pto_servicio,
                          par$aoid_pto_tipo_pto_servicio       => var$aoid_pto_tipo_pto_servicio,
                          par$abol_pto_vigente                 => var$abol_pto_vigente,
                          par$abol_pto_totaliza_saldo          => var$abol_pto_totaliza_saldo,
                          par$cod_usuario                      => par$cod_usuario);


      IF par$cod_identificador_ajeno IS NULL THEN

        IF par$bol_esmaquina = 1 THEN
          /* Maquinas */
          BEGIN
            SELECT MAQU.OID_SECTOR, MAQU.COD_IDENTIFICACION, MAQU.BOL_ACTIVO
              INTO var$cuenta_mov.oid_sector, var$cuenta_mov.cod_sector, var$bol_mae_activo
              FROM SAPR_TMAQUINA MAQU WHERE MAQU.COD_IDENTIFICACION = par$cod_device_id;

          EXCEPTION WHEN no_data_found THEN
            var$bol_mae_activo := 0; var$cuenta_mov.oid_sector := NULL; var$cuenta_mov.cod_sector := NULL;
          END;

        ELSE
          /* Sector */
          BEGIN
            SELECT SECT.OID_SECTOR, SECT.COD_SECTOR, SECT.BOL_ACTIVO
              INTO var$cuenta_mov.oid_sector, var$cuenta_mov.cod_sector, var$bol_mae_activo
              FROM GEPR_TSECTOR SECT WHERE SECT.COD_SECTOR = par$cod_device_id;

          EXCEPTION WHEN no_data_found THEN
            var$bol_mae_activo := 0; var$cuenta_mov.oid_sector := NULL; var$cuenta_mov.cod_sector := NULL;
          END;
        END IF;

        /* Cliente */
        BEGIN
          SELECT CLIEN.OID_CLIENTE, CLIEN.COD_CLIENTE, CLIEN.BOL_VIGENTE
            INTO var$cuenta_mov.oid_cliente, var$cuenta_mov.cod_cliente, var$bol_cliente_activo
            FROM GEPR_TCLIENTE CLIEN
           WHERE CLIEN.COD_CLIENTE = par$cod_cliente;

        EXCEPTION WHEN no_data_found THEN
          var$bol_cliente_activo := 0; var$cuenta_mov.oid_cliente := NULL; var$cuenta_mov.cod_cliente := NULL;
        END;

        IF par$bol_validar_punto = 1 THEN

          /* SubCliente */
          BEGIN
            SELECT SBCL.OID_SUBCLIENTE, SBCL.COD_SUBCLIENTE, SBCL.BOL_VIGENTE
              INTO var$cuenta_mov.oid_subcliente, var$cuenta_mov.cod_subcliente, var$bol_sub_cliente_activo
              FROM GEPR_TSUBCLIENTE SBCL             
             WHERE SBCL.COD_SUBCLIENTE = par$cod_sub_cliente AND SBCL.OID_CLIENTE = var$cuenta_mov.oid_cliente;

          EXCEPTION WHEN no_data_found THEN
            var$bol_sub_cliente_activo := 0; var$cuenta_mov.oid_subcliente := NULL; var$cuenta_mov.cod_subcliente := NULL;
          END;

          /* PuntoServicio */
          BEGIN
            SELECT PUSE.OID_PTO_SERVICIO, PUSE.COD_PTO_SERVICIO, PUSE.BOL_VIGENTE
              INTO var$cuenta_mov.oid_pto_servicio, var$cuenta_mov.cod_pto_servicio, var$bol_pto_servicio_activo
              FROM GEPR_TPUNTO_SERVICIO PUSE
             WHERE PUSE.COD_PTO_SERVICIO = par$cod_punto_servicio AND PUSE.OID_SUBCLIENTE = var$cuenta_mov.oid_subcliente;

          EXCEPTION WHEN no_data_found THEN
            var$bol_pto_servicio_activo := 0; var$cuenta_mov.oid_pto_servicio := NULL; var$cuenta_mov.cod_pto_servicio := NULL;
          END;

        END IF;

        /* Canal */
        BEGIN
              SELECT CANA.OID_CANAL, CANA.COD_CANAL, CANA.BOL_VIGENTE
                INTO var$cuenta_mov.oid_canal, var$cuenta_mov.cod_canal, var$bol_canal_activo
                FROM GEPR_TCANAL CANA
              WHERE CANA.COD_CANAL = par$cod_canal;

        EXCEPTION WHEN no_data_found THEN
          var$bol_canal_activo := 0; var$cuenta_mov.oid_canal := NULL; var$cuenta_mov.cod_canal := NULL;
        END;

        /* SubCanal */
        BEGIN
              SELECT SBCA.OID_SUBCANAL, SBCA.COD_SUBCANAL, SBCA.BOL_VIGENTE
                INTO var$cuenta_mov.oid_subcanal, var$cuenta_mov.cod_subcanal, var$bol_sub_canal_activo
                FROM GEPR_TSUBCANAL SBCA
                WHERE SBCA.COD_SUBCANAL =   par$cod_sub_canal;
        EXCEPTION WHEN no_data_found THEN
          var$bol_sub_canal_activo := 0; var$cuenta_mov.oid_subcanal := NULL; var$cuenta_mov.cod_subcanal := NULL;
        END;

      ELSE

        IF par$bol_esmaquina = 1 THEN
              /* Maquinas */
              BEGIN
                SELECT MAQU.OID_SECTOR, MAQU.COD_IDENTIFICACION, MAQU.BOL_ACTIVO
                  INTO var$cuenta_mov.oid_sector, var$cuenta_mov.cod_sector, var$bol_mae_activo
                  FROM SAPR_TMAQUINA MAQU
            INNER JOIN GEPR_TSECTOR SECT ON SECT.OID_SECTOR = MAQU.OID_SECTOR
            INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = SECT.OID_SECTOR
                                              AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                              AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TSECTOR'
                                              AND COAJ.COD_AJENO = par$cod_device_id;

              EXCEPTION WHEN no_data_found THEN
                var$bol_mae_activo := 0; var$cuenta_mov.oid_sector := NULL; var$cuenta_mov.cod_sector := NULL;
              END;

        ELSE
              /* Sector */
              BEGIN
                SELECT SECT.OID_SECTOR, SECT.COD_SECTOR, SECT.BOL_ACTIVO
                  INTO var$cuenta_mov.oid_sector, var$cuenta_mov.cod_sector, var$bol_mae_activo
                  FROM GEPR_TSECTOR SECT
            INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = SECT.OID_SECTOR
                                              AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                              AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TSECTOR'
                                              AND COAJ.COD_AJENO = par$cod_device_id;

              EXCEPTION WHEN no_data_found THEN
                var$bol_mae_activo := 0; var$cuenta_mov.oid_sector := NULL; var$cuenta_mov.cod_sector := NULL;
              END;

        END IF;

          /* Cliente */
          BEGIN
            SELECT CLIEN.OID_CLIENTE, CLIEN.COD_CLIENTE, CLIEN.BOL_VIGENTE
              INTO var$cuenta_mov.oid_cliente, var$cuenta_mov.cod_cliente, var$bol_cliente_activo
              FROM GEPR_TCLIENTE CLIEN
        INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = CLIEN.OID_CLIENTE
                                          AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                          AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TCLIENTE'
                                          AND COAJ.COD_AJENO = par$cod_cliente;

          EXCEPTION WHEN no_data_found THEN
            var$bol_cliente_activo := 0; var$cuenta_mov.oid_cliente := NULL; var$cuenta_mov.cod_cliente := NULL;
          END;

        IF par$bol_validar_punto = 1 THEN

              /* SubCliente */
              BEGIN
                SELECT SBCL.OID_SUBCLIENTE, SBCL.COD_SUBCLIENTE, SBCL.BOL_VIGENTE
                  INTO var$cuenta_mov.oid_subcliente, var$cuenta_mov.cod_subcliente, var$bol_sub_cliente_activo
                  FROM GEPR_TSUBCLIENTE SBCL
            INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = SBCL.OID_SUBCLIENTE
                                              AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                              AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TSUBCLIENTE'
                                              AND COAJ.COD_AJENO = par$cod_sub_cliente;

              EXCEPTION WHEN no_data_found THEN
                var$bol_sub_cliente_activo := 0; var$cuenta_mov.oid_subcliente := NULL; var$cuenta_mov.cod_subcliente := NULL;
              END;

              /* PuntoServicio */
              BEGIN
                SELECT PUSE.OID_PTO_SERVICIO, PUSE.COD_PTO_SERVICIO, PUSE.BOL_VIGENTE
                  INTO var$cuenta_mov.oid_pto_servicio, var$cuenta_mov.cod_pto_servicio, var$bol_pto_servicio_activo
                  FROM GEPR_TPUNTO_SERVICIO PUSE
            INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = PUSE.OID_PTO_SERVICIO
                                              AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                              AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TPUNTO_SERVICIO'
                                              AND COAJ.COD_AJENO = par$cod_punto_servicio;

              EXCEPTION WHEN no_data_found THEN
                var$bol_pto_servicio_activo := 0; var$cuenta_mov.oid_pto_servicio := NULL; var$cuenta_mov.cod_pto_servicio := NULL;
              END;

        END IF;

          /* Canal */
        BEGIN
              SELECT CANA.OID_CANAL, CANA.COD_CANAL, CANA.BOL_VIGENTE
                INTO var$cuenta_mov.oid_canal, var$cuenta_mov.cod_canal, var$bol_canal_activo
                FROM GEPR_TCANAL CANA
          INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = CANA.OID_CANAL
                                            AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                            AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TCANAL'
                                            AND COAJ.COD_AJENO = par$cod_canal;

        EXCEPTION WHEN no_data_found THEN
          var$bol_canal_activo := 0; var$cuenta_mov.oid_canal := NULL; var$cuenta_mov.cod_canal := NULL;
        END;

        /* SubCanal */
        BEGIN
              SELECT SBCA.OID_SUBCANAL, SBCA.COD_SUBCANAL, SBCA.BOL_VIGENTE
                INTO var$cuenta_mov.oid_subcanal, var$cuenta_mov.cod_subcanal, var$bol_sub_canal_activo
                FROM GEPR_TSUBCANAL SBCA
          INNER JOIN GEPR_TCODIGO_AJENO COAJ ON COAJ.OID_TABLA_GENESIS = SBCA.OID_SUBCANAL
                                            AND COAJ.COD_IDENTIFICADOR = par$cod_identificador_ajeno
                                            AND COAJ.COD_TIPO_TABLA_GENESIS = 'GEPR_TSUBCANAL'
                                            AND COAJ.COD_AJENO = par$cod_sub_canal;
        EXCEPTION WHEN no_data_found THEN
          var$bol_sub_canal_activo := 0; var$cuenta_mov.oid_subcanal := NULL; var$cuenta_mov.cod_subcanal := NULL;
        END;

      END IF;

      IF var$cuenta_mov.oid_sector IS NOT NULL THEN

        /* Delegacion y Planta */
        BEGIN
              SELECT PLAN.OID_PLANTA, PLAN.OID_DELEGACION
                INTO var$cuenta_mov.oid_planta, var$cuenta_mov.oid_delegacion
                FROM GEPR_TSECTOR SECT
          INNER JOIN GEPR_TPLANTA PLAN ON PLAN.OID_PLANTA = SECT.OID_PLANTA
               WHERE SECT.OID_SECTOR = var$cuenta_mov.oid_sector;

        EXCEPTION WHEN no_data_found THEN
          var$cuenta_mov.oid_planta := NULL; var$cuenta_mov.oid_delegacion := NULL;
        END;

      END IF;

      /* === Validaciones === */

      /* Maquina */
      IF par$bol_esmaquina = 1 THEN
        IF var$cuenta_mov.oid_sector IS NULL THEN

          IF par$cod_identificador_ajeno IS NULL THEN
            /* 2000020002 - No existe una máquina con el DeviceID [{0}] configurada en Génesis Producto. */
            dbms_output.put_line('No existe una máquina con el DeviceID [{0}] configurada en Génesis Producto.');
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
              VALUES (par$nel_index, '2000020002', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020002', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_device_id, 0), 'VALIDACIONES');
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020002 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020002', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_device_id, 0),
                                  par$cod_identificador   => '');
          ELSE
            /* 2000020003 - No fue posible identificar un DeviceID en Genesis Producto, utilizando el codigo identificador [{0}] y el codigo ajeno [{0}]. */
            dbms_output.put_line('No fue posible identificar un DeviceID en Genesis Producto, utilizando el codigo identificador [{0}] y el codigo ajeno [{0}].');
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
              VALUES (par$nel_index, '2000020003', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020003', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_device_id, 0), 'VALIDACIONES');

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020003 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020003', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_device_id, 0),
                                  par$cod_identificador   => '');
          END IF;

        ELSIF var$bol_mae_activo = 0 THEN
          /* 2000020004 - La maquina no está activa. */
          dbms_output.put_line('La maquina no está activa.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020004', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020004 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020004', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0),
                                  par$cod_identificador   => '');
        END IF;
      END IF;

      /* Cliente */
      IF var$cuenta_mov.oid_cliente IS NULL THEN

        IF par$cod_identificador_ajeno IS NULL THEN
          /* 2000020006 - No existe el cliente [{0}] configurado en Genesis Producto. */
          dbms_output.put_line('No existe el cliente [{0}] configurado en Genesis Producto.');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020006', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020006', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_cliente, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020006 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020006', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_cliente, 0),
                                  par$cod_identificador   => '');
        ELSE
          /* 2000020007 - No fue posible identificar un cliente en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}]. */
          dbms_output.put_line('No fue posible identificar un cliente en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}].');
          INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
            VALUES (par$nel_index, '2000020007', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020007', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_cliente, 0), 'VALIDACIONES');

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020007 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020007', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_cliente, 0),
                                  par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$bol_validar_punto = 1 THEN
        /* SubCliente */
        IF var$cuenta_mov.oid_subcliente IS NULL THEN

          IF par$cod_identificador_ajeno IS NULL THEN
            /* 2000020010 - No existe el sub cliente [{0}] configurado en Genesis Producto. */
            dbms_output.put_line('No existe el sub cliente [{0}] configurado en Genesis Producto.');
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
              VALUES (par$nel_index, '2000020010', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020010', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_sub_cliente, 0), 'VALIDACIONES');

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020010 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020010', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_sub_cliente, 0),
                                  par$cod_identificador   => '');
          ELSE
            /* 2000020011 - No fue posible identificar un sub cliente en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}]. */
            dbms_output.put_line('No fue posible identificar un sub cliente en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}].');
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
              VALUES (par$nel_index, '2000020011', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020011', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_sub_cliente, 0), 'VALIDACIONES');

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020011 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020011', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_sub_cliente, 0),
                                  par$cod_identificador   => '');
          END IF;
        END IF;

        /* Punto Servicio */
        IF var$cuenta_mov.oid_pto_servicio IS NULL THEN

          IF par$cod_identificador_ajeno IS NULL THEN
            /* 2000020014 - No existe el punto de servicio [{0}] configurado en Genesis Producto. */
            dbms_output.put_line('No existe el punto de servicio [{0}] configurado en Genesis Producto.');
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
              VALUES (par$nel_index, '2000020014', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020014', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_punto_servicio, 0), 'VALIDACIONES');

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020014 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020014', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_punto_servicio, 0),
                                  par$cod_identificador   => '');
          ELSE
            /* 2000020015 - No fue posible identificar un Punto Servicio en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}]. */
            dbms_output.put_line('No fue posible identificar un Punto Servicio en Genesis Producto, utilizando el codico identificador [{0}] y el codigo ajeno [{0}].');
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
              VALUES (par$nel_index, '2000020015', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020015', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_punto_servicio, 0), 'VALIDACIONES');

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020015 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020015', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_identificador_ajeno || '|' || par$cod_punto_servicio, 0),
                                  par$cod_identificador   => '');
          END IF;
        END IF;
      END IF;

      /* Canal */
      IF var$cuenta_mov.oid_canal IS NULL THEN
        /* 2000020019 - No existe el canal [{0}] configurado en Genesis Producto. */
        dbms_output.put_line('No existe el canal [{0}] configurado en Genesis Producto.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020019', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020019', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_canal, 0), 'VALIDACIONES');

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020019 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020019', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_canal, 0),
                                  par$cod_identificador   => '');
      ELSIF var$bol_canal_activo = 0 THEN
        /* 2000020020 - El canal no está activo. */
        dbms_output.put_line('El canal no está activo.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020020', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020020', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020020 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020020', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0),
                                  par$cod_identificador   => '');
      END IF;

      /* SubCanal */
      IF var$cuenta_mov.oid_subcanal IS NULL THEN
        /* 2000020021 - No existe el sub canal [{0}] configurado en Genesis Producto. */
        dbms_output.put_line('No existe el sub canal [{0}] configurado en Genesis Producto.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020021', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020021', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_sub_canal, 0), 'VALIDACIONES');

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020021 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020021', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, par$cod_sub_canal, 0),
                                  par$cod_identificador   => '');
      ELSIF var$bol_sub_canal_activo = 0 THEN
        /* 2000020022 - El sub canal no está activo. */
        dbms_output.put_line('El sub canal no está activo.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000020022', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020022', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => '2000020022 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000020022', gepr_pcomon_###VERSION###.const$CodFunGenericoCuentas, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0),
                                  par$cod_identificador   => '');
      END IF;

      IF NOT fhay_error(par$nel_index => par$nel_index) THEN
        /* Recuperar cuenta */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => 'Previo a sapr_pcuentas_###VERSION###.srecuperar_cuenta',
                                  par$cod_identificador   => '');

        sapr_pcuentas_###VERSION###.srecuperar_cuenta(par$cuenta_mov     => var$cuenta_mov,
                                             par$cuenta_sal     => var$cuenta_sal,
                                             par$oid_formulario => NULL,
                                             par$cod_usuario    => par$cod_usuario,
                                             par$cod_cultura    => par$cod_cultura,
                                             par$inserts        => var$nel_inserts,
                                             par$updates        => var$nel_updates,
                                             par$selects        => var$nel_selects);
          
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$des_origen,
                                par$des_version     => const$version,
                                par$des_detalle     => 'sapr_pcuentas_###VERSION###.srecuperar_cuenta(par$cuenta_mov.oid_cuenta: '  || var$cuenta_mov.oid_cuenta || ', par$cuenta_mov.oid_sector: ' || var$cuenta_mov.oid_sector || const$new_line
                                || 'par$cuenta_sal.oid_cuenta: ' || var$cuenta_sal.oid_cuenta || const$new_line
                                || 'par$oid_formulario: ' || 'NULL' || const$new_line
                                || 'par$cod_usuario: ' || par$cod_usuario || const$new_line
                                || 'par$cod_cultura: ' || par$cod_cultura || const$new_line
                                || 'par$inserts: ' || var$nel_inserts || const$new_line
                                || 'par$updates: ' || var$nel_updates || const$new_line
                                || 'par$selects: ' || var$nel_selects,
                                par$cod_identificador   => '');
      END IF;

      /* Retorno */
      par$oid_cuenta := var$cuenta_mov.oid_cuenta;
      par$oid_sector := var$cuenta_mov.oid_sector;

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,
                                  par$des_detalle     => 'RETORNO:' || const$new_line
                                  || 'par$oid_cuenta: ' || var$cuenta_mov.oid_cuenta || const$new_line
                                  || 'par$oid_sector: ' || var$cuenta_mov.oid_sector,
                                  par$cod_identificador   => '');

    END IF;

  END svalidar_cuenta;

  /* Validar Fecha */
  PROCEDURE svalidar_fecha(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                           par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                           par$oid_sector_mae          IN gepr_pcomon_###VERSION###.tipo$oid_,
                           par$nel_gmt_minuto          IN gepr_pcomon_###VERSION###.tipo$nel_,
                           par$fyh_gestion             IN OUT gepr_pcomon_###VERSION###.tipo$fyh_,
                           par$fyh_gestion_gmt0        OUT gepr_pcomon_###VERSION###.tipo$fyh_,
                           par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'svalidar_fecha';
    var$oid_delegacion gepr_pcomon_###VERSION###.tipo$oid_;
    var$nel_gmt_minuto gepr_pcomon_###VERSION###.tipo$nel_;
  BEGIN

    IF par$fyh_gestion IS NULL THEN
        /* 2000050001 - Es obligatório informar una Fecha y Hora. */
        dbms_output.put_line('Es obligatório informar una Fecha y Hora.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2000050001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000050001', gepr_pcomon_###VERSION###.const$CodFunGenericoFechaHora, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => '2000050001 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2000050001', gepr_pcomon_###VERSION###.const$CodFunGenericoFechaHora, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0),
                        par$cod_identificador   => '');
        
    ELSE

      /* Delegacion */
      BEGIN
            SELECT PLAN.OID_DELEGACION
              INTO var$oid_delegacion
              FROM GEPR_TSECTOR SECT
        INNER JOIN GEPR_TPLANTA PLAN ON PLAN.OID_PLANTA = SECT.OID_PLANTA
             WHERE SECT.OID_SECTOR = par$oid_sector_mae;

      EXCEPTION WHEN no_data_found THEN
        var$oid_delegacion := NULL;
      END;

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Se recupera var$oid_delegacion para scalcular_gmt: ' || var$oid_delegacion,
                              par$cod_identificador   => '');

      var$nel_gmt_minuto := NULL;
      /* Calcular la fecha GMT */
      gepr_putilidades_###VERSION###.scalcular_gmt(par$fyh_gestion    => par$fyh_gestion,
                                          par$oid_delegacion => var$oid_delegacion,
                                          par$nel_gmt_minuto => var$nel_gmt_minuto,
                                          par$cod_cultura    => par$cod_cultura);

      IF (par$nel_gmt_minuto IS NULL) THEN
        par$fyh_gestion_gmt0 := gepr_putilidades_###VERSION###.fsomar_fecha(par$fyh_gestion, var$nel_gmt_minuto * -1);
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'par$nel_gmt_minuto: NULL' ||
                                              ', var$nel_gmt_minuto: ' || var$nel_gmt_minuto ||  
                                              ', par$fyh_gestion_gmt0: ' || TO_CHAR(par$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS')  || 
                                              ', par$fyh_gestion: ' || TO_CHAR(par$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS'),
                        par$cod_identificador   => '');

      ELSE
        par$fyh_gestion_gmt0 := gepr_putilidades_###VERSION###.fsomar_fecha(par$fyh_gestion, par$nel_gmt_minuto * -1);
        par$fyh_gestion := gepr_putilidades_###VERSION###.fsomar_fecha(par$fyh_gestion_gmt0, var$nel_gmt_minuto);

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'par$nel_gmt_minuto: ' || par$nel_gmt_minuto  || 
                                              ', var$nel_gmt_minuto: ' || var$nel_gmt_minuto ||  
                                              ', par$fyh_gestion_gmt0: ' || TO_CHAR(par$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS')  || 
                                              ', par$fyh_gestion: ' || TO_CHAR(par$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS'),
                        par$cod_identificador   => '');

      END IF;

    END IF;

  END svalidar_fecha;

  PROCEDURE svalidar_actual_id(par$oid_llamada          IN gepr_pcomon_###VERSION###.tipo$oid_,
                                   par$nel_index        IN gepr_pcomon_###VERSION###.tipo$nel_,
                                   par$fyh_gestion      IN gepr_pcomon_###VERSION###.tipo$fyh_,                                   
                                   par$cod_actual_id    IN gepr_pcomon_###VERSION###.tipo$desc_,                                 
                                   par$cod_cultura      IN gepr_pcomon_###VERSION###.tipo$cod_) IS
    var$nel_existe      gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'svalidar_actual_id';
  BEGIN  
    BEGIN

      SELECT COUNT(1)
      INTO var$nel_existe
      FROM SAPR_TDOCUMENTO D
      WHERE D.COD_ACTUAL_ID = par$cod_actual_id;

      IF var$nel_existe > 0 THEN
        dbms_output.put_line('El "ActualID" informado ya existe en la base de datos.');
        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
        VALUES (par$nel_index, '2040010024', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040010024', gepr_pcomon_###VERSION###.const$CodFunGenerico, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, '', 0), 'VALIDACIONES');

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'El "ActualID" (' || par$cod_actual_id || ') informado ya existe en la base de datos - 2040010024 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040010024', gepr_pcomon_###VERSION###.const$CodFunGenerico, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, '', 0),
                        par$cod_identificador   => '');
      END IF;
    EXCEPTION WHEN no_data_found THEN
      var$nel_existe := 0;          
    END;
  END svalidar_actual_id;


 /* Grabar Movimientos de CashOut */
  PROCEDURE sgrabar_mov_cashout(par$oid_llamada     IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_cashout';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);


      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$bol_controla_faturacion   gepr_pcomon_###VERSION###.tipo$nbol_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$nel_secuencia           gepr_pcomon_###VERSION###.tipo$nel_ := 0;

      /* Formularios */
      var$oid_formulario_maecoc     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maecoc gepr_pcomon_###VERSION###.tipo$oid_;
      var$var$des_cod_externo_maecoc    gepr_pcomon_###VERSION###.tipo$cod_;


      /* Cuentas */
      var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable        gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
      var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
      var$acndoc_collection_id        gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$aux_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$aux_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_; 

      var$auxt_oid_termino      gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor        gepr_pcomon_###VERSION###.tipo$descs_;
      var$aux_nel_secuencia     gepr_pcomon_###VERSION###.tipo$nel_;
      var$obs_detalle           gepr_pcomon_###VERSION###.tipo$obs_; 

    BEGIN

      /* #### Inicializar los cursores #### */
      OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
      OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
      OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

      /* Limpiar tabla temporaria */
      DELETE SAPR_GTT_TAUXILIAR;
      COMMIT;

      var$obs_detalle := 'par$oid_llamada: ' || par$oid_llamada || const$new_line;
      IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
        FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
          var$obs_detalle := var$obs_detalle || 'par$anel_index('|| idx ||'): ' || par$anel_index(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_device_id('|| idx ||'): ' || par$acod_device_id(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_cliente('|| idx ||'): ' || par$acod_cliente(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_sub_cliente('|| idx ||'): ' || par$acod_sub_cliente(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acod_punto_servicio('|| idx ||'): ' || par$acod_punto_servicio(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$afyh_gestion('|| idx ||'): ' || par$afyh_gestion(idx) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$afyh_contable('|| idx ||'): ' || par$afyh_contable(idx) || const$new_line;
        END LOOP;
      END IF;
      IF par$acndoc_cod_sub_canal IS NOT NULL AND par$acndoc_cod_sub_canal.COUNT > 0 THEN
        FOR idxC IN par$acndoc_cod_sub_canal.first .. par$acndoc_cod_sub_canal.last LOOP
          var$obs_detalle := var$obs_detalle || 'par$acndoc_cod_canal('|| idxC ||'): ' || par$acndoc_cod_canal(idxC) || const$new_line;
          var$obs_detalle := var$obs_detalle || 'par$acndoc_cod_sub_canal('|| idxC ||'): ' || par$acndoc_cod_sub_canal(idxC) || const$new_line;
        END LOOP;
      END IF;

      IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
        FOR idx IN par$acod_actual_id.first .. par$acod_actual_id.last LOOP
          var$obs_detalle := var$obs_detalle || 'par$acod_actual_id('|| idx ||'): ' || par$acod_actual_id(idx) || const$new_line; 
        END LOOP;
      END IF;
      
      IF par$acndoc_collection_id IS NOT NULL AND par$acndoc_collection_id.COUNT > 0 THEN
        FOR idx IN par$acndoc_collection_id.first .. par$acndoc_collection_id.last LOOP
          var$obs_detalle := var$obs_detalle || 'par$acndoc_collection_id('|| idx ||'): ' || par$acndoc_collection_id(idx) || const$new_line; 
        END LOOP;
      END IF;

      var$obs_detalle := var$obs_detalle || 'par$oid_llamada: ' || par$oid_llamada || const$new_line;
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$obs_detalle,
                            par$cod_identificador   => '');

      /* Recuperar Formularios - MAECOC */
      srecuperar_formularios(par$cod_formulario     => 'MAECOC',
                             par$oid_formulario     => var$oid_formulario_maecoc,
                             par$oid_tipo_documento => var$oid_tipo_documento_maecoc,
                             par$des_cod_externo    => var$var$des_cod_externo_maecoc);


      IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
        FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
          BEGIN
            /* Limpiar tabla temporaria */
            DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
            var$adocs_oid.delete;
            var$adocs_oid_formulario.delete;
            var$adocs_fyh_gestion.delete;
            var$adocs_fyh_contable.delete;
            var$acod_actual_id.delete;
            var$adocs_cod_externo.delete;
            var$adocs_oid_cuenta_ori.delete;
            var$adocs_oid_cuenta_des.delete;
            var$adocs_oid_cuentasaldo_ori.delete;
            var$adocs_oid_cuentasaldo_des.delete;
            var$adocs_oid_sector_ori.delete;
            var$adocs_oid_sector_des.delete;
            var$aefdoc_oid_documento.delete;
            var$aefdoc_oid_divisa.delete;
            var$aefdoc_oid_denominacion.delete;
            var$aefdoc_oid_unid_medida.delete;
            var$aefdoc_cod_niv_detalle.delete;
            var$aefdoc_cod_tp_efec_tot.delete;
            var$aefdoc_oid_calidad.delete;
            var$aefdoc_num_importe.delete;
            var$aefdoc_nel_cantidad.delete;
            var$avtdoc_oid_documento.delete;
            var$avtdoc_oid_termino.delete;
            var$avtdoc_des_valor.delete;

            svalidar_actual_id(par$oid_llamada        => par$oid_llamada,
                                        par$nel_index       => par$anel_index(idx),
                                        par$fyh_gestion      => par$afyh_gestion(idx),                                   
                                        par$cod_actual_id    => par$acod_actual_id(idx),                                 
                                        par$cod_cultura      => par$cod_cultura); 
            var$aux_nel_secuencia := 0;
            IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
              IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
                FOR idxC IN par$acndoc_nel_index.first .. par$acndoc_nel_index.last LOOP
                  var$auxt_oid_termino.delete;
                  var$auxt_des_valor.delete;
                  var$aux_oid_divisa.delete;  
                  var$aux_oid_denominacion.delete;  
                  var$aux_oid_unid_medida.delete;  
                  var$aux_cod_niv_detalle.delete;  
                  var$aux_cod_tp_efec_tot.delete;  
                  var$aux_oid_calidad.delete;  
                  var$aux_num_importe.delete;
                  var$aux_nel_cantidad.delete;
                  var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);

                  /* Procedure responsable por validaciones del documento */
                  svalidar_mov_cashout(par$oid_llamada   => par$oid_llamada,
                                          par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                          par$nel_index               => par$anel_index(idx),
                                          par$cod_device_id           => par$acod_device_id(idx),
                                          par$cod_cliente             => par$acod_cliente(idx),
                                          par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                          par$cod_punto_servicio      => par$acod_punto_servicio(idx),   
                                          par$cod_canal               => par$acndoc_cod_canal(idxC),
                                          par$cod_sub_canal           => par$acndoc_cod_sub_canal(idxC),
                                          par$cod_actual              => par$acod_actual_id(idx),
                                          par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                          par$oid_sector_mae          => var$oid_sector_mae,
                                          par$cod_cultura             => par$cod_cultura,
                                          par$cod_usuario             => par$cod_usuario,
                                          par$cod_pais                => par$cod_pais);

                  IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN

                    /* Validar fecha gestion */
                    var$fyh_gestion      := par$afyh_gestion(idx);
                    svalidar_fecha(par$oid_llamada      => par$oid_llamada,
                                  par$nel_index        => par$anel_index(idx),
                                  par$oid_sector_mae   => var$oid_sector_mae,
                                  par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                  par$fyh_gestion      => var$fyh_gestion,
                                  par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                  par$cod_cultura      => par$cod_cultura);

                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Fecha Gestion: var$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0,
                                  par$cod_identificador   => '');


                    /* Validar fecha contable */
                    IF par$afyh_contable(idx) IS NULL THEN
                      var$fyh_contable_gmt0      := var$fyh_gestion_gmt0;                            
                    ELSE
                      var$fyh_contable      := par$afyh_contable(idx);
                      svalidar_fecha(par$oid_llamada => par$oid_llamada,
                                  par$nel_index     => par$anel_index(idx),
                                  par$oid_sector_mae   => var$oid_sector_mae,
                                  par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                  par$fyh_gestion      => var$fyh_contable,
                                  par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                                  par$cod_cultura      => par$cod_cultura);

                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Fecha Contable : var$fyh_contable_gmt0: ' || var$fyh_contable_gmt0,
                                  par$cod_identificador   => '');
                    END IF;

                    /* Validar Codigo externo */
                    IF fvalidar_codigo_externo(par$anel_index(idx), var$var$des_cod_externo_maecoc, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN

                      var$oid_documento := sys_guid();
                      var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                      var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maecoc;
                      var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maecoc;
                      var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                      var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                      var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                      var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                      var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                      var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);

                      /* Formulario y Codigo Externo */
                      var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$var$des_cod_externo_maecoc,
                                                                                                  par$cod_device_id       => par$acod_device_id(idx),
                                                                                                  par$fyh_gestion         => var$fyh_gestion,
                                                                                                  par$cod_precinto        => NULL,
                                                                                                  par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                  par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                  par$nel_sumar_secuencia => var$aux_nel_secuencia);
                      /* LOG de código externo  */
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                    'fcargar_codigo_externo:' || 
                                    ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                    ,
                                par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));                                                                          
                      var$aux_nel_secuencia := var$aux_nel_secuencia + 1;

                      /* Campos Adcionales */
                      IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                        FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                          IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                            par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                            par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                              svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                par$cod_usuario         => par$cod_usuario,
                                                par$cod_cultura         => par$cod_cultura);

                          END IF;
                        END LOOP;
                      END IF;

                      /* Valores */
                      IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
                        FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP
                          IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_det_index(idxt) = par$acndoc_det_index(idxC) THEN
                            /*Utilizar validar_valores () */
                            svalidar_valores( par$oid_llamada               => par$oid_llamada,
                                              par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                              par$nel_index                 => par$anel_index(idx),
                                              par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                              par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                              par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                              par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                              par$saida_oid_divisa          => var$aux_oid_divisa(var$aux_oid_divisa.COUNT),
                                              par$saida_oid_denominacio     => var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT),
                                              par$saida_oid_unid_medida     => var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT),
                                              par$saida_cod_niv_detalle     => var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT),
                                              par$saida_cod_tp_efec_tot     => var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT),
                                              par$saida_oid_calidad         => var$aux_oid_calidad(var$aux_oid_calidad.COUNT),
                                              par$saida_num_importe         => var$aux_num_importe(var$aux_num_importe.COUNT),
                                              par$saida_nel_cantidad        => var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT),
                                              par$cod_cultura               => par$cod_cultura);
                          END IF;
                        END LOOP;
                      END IF;

                      IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                        /* Campos Adcionales */
                        IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                          FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                            var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                            var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                            var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                          END LOOP;
                        END IF;

                        /* Valores */
                        IF var$aux_oid_divisa IS NOT NULL AND var$aux_oid_divisa.COUNT > 0 THEN
                          FOR idxt IN var$aux_oid_divisa.first .. var$aux_oid_divisa.last LOOP
                            var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                            var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$aux_oid_divisa(idxt);
                            var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$aux_oid_denominacion(idxt);
                            var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$aux_oid_unid_medida(idxt);
                            var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$aux_cod_niv_detalle(idxt);
                            var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$aux_cod_tp_efec_tot(idxt);
                            var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$aux_oid_calidad(idxt);
                            var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$aux_num_importe(idxt);
                            var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$aux_nel_cantidad(idxt);
                          END LOOP;
                        END IF;

                        /* FIN - CREAR MOVIMIENTO MAECOC */
                      
                      END IF;
                    END IF;
                  END IF;
                END LOOP;
                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  /* Grabar documentos */
                  sguardar_documento(par$oid_llamada               => par$oid_llamada,
                                    par$adocs_oid                 => var$adocs_oid,
                                    par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                    par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                    par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                    par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                    par$adocs_cod_actual_id       => var$acod_actual_id,
                                    par$adocs_cod_collection_id   => var$acndoc_collection_id,
                                    par$adocs_cod_externo         => var$adocs_cod_externo,
                                    par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                    par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                    par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                    par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                    par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                    par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                    par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                    par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                    par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                    par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                    par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                    par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                    par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                    par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                    par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                    par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                    par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                    par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                    par$cod_usuario               => par$cod_usuario,
                                    par$cod_cultura               => par$cod_cultura,
                                    par$cod_ejecucion             => par$cod_ejecucion,
                                    par$nel_index                 => par$anel_index(idx)
                                    );

                  COMMIT;

                  INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                        VALUES (par$anel_index(idx), '0040200000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040200000', gepr_pcomon_###VERSION###.const$CodFunGenerico,
                                gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

                END IF;
              END IF;
            END IF;
          EXCEPTION
              WHEN OTHERS THEN
                ROLLBACK;
                var$err := gepr_putilidades_###VERSION###.fformat_error;
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                      VALUES (par$anel_index(idx), '3040120001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                              gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 'VALIDACIONES');

                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => '3040120001 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0),
                              par$cod_identificador   => '');
          END;

        END LOOP;
      END IF;

      /* Validaciones */
      OPEN par$rc_validaciones FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'VALIDACIONES';

      /* Documentos */
      OPEN par$rc_documentos FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

      /* Planificacion */
      OPEN par$rc_planificaciones FOR
           SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
             FROM SAPR_GTT_TAUXILIAR
            WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                            var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                            null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
      COMMIT;

      /* ===  Tratar excepciones - Rollback === */
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      var$err := gepr_putilidades_###VERSION###.fformat_error;

      var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                    var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                    null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Hizo roolback',
                            par$cod_identificador   => '');

  END sgrabar_mov_cashout;

  /* Validar Movimientos CashOut */
  PROCEDURE svalidar_mov_cashout(par$oid_llamada IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS
    const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'svalidar_mov_cashout';
    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN
    
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'par$oid_llamada: ' || par$oid_llamada || const$new_line
                        || 'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line
                        || 'par$nel_index: ' || par$nel_index || const$new_line
                        || 'par$cod_device_id: ' || par$cod_device_id || const$new_line
                        || 'par$cod_cliente: ' || par$cod_cliente || const$new_line
                        || 'par$cod_sub_cliente: ' || par$cod_sub_cliente || const$new_line
                        || 'par$cod_punto_servicio: ' || par$cod_punto_servicio || const$new_line
                        || 'par$cod_canal: ' || par$cod_canal || const$new_line
                        || 'par$cod_sub_canal: ' || par$cod_sub_canal || const$new_line
                        || 'par$cod_actual: ' || par$cod_actual || const$new_line
                        || 'par$cod_cultura: ' || par$cod_cultura || const$new_line
                        || 'par$cod_usuario: ' || par$cod_usuario || const$new_line
                        || 'par$cod_pais: ' || par$cod_pais,
                        par$cod_identificador   => '');

    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'SALIDA: ' ||  const$new_line
                        || 'oid_cuenta_cliente: ' || par$oid_cuenta_cliente || const$new_line
                        || 'oid_sector_mae: ' || par$oid_sector_mae,
                        par$cod_identificador   => '');


  END svalidar_mov_cashout;

   /* Grabar Movimientos de CashIn */
  PROCEDURE sgrabar_mov_cashin(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_cashin';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);


      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$bol_controla_faturacion   gepr_pcomon_###VERSION###.tipo$nbol_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$nel_secuencia           gepr_pcomon_###VERSION###.tipo$nel_ := 0;

      /* Formularios */
      var$oid_formulario_maecic     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maecic gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maecic    gepr_pcomon_###VERSION###.tipo$cod_;

      var$oid_formulario_maecid     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maecid gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maecid    gepr_pcomon_###VERSION###.tipo$cod_;

      var$oid_formulario_mae_aux    gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento_maeaux gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo_maeaux    gepr_pcomon_###VERSION###.tipo$cod_;


      /* Cuentas */
      var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
      var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
      var$acndoc_collection_id      gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$aux_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$aux_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_; 

      var$auxt_oid_termino          gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor            gepr_pcomon_###VERSION###.tipo$descs_;
      var$aux_nel_secuencia     gepr_pcomon_###VERSION###.tipo$nel_;

      /* Constantes */
      const$deposito_buzon CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'DEB';
      const$canal_db CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'DB';
      const$canal_cheque CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'CHQ';

      const$canal_ing CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'ING';
      const$canal_rec CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'REC';

      const$canal_vir CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'VIR';

    BEGIN
        /* INICIO - LOG de parametros iniciales*/
        IF par$oid_llamada IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' ||
                                                ' par$oid_llamada: ' || par$oid_llamada ||
                                                ', par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$info_ejecucion: ' || par$info_ejecucion ||
                                                ', par$cod_usuario: ' || par$cod_usuario ||
                                                ', par$cod_cultura: ' || par$cod_cultura ||
                                                ', par$cod_pais: ' || par$cod_pais,
                                par$cod_identificador   => '');

            /* INICIO LOG de arrays asociativos */
            IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
            FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_index(' || idx || '):  ' || par$anel_index(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$acod_device_id IS NOT NULL AND par$acod_device_id.COUNT > 0 THEN
            FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$acod_cliente IS NOT NULL AND par$acod_cliente.COUNT > 0 THEN
            FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$acod_sub_cliente IS NOT NULL AND par$acod_sub_cliente.COUNT > 0 THEN
            FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$acod_punto_servicio IS NOT NULL AND par$acod_punto_servicio.COUNT > 0 THEN
            FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$afyh_gestion IS NOT NULL AND par$afyh_gestion.COUNT > 0 THEN
            FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$afyh_contable IS NOT NULL AND par$afyh_contable.COUNT > 0 THEN
            FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
            FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$acndoc_collection_id IS NOT NULL AND par$acndoc_collection_id.COUNT > 0 THEN
            FOR idx IN  par$acndoc_collection_id.first ..  par$acndoc_collection_id.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_collection_id(' || idx || '):  ' || par$acndoc_collection_id(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$anel_gmt_minuto IS NOT NULL AND par$anel_gmt_minuto.COUNT > 0 THEN
            FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.COUNT > 0 THEN
            FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$avtdoc_cod_termino IS NOT NULL AND par$avtdoc_cod_termino.COUNT > 0 THEN
            FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$avtdoc_des_valor IS NOT NULL AND par$avtdoc_des_valor.COUNT > 0 THEN
            FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
            FOR idx IN  par$acndoc_nel_index.first ..  par$acndoc_nel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_nel_index(' || idx || '):  ' || par$acndoc_nel_index(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$acndoc_cod_canal IS NOT NULL AND par$acndoc_cod_canal.COUNT > 0 THEN
            FOR idx IN  par$acndoc_cod_canal.first ..  par$acndoc_cod_canal.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_canal(' || idx || '):  ' || par$acndoc_cod_canal(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$acndoc_cod_sub_canal IS NOT NULL AND par$acndoc_cod_sub_canal.COUNT > 0 THEN
            FOR idx IN  par$acndoc_cod_sub_canal.first ..  par$acndoc_cod_sub_canal.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_sub_canal(' || idx || '):  ' || par$acndoc_cod_sub_canal(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
            FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx),
                                par$cod_identificador   => '');
            END LOOP;        
            END IF;
            IF par$aefdoc_cod_sub_canal IS NOT NULL AND par$aefdoc_cod_sub_canal.COUNT > 0 THEN
            FOR idx IN  par$aefdoc_cod_sub_canal.first ..  par$aefdoc_cod_sub_canal.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_sub_canal(' || idx || '):  ' || par$aefdoc_cod_sub_canal(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$aefdoc_cod_divisa IS NOT NULL AND par$aefdoc_cod_divisa.COUNT > 0 THEN
            FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$aefdoc_cod_denominacion IS NOT NULL AND par$aefdoc_cod_denominacion.COUNT > 0 THEN
            FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$aefdoc_nel_cantidad IS NOT NULL AND par$aefdoc_nel_cantidad.COUNT > 0 THEN
            FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            IF par$aefdoc_num_importe IS NOT NULL AND par$aefdoc_num_importe.COUNT > 0 THEN
            FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx),
                                par$cod_identificador   => '');
            END LOOP;
            END IF;
            /* FIN LOG de arrays asociativos */
        END IF;
        /* FIN - LOG de parametros iniciales*/

        /* #### Inicializar los cursores #### */
        OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

        /* Limpiar tabla temporaria */
        DELETE SAPR_GTT_TAUXILIAR;
        COMMIT;

        /* Recuperar Formularios - MAECIC */
        srecuperar_formularios(par$cod_formulario     => 'MAECIC',
                                par$oid_formulario     => var$oid_formulario_maecic,
                                par$oid_tipo_documento => var$oid_tipo_documento_maecic,
                                par$des_cod_externo    => var$des_cod_externo_maecic);

        /* LOG recuperación de formulario  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAECIC - ' ||  
                                    'var$oid_formulario_maecic: ' || var$oid_formulario_maecic ||
                                    ', var$oid_tipo_documento_maecic: ' || var$oid_tipo_documento_maecic ||
                                    ', var$des_cod_externo_maecic: ' || var$des_cod_externo_maecic,
                                par$cod_identificador   => '');

        /* Recuperar Formularios - MAECID */
        srecuperar_formularios(par$cod_formulario     => 'MAECID',
                                par$oid_formulario     => var$oid_formulario_maecid,
                                par$oid_tipo_documento => var$oid_tipo_documento_maecid,
                                par$des_cod_externo    => var$des_cod_externo_maecid);
        
        /* LOG recuperación de formulario  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAECID - ' ||  
                                    'var$oid_formulario_maecid: ' || var$oid_formulario_maecid ||
                                    ', var$oid_tipo_documento_maecid: ' || var$oid_tipo_documento_maecid ||
                                    ', var$des_cod_externo_maecid: ' || var$des_cod_externo_maecid,
                                par$cod_identificador   => '');
        IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
          FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
              BEGIN
                  /* Limpiar tabla temporaria */
                  DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
                  var$adocs_oid.delete;
                  var$adocs_oid_formulario.delete;
                  var$adocs_fyh_gestion.delete;
                  var$adocs_fyh_contable.delete;
                  var$acod_actual_id.delete;
                  var$adocs_cod_externo.delete;
                  var$adocs_oid_cuenta_ori.delete;
                  var$adocs_oid_cuenta_des.delete;
                  var$adocs_oid_cuentasaldo_ori.delete;
                  var$adocs_oid_cuentasaldo_des.delete;
                  var$adocs_oid_sector_ori.delete;
                  var$adocs_oid_sector_des.delete;
                  var$aefdoc_oid_documento.delete;
                  var$aefdoc_oid_divisa.delete;
                  var$aefdoc_oid_denominacion.delete;
                  var$aefdoc_oid_unid_medida.delete;
                  var$aefdoc_cod_niv_detalle.delete;
                  var$aefdoc_cod_tp_efec_tot.delete;
                  var$aefdoc_oid_calidad.delete;
                  var$aefdoc_num_importe.delete;
                  var$aefdoc_nel_cantidad.delete;
                  var$avtdoc_oid_documento.delete;
                  var$avtdoc_oid_termino.delete;
                  var$avtdoc_des_valor.delete;

                  /* LOG de validación  */
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                          par$des_version     => const$version,                            
                          par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                              'svalidar_actual_id con parametros:' ||
                              ' par$nel_index: ' || par$anel_index(idx) ||
                              ', par$fyh_gestion: ' || par$afyh_gestion(idx) ||
                              ', par$cod_actual_id: ' || par$acod_actual_id(idx) ||
                              ', par$cod_cultura: ' || par$cod_cultura,
                          par$cod_identificador   => '');

                  svalidar_actual_id(par$oid_llamada             => par$oid_llamada,
                                  par$nel_index       => par$anel_index(idx),
                                  par$fyh_gestion      => par$afyh_gestion(idx),                                   
                                  par$cod_actual_id    => par$acod_actual_id(idx),                                 
                                  par$cod_cultura      => par$cod_cultura);      

                  var$aux_nel_secuencia := 0;

                  IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                    IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
                      FOR idxC IN par$acndoc_nel_index.first .. par$acndoc_nel_index.last LOOP
                        IF par$acndoc_nel_index(idxC) = par$anel_index(idx) THEN
                          var$auxt_oid_termino.delete;
                          var$auxt_des_valor.delete;
                          var$aux_oid_divisa.delete;  
                          var$aux_oid_denominacion.delete;  
                          var$aux_oid_unid_medida.delete;  
                          var$aux_cod_niv_detalle.delete;  
                          var$aux_cod_tp_efec_tot.delete;  
                          var$aux_oid_calidad.delete;  
                          var$aux_num_importe.delete;
                          var$aux_nel_cantidad.delete;

                          var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);
                          IF const$deposito_buzon = par$acndoc_cod_canal(idxC)
                              OR const$canal_db = par$acndoc_cod_canal(idxC)
                              OR const$canal_cheque = par$acndoc_cod_canal(idxC)
                              OR const$canal_ing = par$acndoc_cod_canal(idxC)
                              OR const$canal_rec = par$acndoc_cod_canal(idxC)
                              OR const$canal_vir = par$acndoc_cod_canal(idxC)
                              THEN
                              
                              /* Procedure responsable por validaciones del documento */
                              svalidar_mov_cashin(par$oid_llamada             => par$oid_llamada,
                                                  par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                                  par$nel_index               => par$anel_index(idx),
                                                  par$cod_device_id           => par$acod_device_id(idx),
                                                  par$cod_cliente             => par$acod_cliente(idx),
                                                  par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                                  par$cod_punto_servicio      => par$acod_punto_servicio(idx),   
                                                  par$cod_canal               => par$acndoc_cod_canal(idxC),
                                                  par$cod_sub_canal           => par$acndoc_cod_sub_canal(idxC),
                                                  par$cod_actual              => par$acod_actual_id(idx),
                                                  par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                                  par$oid_sector_mae          => var$oid_sector_mae,
                                                  par$cod_cultura             => par$cod_cultura,
                                                  par$cod_usuario             => par$cod_usuario,
                                                  par$cod_pais                => par$cod_pais);

                              /* LOG de validación  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                          'svalidar_mov_cashin con parametros:' ||
                                          ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                          ', par$nel_index: ' || par$anel_index(idx) ||
                                          ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                          ', par$cod_cliente: ' || par$acod_cliente(idx) ||
                                          ', par$cod_sub_cliente: ' || par$acod_sub_cliente(idx) ||
                                          ', par$cod_punto_servicio: ' || par$acod_punto_servicio(idx) ||
                                          ', par$cod_canal: ' || par$acndoc_cod_canal(idxC) ||
                                          ', par$cod_sub_canal: ' || par$acndoc_cod_sub_canal(idxC) ||
                                          ', par$cod_actual: ' || par$acod_actual_id(idx) ||
                                          ', par$oid_cuenta_cliente: ' || var$oid_cuenta_cliente ||
                                          ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                          ', par$cod_cultura: ' || par$cod_cultura ||
                                          ', par$cod_usuario: ' ||par$cod_usuario ||
                                          ', par$cod_pais: ' || par$cod_pais,
                                      par$cod_identificador   => '');

                              IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                                  /* LOG de validación  */
                                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                          'svalidar_mov_cashin y svalidar_actual_id',
                                      par$cod_identificador   => '');

                                  /* Validar fecha gestion */
                                  var$fyh_gestion      := par$afyh_gestion(idx);
                                  svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                                  par$nel_index        => par$anel_index(idx),
                                                  par$oid_sector_mae   => var$oid_sector_mae,
                                                  par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                                  par$fyh_gestion      => var$fyh_gestion,
                                                  par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                                  par$cod_cultura      => par$cod_cultura);

                                  /* LOG de validación  */
                                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                              'svalidar_fecha de gestion con parametros:' ||
                                              ' par$nel_index: ' || par$anel_index(idx) ||
                                              ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                              ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                              ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                              ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                              ', par$cod_cultura: ' || par$cod_cultura,
                                          par$cod_identificador   => '');

                                  /* Validar fecha contable */
                                  IF par$afyh_contable(idx) IS NULL THEN
                                    var$fyh_contable_gmt0      := var$fyh_gestion_gmt0;                            
                                  ELSE
                                    var$fyh_contable      := par$afyh_contable(idx);
                                    svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                                par$nel_index     => par$anel_index(idx),
                                                par$oid_sector_mae   => var$oid_sector_mae,
                                                par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                                par$fyh_gestion      => var$fyh_contable,
                                                par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                                                par$cod_cultura      => par$cod_cultura); 

                                    /* LOG de validación  */
                                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                              'svalidar_fecha contable con parametros:' ||
                                              ' par$nel_index: ' || par$anel_index(idx) ||
                                              ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                              ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                              ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                                              ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                              ', par$cod_cultura: ' || par$cod_cultura,
                                          par$cod_identificador   => '');                         
                                  END IF;

                                  if const$canal_ing = par$acndoc_cod_canal(idxC)
                                      OR const$canal_rec = par$acndoc_cod_canal(idxC) then
                                      var$oid_formulario_mae_aux    := var$oid_formulario_maecic;
                                      var$oid_tipo_documento_maeaux := var$oid_tipo_documento_maecic;
                                      var$des_cod_externo_maeaux    := var$des_cod_externo_maecic;
                                  else
                                      /*
                                          Caso contrario, serian estos canales:
                                              const$deposito_buzon  
                                              const$canal_db 
                                              const$canal_cheque
                                      */     
                                      var$oid_formulario_mae_aux    := var$oid_formulario_maecid;
                                      var$oid_tipo_documento_maeaux := var$oid_tipo_documento_maecid;
                                      var$des_cod_externo_maeaux    := var$des_cod_externo_maecid;
                                  end if;
                                  /*LOG Tipo de formulario*/
                                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Asignación de Tipo de formulario para el canal ingresado del movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                          ' par$acndoc_cod_canal: ' || par$acndoc_cod_canal(idxC) ||
                                          ', var$oid_formulario_mae_aux: ' || var$oid_formulario_mae_aux ||
                                          ', var$oid_tipo_documento_maeaux: ' || var$oid_tipo_documento_maeaux ||
                                          ', var$des_cod_externo_maeaux: ' || var$des_cod_externo_maeaux 
                                          ,
                                      par$cod_identificador   => '');

                                  /* Validar Codigo externo */
                                  /* LOG de validación  */
                                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                          'fvalidar_codigo_externo con parametros:' ||
                                          ' par$nel_index: ' ||  par$anel_index(idx) ||
                                          ', par$des_cod_externo: ' || var$des_cod_externo_maeaux ||
                                          ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                          ', par$fyh_gestion: ' || var$fyh_gestion ||
                                          ', par$cod_precinto: ' || NULL ||
                                          ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                          ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                                          ', par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => '');

                                  IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maeaux, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                                      /* LOG de validación  */
                                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                              'fvalidar_codigo_externo',
                                          par$cod_identificador   => '');

                                      var$oid_documento := sys_guid();
                                      var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                                      var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_mae_aux;
                                      var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maeaux;
                                      var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                                      var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                                      var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                                      var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                                      var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                                      var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                                      var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                                      var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                                      var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                                      


                                      /* Formulario y Codigo Externo */
                                      var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maecic,
                                                                                                                  par$cod_device_id       => par$acod_device_id(idx),
                                                                                                                  par$fyh_gestion         => var$fyh_gestion,
                                                                                                                  par$cod_precinto        => NULL,
                                                                                                                  par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                                  par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                                  par$nel_sumar_secuencia => var$aux_nel_secuencia);
                                      /* LOG de código externo  */
                                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                              'fcargar_codigo_externo:' || 
                                              ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                              ,
                                           par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                      
                                      var$aux_nel_secuencia := var$aux_nel_secuencia + 1;

                                      /* Campos Adcionales */
                                      IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                                          FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                                              IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                                              par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                                              par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                                                  svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                                  par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                                  par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                                  par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                                  par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                                  par$cod_usuario         => par$cod_usuario,
                                                                  par$cod_cultura         => par$cod_cultura);
                                                  /* LOG validar términos  */
                                                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                      par$des_version     => const$version,                            
                                                      par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                          'svalidar_terminos con parametros:' ||
                                                          ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                          ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                          ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                          ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                                          ,
                                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                              END IF;
                                          END LOOP;
                                      END IF;

                                      /* Valores */
                                      FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                                           IF par$anel_index(idx) = par$aefdoc_nel_index(idxt) AND par$aefdoc_collection_id(idxt) = par$acndoc_det_index(idxC) THEN
                                              /*Utilizar validar_valores () */
                                              svalidar_valores(par$oid_llamada             => par$oid_llamada,
                                                              par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                                              par$nel_index                 => par$anel_index(idx),
                                                              par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                                              par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                                              par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                                              par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                                              par$saida_oid_divisa          => var$aux_oid_divisa(var$aux_oid_divisa.COUNT),
                                                              par$saida_oid_denominacio     => var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT),
                                                              par$saida_oid_unid_medida     => var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT),
                                                              par$saida_cod_niv_detalle     => var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT),
                                                              par$saida_cod_tp_efec_tot     => var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT),
                                                              par$saida_oid_calidad         => var$aux_oid_calidad(var$aux_oid_calidad.COUNT),
                                                              par$saida_num_importe         => var$aux_num_importe(var$aux_num_importe.COUNT),
                                                              par$saida_nel_cantidad        => var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT),
                                                              par$cod_cultura               => par$cod_cultura);

                                              /* LOG validar valores  */
                                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                                  par$des_version     => const$version,                            
                                                  par$des_detalle     => 'Validación de valores de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                      'svalidar_valores con parametros:' ||
                                                      ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                      ', par$anel_index: ' || par$anel_index(idx) ||
                                                      ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                                      ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) ||
                                                      ', par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) ||
                                                      ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                                      ', par$saida_oid_divisa: ' || var$aux_oid_divisa(var$aux_oid_divisa.COUNT - 1) ||
                                                      ', par$saida_oid_denominacio: ' || var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT - 1) ||
                                                      ', par$saida_oid_unid_medida: ' || var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT - 1) ||
                                                      ', par$saida_cod_niv_detalle: ' || var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT - 1) ||
                                                      ', par$saida_cod_tp_efec_tot: ' || var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT - 1) ||
                                                      ', par$saida_oid_calidad: ' || var$aux_oid_calidad(var$aux_oid_calidad.COUNT - 1) ||
                                                      ', par$saida_num_importe: ' || var$aux_num_importe(var$aux_num_importe.COUNT - 1) ||
                                                      ', par$saida_nel_cantidad: ' || var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT - 1) ||
                                                      ', par$cod_cultura: ' || par$cod_cultura 
                                                      ,
                                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                          END IF;

                                      END LOOP;

                                      IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                                          /* LOG de validación  */
                                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                  'svalidar_terminos y svalidar_valores',
                                              par$cod_identificador   => '');

                                          /* Campos Adcionales */
                                          IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                                              FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                                var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                                var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                                var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                              END LOOP;
                                          END IF;

                                          /* Valores */
                                          IF var$aux_oid_divisa IS NOT NULL AND var$aux_oid_divisa.COUNT > 0 THEN
                                              FOR idxt IN var$aux_oid_divisa.first .. var$aux_oid_divisa.last LOOP
                                                var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                                var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$aux_oid_divisa(idxt);
                                                var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$aux_oid_denominacion(idxt);
                                                var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$aux_oid_unid_medida(idxt);
                                                var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$aux_cod_niv_detalle(idxt);
                                                var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$aux_cod_tp_efec_tot(idxt);
                                                var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$aux_oid_calidad(idxt);
                                                var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$aux_num_importe(idxt);
                                                var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$aux_nel_cantidad(idxt);
                                              END LOOP;
                                          END IF;
                                      END IF;
                                  END IF;
                              END IF;
                          END IF;
                        END IF;
                      END LOOP;
                      IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                        /* INICIO - LOG de sguardar_documento*/
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                            par$cod_identificador   => '');


                        /* Grabar documentos */
                        sguardar_documento(
                                        par$oid_llamada             => par$oid_llamada,
                                        par$adocs_oid                 => var$adocs_oid,
                                        par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                        par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                        par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                        par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                        par$adocs_cod_actual_id       => var$acod_actual_id,
                                        par$adocs_cod_collection_id   => var$acndoc_collection_id,
                                        par$adocs_cod_externo         => var$adocs_cod_externo,
                                        par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                        par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                        par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                        par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                        par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                        par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                        par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                        par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                        par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                        par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                        par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                        par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                        par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                        par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                        par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                        par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                        par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                        par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                        par$cod_usuario               => par$cod_usuario,
                                        par$cod_cultura               => par$cod_cultura,
                                        par$cod_ejecucion             => par$cod_ejecucion,
                                        par$nel_index                 => par$anel_index(idx)
                                        );
                        /* FIN - LOG - parametros sguardar_documento*/
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                            par$cod_identificador   => '');
                        COMMIT;

                        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                                VALUES (par$anel_index(idx), '0040190000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040190000', gepr_pcomon_###VERSION###.const$CodFunGenerico,
                                        gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

                      END IF;
                    END IF;
                  END IF;
              EXCEPTION
                  WHEN OTHERS THEN
                  ROLLBACK;
                  var$err := gepr_putilidades_###VERSION###.fformat_error;
                  INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                          VALUES (par$anel_index(idx), '3040120001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                                  gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 'VALIDACIONES');
                  /* LOG ROLLBACK  */
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Se realiza ROLLBACK',
                                          par$cod_identificador   => '');
              END;

          END LOOP;
        END IF;

        /* Validaciones */
        OPEN par$rc_validaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'VALIDACIONES';

        /* Documentos */
        OPEN par$rc_documentos FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

        /* Planificacion */
        OPEN par$rc_planificaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                                var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                                null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
        COMMIT;

        /* ===  Tratar excepciones - Rollback === */
        EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        var$err := gepr_putilidades_###VERSION###.fformat_error;

        var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                        var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                        null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
                         
        /* LOG ROLLBACK  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se realiza ROLLBACK',
                                par$cod_identificador   => '');

  END sgrabar_mov_cashin;
  /* Validar Movimientos CashIn */
  PROCEDURE svalidar_mov_cashin(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);


  END svalidar_mov_cashin;




  /* Validar Movimientos MoveOut */
  PROCEDURE svalidar_mov_moveout(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);


  END svalidar_mov_moveout;

  /* Grabar Movimientos de MoveOut */
  PROCEDURE sgrabar_mov_moveout(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_moveout';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);


      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$bol_controla_faturacion   gepr_pcomon_###VERSION###.tipo$nbol_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable              gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0         gepr_pcomon_###VERSION###.tipo$fyh_;
      var$nel_secuencia             gepr_pcomon_###VERSION###.tipo$nel_ := 0;

      /* Formularios */
      var$oid_formulario     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo    gepr_pcomon_###VERSION###.tipo$cod_;

      /* Cuentas */
      var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
      var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
      var$acndoc_collection_id        gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$aux_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$aux_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_; 

      var$auxt_oid_termino      gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor        gepr_pcomon_###VERSION###.tipo$descs_;
      var$aux_nel_secuencia     gepr_pcomon_###VERSION###.tipo$nel_;
      
    BEGIN
         dbms_output.put_line('Ingrese en Grabar MoveOut');
        /* INICIO - LOG de parametros iniciales*/
        IF par$oid_llamada IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' ||
                                                ' par$oid_llamada: ' || par$oid_llamada ||
                                                ', par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$info_ejecucion: ' || par$info_ejecucion ||
                                                ', par$cod_usuario: ' || par$cod_usuario ||
                                                ', par$cod_cultura: ' || par$cod_cultura ||
                                                ', par$cod_pais: ' || par$cod_pais,
                                par$cod_identificador   => '');

            /* INICIO LOG de arrays asociativos */
            IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
              FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_index(' || idx || '):  ' || par$anel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_device_id IS NOT NULL AND par$acod_device_id.COUNT > 0 THEN
              FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_cliente IS NOT NULL AND par$acod_cliente.COUNT > 0 THEN
              FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_sub_cliente IS NOT NULL AND par$acod_sub_cliente.COUNT > 0 THEN
              FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_punto_servicio IS NOT NULL AND par$acod_punto_servicio.COUNT > 0 THEN
              FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$afyh_gestion IS NOT NULL AND par$afyh_gestion.COUNT > 0 THEN
              FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$afyh_contable IS NOT NULL AND par$afyh_contable.COUNT > 0 THEN
              FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
              FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_collection_id IS NOT NULL AND par$acndoc_collection_id.COUNT > 0 THEN
              FOR idx IN  par$acndoc_collection_id.first ..  par$acndoc_collection_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_collection_id(' || idx || '):  ' || par$acndoc_collection_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$anel_gmt_minuto IS NOT NULL AND par$anel_gmt_minuto.COUNT > 0 THEN
              FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_cod_termino IS NOT NULL AND par$avtdoc_cod_termino.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_des_valor IS NOT NULL AND par$avtdoc_des_valor.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$acndoc_nel_index.first ..  par$acndoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_nel_index(' || idx || '):  ' || par$acndoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_det_index IS NOT NULL AND par$acndoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$acndoc_det_index.first ..  par$acndoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_det_index(' || idx || '):  ' || par$acndoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_cod_canal IS NOT NULL AND par$acndoc_cod_canal.COUNT > 0 THEN
              FOR idx IN  par$acndoc_cod_canal.first ..  par$acndoc_cod_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_canal(' || idx || '):  ' || par$acndoc_cod_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_cod_sub_canal IS NOT NULL AND par$acndoc_cod_sub_canal.COUNT > 0 THEN
              FOR idx IN  par$acndoc_cod_sub_canal.first ..  par$acndoc_cod_sub_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_sub_canal(' || idx || '):  ' || par$acndoc_cod_sub_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_det_index IS NOT NULL AND par$aefdoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_det_index.first ..  par$aefdoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_det_index(' || idx || '):  ' || par$aefdoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_sub_canal IS NOT NULL AND par$aefdoc_cod_sub_canal.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_sub_canal.first ..  par$aefdoc_cod_sub_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_sub_canal(' || idx || '):  ' || par$aefdoc_cod_sub_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_divisa IS NOT NULL AND par$aefdoc_cod_divisa.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_denominacion IS NOT NULL AND par$aefdoc_cod_denominacion.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_nel_cantidad IS NOT NULL AND par$aefdoc_nel_cantidad.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_num_importe IS NOT NULL AND par$aefdoc_num_importe.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            /* FIN LOG de arrays asociativos */
        END IF;
        /* FIN - LOG de parametros iniciales*/

        /* #### Inicializar los cursores #### */
        OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

        /* Limpiar tabla temporaria */
        DELETE SAPR_GTT_TAUXILIAR;
        COMMIT;

        /* Recuperar Formularios - MAEMOC */
        srecuperar_formularios(par$cod_formulario     => 'MAEMOC',
                                par$oid_formulario     => var$oid_formulario,
                                par$oid_tipo_documento => var$oid_tipo_documento,
                                par$des_cod_externo    => var$des_cod_externo);

        /* LOG recuperación de formulario  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAEMOC - ' ||  
                                    'var$oid_formulario: ' || var$oid_formulario ||
                                    ', var$oid_tipo_documento: ' || var$oid_tipo_documento ||
                                    ', var$des_cod_externo: ' || var$des_cod_externo,
                                par$cod_identificador   => '');


         dbms_output.put_line('Previo a recorrer los arrays aso');

        IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
          FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
              BEGIN
                /* Limpiar tabla temporaria */
                DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
                var$adocs_oid.delete;
                var$adocs_oid_formulario.delete;
                var$adocs_fyh_gestion.delete;
                var$adocs_fyh_contable.delete;
                var$acod_actual_id.delete;
                var$adocs_cod_externo.delete;
                var$adocs_oid_cuenta_ori.delete;
                var$adocs_oid_cuenta_des.delete;
                var$adocs_oid_cuentasaldo_ori.delete;
                var$adocs_oid_cuentasaldo_des.delete;
                var$adocs_oid_sector_ori.delete;
                var$adocs_oid_sector_des.delete;
                var$aefdoc_oid_documento.delete;
                var$aefdoc_oid_divisa.delete;
                var$aefdoc_oid_denominacion.delete;
                var$aefdoc_oid_unid_medida.delete;
                var$aefdoc_cod_niv_detalle.delete;
                var$aefdoc_cod_tp_efec_tot.delete;
                var$aefdoc_oid_calidad.delete;
                var$aefdoc_num_importe.delete;
                var$aefdoc_nel_cantidad.delete;
                var$avtdoc_oid_documento.delete;
                var$avtdoc_oid_termino.delete;
                var$avtdoc_des_valor.delete;

          
                /* LOG de validación  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                            'svalidar_actual_id con parametros:' ||
                            ' par$nel_index: ' || par$anel_index(idx) ||
                            ', par$fyh_gestion: ' || par$afyh_gestion(idx) ||
                            ', par$cod_actual_id: ' || par$acod_actual_id(idx) ||
                            ', par$cod_cultura: ' || par$cod_cultura,
                        par$cod_identificador   => '');

                svalidar_actual_id(par$oid_llamada             => par$oid_llamada,
                                par$nel_index       => par$anel_index(idx),
                                par$fyh_gestion      => par$afyh_gestion(idx),                                   
                                par$cod_actual_id    => par$acod_actual_id(idx),                                 
                                par$cod_cultura      => par$cod_cultura);      

                var$aux_nel_secuencia := 0;
                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
                    FOR idxC IN par$acndoc_nel_index.first .. par$acndoc_nel_index.last LOOP

                      var$auxt_oid_termino.delete;
                      var$auxt_des_valor.delete;
                      var$aux_oid_divisa.delete;  
                      var$aux_oid_denominacion.delete;  
                      var$aux_oid_unid_medida.delete;  
                      var$aux_cod_niv_detalle.delete;  
                      var$aux_cod_tp_efec_tot.delete;  
                      var$aux_oid_calidad.delete;  
                      var$aux_num_importe.delete;
                      var$aux_nel_cantidad.delete;
                      
                      dbms_output.put_line('Previo a validar MOVEOUT');

                      /* Procedure responsable por validaciones del documento */
                      svalidar_mov_moveout(par$oid_llamada             => par$oid_llamada,
                                          par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                          par$nel_index               => par$anel_index(idx),
                                          par$cod_device_id           => par$acod_device_id(idx),
                                          par$cod_cliente             => par$acod_cliente(idx),
                                          par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                          par$cod_punto_servicio      => par$acod_punto_servicio(idx),   
                                          par$cod_canal               => par$acndoc_cod_canal(idxC),
                                          par$cod_sub_canal           => par$acndoc_cod_sub_canal(idxC),
                                          par$cod_actual              => par$acod_actual_id(idx),
                                          par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                          par$oid_sector_mae          => var$oid_sector_mae,
                                          par$cod_cultura             => par$cod_cultura,
                                          par$cod_usuario             => par$cod_usuario,
                                          par$cod_pais                => par$cod_pais);

                      /* LOG de validación  */
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'svalidar_mov_moveout con parametros:' ||
                                  ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                  ', par$nel_index: ' || par$anel_index(idx) ||
                                  ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                  ', par$cod_cliente: ' || par$acod_cliente(idx) ||
                                  ', par$cod_sub_cliente: ' || par$acod_sub_cliente(idx) ||
                                  ', par$cod_punto_servicio: ' || par$acod_punto_servicio(idx) ||
                                  ', par$cod_canal: ' || par$acndoc_cod_canal(idxC) ||
                                  ', par$cod_sub_canal: ' || par$acndoc_cod_sub_canal(idxC) ||
                                  ', par$cod_actual: ' || par$acod_actual_id(idx) ||
                                  ', par$oid_cuenta_cliente: ' || var$oid_cuenta_cliente ||
                                  ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                  ', par$cod_cultura: ' || par$cod_cultura ||
                                  ', par$cod_usuario: ' ||par$cod_usuario ||
                                  ', par$cod_pais: ' || par$cod_pais,
                              par$cod_identificador   => '');


                      dbms_output.put_line('Posterior a validar MOVEOUT');

                      IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                         dbms_output.put_line('Posterior a validar MOVEOUT: No hay error');
                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'svalidar_mov_moveout y svalidar_actual_id',
                              par$cod_identificador   => '');

                          /* Validar fecha gestion */
                          var$fyh_gestion      := par$afyh_gestion(idx);
                          svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                          par$nel_index        => par$anel_index(idx),
                                          par$oid_sector_mae   => var$oid_sector_mae,
                                          par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                          par$fyh_gestion      => var$fyh_gestion,
                                          par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                          par$cod_cultura      => par$cod_cultura);

                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_fecha de gestion con parametros:' ||
                                      ' par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                      ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                      ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                  par$cod_identificador   => '');

                          /* Validar fecha contable */
                          IF par$afyh_contable(idx) IS NULL THEN
                            var$fyh_contable_gmt0      := var$fyh_gestion_gmt0;                            
                          ELSE
                            var$fyh_contable      := par$afyh_contable(idx);
                            svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                        par$nel_index     => par$anel_index(idx),
                                        par$oid_sector_mae   => var$oid_sector_mae,
                                        par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                        par$fyh_gestion      => var$fyh_contable,
                                        par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                                        par$cod_cultura      => par$cod_cultura); 

                            /* LOG de validación  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_fecha contable con parametros:' ||
                                      ' par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                      ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                      ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                  par$cod_identificador   => '');                         
                          END IF;

                          dbms_output.put_line('Posterior a validar fechas');

                          /* Validar Codigo externo */
                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                  'fvalidar_codigo_externo con parametros:' ||
                                  ' par$nel_index: ' ||  par$anel_index(idx) ||
                                  ', par$des_cod_externo: ' || var$des_cod_externo ||
                                  ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                  ', par$fyh_gestion: ' || var$fyh_gestion ||
                                  ', par$cod_precinto: ' || NULL ||
                                  ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                  ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                                  ', par$cod_cultura: ' || par$cod_cultura,
                              par$cod_identificador   => '');

                          IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                              /* LOG de validación  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                      'fvalidar_codigo_externo',
                                  par$cod_identificador   => '');

                              var$oid_documento := sys_guid();
                              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario;
                              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento;
                              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                              var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                              var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);


                              /* Formulario y Codigo Externo */
                              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo,
                                                                                                          par$cod_device_id       => par$acod_device_id(idx),
                                                                                                          par$fyh_gestion         => var$fyh_gestion,
                                                                                                          par$cod_precinto        => NULL,
                                                                                                          par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                          par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                          par$nel_sumar_secuencia => var$aux_nel_secuencia);
                              /* LOG de código externo  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'fcargar_codigo_externo:' || 
                                      ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                              var$aux_nel_secuencia := var$aux_nel_secuencia + 1;

                              DBMS_OUTPUT.PUT_LINE('var$adocs_cod_externo: '|| var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                              /* Campos Adcionales */
                              IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                                  FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                                      IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                                      par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                                      par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                                          svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                          par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                          par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                          par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                          par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                          par$cod_usuario         => par$cod_usuario,
                                                          par$cod_cultura         => par$cod_cultura);
                                          /* LOG validar tÃ©rminos  */
                                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                  'svalidar_terminos con parametros:' ||
                                                  ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                  ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                  ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                  ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                                  ,
                                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                      END IF;
                                  END LOOP;
                              END IF;

                              /* Valores */
                              IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
                                FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                                    IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_det_index(idxt) = par$acndoc_det_index(idxC) THEN
                                        /*Utilizar validar_valores () */
                                        svalidar_valores(par$oid_llamada             => par$oid_llamada,
                                                        par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                                        par$nel_index                 => par$anel_index(idx),
                                                        par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                                        par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                                        par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                                        par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                                        par$saida_oid_divisa          => var$aux_oid_divisa(var$aux_oid_divisa.COUNT),
                                                        par$saida_oid_denominacio     => var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT),
                                                        par$saida_oid_unid_medida     => var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT),
                                                        par$saida_cod_niv_detalle     => var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT),
                                                        par$saida_cod_tp_efec_tot     => var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT),
                                                        par$saida_oid_calidad         => var$aux_oid_calidad(var$aux_oid_calidad.COUNT),
                                                        par$saida_num_importe         => var$aux_num_importe(var$aux_num_importe.COUNT),
                                                        par$saida_nel_cantidad        => var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT),
                                                        par$cod_cultura               => par$cod_cultura);

                                        /* LOG validar valores  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Validación de valores de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                'svalidar_valores con parametros:' ||
                                                ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$anel_index: ' || par$anel_index(idx) ||
                                                ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                                ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) ||
                                                ', par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) ||
                                                ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                                ', par$saida_oid_divisa: ' || var$aux_oid_divisa(var$aux_oid_divisa.COUNT - 1) ||
                                                ', par$saida_oid_denominacio: ' || var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT - 1) ||
                                                ', par$saida_oid_unid_medida: ' || var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT - 1) ||
                                                ', par$saida_cod_niv_detalle: ' || var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT - 1) ||
                                                ', par$saida_cod_tp_efec_tot: ' || var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT - 1) ||
                                                ', par$saida_oid_calidad: ' || var$aux_oid_calidad(var$aux_oid_calidad.COUNT - 1) ||
                                                ', par$saida_num_importe: ' || var$aux_num_importe(var$aux_num_importe.COUNT - 1) ||
                                                ', par$saida_nel_cantidad: ' || var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT - 1) ||
                                                ', par$cod_cultura: ' || par$cod_cultura 
                                                ,
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                    END IF;

                                END LOOP;
                              END IF;

                              IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                                  /* LOG de validación  */
                                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                          'svalidar_terminos y svalidar_valores',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                                  /* Campos Adcionales */
                                  IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                                      FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                        var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                        var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                        var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                      END LOOP;
                                  END IF;

                                  /* Valores */
                                  IF var$aux_oid_divisa IS NOT NULL AND var$aux_oid_divisa.COUNT > 0 THEN
                                      FOR idxt IN var$aux_oid_divisa.first .. var$aux_oid_divisa.last LOOP
                                        var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                        var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$aux_oid_divisa(idxt);
                                        var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$aux_oid_denominacion(idxt);
                                        var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$aux_oid_unid_medida(idxt);
                                        var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$aux_cod_niv_detalle(idxt);
                                        var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$aux_cod_tp_efec_tot(idxt);
                                        var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$aux_oid_calidad(idxt);
                                        var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$aux_num_importe(idxt);
                                        var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$aux_nel_cantidad(idxt);
                                      END LOOP;
                                  END IF;                 
                              END IF;
                          END IF;
                      END IF;
            
                    END LOOP;
                    IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                      /* INICIO - LOG de sguardar_documento*/
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                          par$cod_identificador   => '');
                                          /* Grabar documentos */
                      sguardar_documento(
                                      par$oid_llamada             => par$oid_llamada,
                                      par$adocs_oid                 => var$adocs_oid,
                                      par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                      par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                      par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                      par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                      par$adocs_cod_actual_id       => var$acod_actual_id,
                                      par$adocs_cod_collection_id   => var$acndoc_collection_id,
                                      par$adocs_cod_externo         => var$adocs_cod_externo,
                                      par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                      par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                      par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                      par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                      par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                      par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                      par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                      par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                      par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                      par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                      par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                      par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                      par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                      par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                      par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                      par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                      par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                      par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                      par$cod_usuario               => par$cod_usuario,
                                      par$cod_cultura               => par$cod_cultura,
                                      par$cod_ejecucion             => par$cod_ejecucion,
                                      par$nel_index                 => par$anel_index(idx)
                                      );
                      /* FIN - LOG - parametros sguardar_documento*/
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                          par$cod_identificador   => '');
                      COMMIT;

                      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                              VALUES (par$anel_index(idx), '0040280000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040280000', gepr_pcomon_###VERSION###.const$CodFunGenerico,
                                      gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');
                    END IF;
                  END IF;
                END IF;

              EXCEPTION
                WHEN OTHERS THEN
                ROLLBACK;
                var$err := gepr_putilidades_###VERSION###.fformat_error;
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                VALUES (
                  par$anel_index(idx), 
                  '3040120001', 
                  gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                      gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 
                  'VALIDACIONES');
                /* LOG ROLLBACK  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Se realiza ROLLBACK',
                                        par$cod_identificador   => '');
              END;

          END LOOP;
        END IF;
        /* Validaciones */
        OPEN par$rc_validaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'VALIDACIONES';

        /* Documentos */
        OPEN par$rc_documentos FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

        /* Planificacion */
        OPEN par$rc_planificaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                                var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                                null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
        COMMIT;

        /* ===  Tratar excepciones - Rollback === */
        EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        var$err := gepr_putilidades_###VERSION###.fformat_error;

        var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                        var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                        null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
                         
        /* LOG ROLLBACK  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se realiza ROLLBACK',
                                par$cod_identificador   => '');

  END sgrabar_mov_moveout;

  /* Grabar Movimientos de balance */
  PROCEDURE sgrabar_mov_balance(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_balance';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);


      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$bol_controla_faturacion   gepr_pcomon_###VERSION###.tipo$nbol_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable              gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0         gepr_pcomon_###VERSION###.tipo$fyh_;
      var$nel_secuencia             gepr_pcomon_###VERSION###.tipo$nel_ := 0;

      /* Formularios */
      var$oid_formulario     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo    gepr_pcomon_###VERSION###.tipo$cod_;

      /* Cuentas */
      var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
      var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
      var$acndoc_collection_id      gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$aux_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$aux_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_; 

      var$auxt_oid_termino      gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor        gepr_pcomon_###VERSION###.tipo$descs_;
      var$aux_nel_secuencia     gepr_pcomon_###VERSION###.tipo$nel_;
      
    BEGIN
         dbms_output.put_line('Ingrese en Grabar balance');
        /* INICIO - LOG de parametros iniciales*/
        IF par$oid_llamada IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' ||
                                                ' par$oid_llamada: ' || par$oid_llamada ||
                                                ', par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$info_ejecucion: ' || par$info_ejecucion ||
                                                ', par$cod_usuario: ' || par$cod_usuario ||
                                                ', par$cod_cultura: ' || par$cod_cultura ||
                                                ', par$cod_pais: ' || par$cod_pais,
                                par$cod_identificador   => '');

            /* INICIO LOG de arrays asociativos */
            IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
              FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_index(' || idx || '):  ' || par$anel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_device_id IS NOT NULL AND par$acod_device_id.COUNT > 0 THEN
              FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_cliente IS NOT NULL AND par$acod_cliente.COUNT > 0 THEN
              FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_sub_cliente IS NOT NULL AND par$acod_sub_cliente.COUNT > 0 THEN
              FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_punto_servicio IS NOT NULL AND par$acod_punto_servicio.COUNT > 0 THEN
              FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$afyh_gestion IS NOT NULL AND par$afyh_gestion.COUNT > 0 THEN
              FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$afyh_contable IS NOT NULL AND par$afyh_contable.COUNT > 0 THEN
              FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
              FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_collection_id IS NOT NULL AND par$acndoc_collection_id.COUNT > 0 THEN
              FOR idx IN  par$acndoc_collection_id.first ..  par$acndoc_collection_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_collection_id(' || idx || '):  ' || par$acndoc_collection_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$anel_gmt_minuto IS NOT NULL AND par$anel_gmt_minuto.COUNT > 0 THEN
              FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_cod_termino IS NOT NULL AND par$avtdoc_cod_termino.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_des_valor IS NOT NULL AND par$avtdoc_des_valor.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$acndoc_nel_index.first ..  par$acndoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_nel_index(' || idx || '):  ' || par$acndoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_det_index IS NOT NULL AND par$acndoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$acndoc_det_index.first ..  par$acndoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_det_index(' || idx || '):  ' || par$acndoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_cod_canal IS NOT NULL AND par$acndoc_cod_canal.COUNT > 0 THEN
              FOR idx IN  par$acndoc_cod_canal.first ..  par$acndoc_cod_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_canal(' || idx || '):  ' || par$acndoc_cod_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_cod_sub_canal IS NOT NULL AND par$acndoc_cod_sub_canal.COUNT > 0 THEN
              FOR idx IN  par$acndoc_cod_sub_canal.first ..  par$acndoc_cod_sub_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_sub_canal(' || idx || '):  ' || par$acndoc_cod_sub_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_det_index IS NOT NULL AND par$aefdoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_det_index.first ..  par$aefdoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_det_index(' || idx || '):  ' || par$aefdoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_sub_canal IS NOT NULL AND par$aefdoc_cod_sub_canal.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_sub_canal.first ..  par$aefdoc_cod_sub_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_sub_canal(' || idx || '):  ' || par$aefdoc_cod_sub_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_divisa IS NOT NULL AND par$aefdoc_cod_divisa.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_denominacion IS NOT NULL AND par$aefdoc_cod_denominacion.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_nel_cantidad IS NOT NULL AND par$aefdoc_nel_cantidad.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_num_importe IS NOT NULL AND par$aefdoc_num_importe.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            /* FIN LOG de arrays asociativos */
        END IF;
        /* FIN - LOG de parametros iniciales*/

        /* #### Inicializar los cursores #### */
        OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

        /* Limpiar tabla temporaria */
        DELETE SAPR_GTT_TAUXILIAR;
        COMMIT;

        /* Recuperar Formularios - MAEBAL */
        srecuperar_formularios(par$cod_formulario     => 'MAEBAL',
                                par$oid_formulario     => var$oid_formulario,
                                par$oid_tipo_documento => var$oid_tipo_documento,
                                par$des_cod_externo    => var$des_cod_externo);

        /* LOG recuperación de formulario  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAEBAL - ' ||  
                                    'var$oid_formulario: ' || var$oid_formulario ||
                                    ', var$oid_tipo_documento: ' || var$oid_tipo_documento ||
                                    ', var$des_cod_externo: ' || var$des_cod_externo,
                                par$cod_identificador   => '');


         dbms_output.put_line('Previo a recorrer los arrays aso');

        IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
          FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
              BEGIN
                /* Limpiar tabla temporaria */
                DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
                var$adocs_oid.delete;
                var$adocs_oid_formulario.delete;
                var$adocs_fyh_gestion.delete;
                var$adocs_fyh_contable.delete;
                var$acod_actual_id.delete;
                var$adocs_cod_externo.delete;
                var$adocs_oid_cuenta_ori.delete;
                var$adocs_oid_cuenta_des.delete;
                var$adocs_oid_cuentasaldo_ori.delete;
                var$adocs_oid_cuentasaldo_des.delete;
                var$adocs_oid_sector_ori.delete;
                var$adocs_oid_sector_des.delete;
                var$aefdoc_oid_documento.delete;
                var$aefdoc_oid_divisa.delete;
                var$aefdoc_oid_denominacion.delete;
                var$aefdoc_oid_unid_medida.delete;
                var$aefdoc_cod_niv_detalle.delete;
                var$aefdoc_cod_tp_efec_tot.delete;
                var$aefdoc_oid_calidad.delete;
                var$aefdoc_num_importe.delete;
                var$aefdoc_nel_cantidad.delete;
                var$avtdoc_oid_documento.delete;
                var$avtdoc_oid_termino.delete;
                var$avtdoc_des_valor.delete;

          
                /* LOG de validación  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                            'svalidar_actual_id con parametros:' ||
                            ' par$nel_index: ' || par$anel_index(idx) ||
                            ', par$fyh_gestion: ' || par$afyh_gestion(idx) ||
                            ', par$cod_actual_id: ' || par$acod_actual_id(idx) ||
                            ', par$cod_cultura: ' || par$cod_cultura,
                        par$cod_identificador   => '');

                svalidar_actual_id(par$oid_llamada             => par$oid_llamada,
                                par$nel_index       => par$anel_index(idx),
                                par$fyh_gestion      => par$afyh_gestion(idx),                                   
                                par$cod_actual_id    => par$acod_actual_id(idx),                                 
                                par$cod_cultura      => par$cod_cultura);      

                var$aux_nel_secuencia := 0;
                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
                    FOR idxC IN par$acndoc_nel_index.first .. par$acndoc_nel_index.last LOOP

                      var$auxt_oid_termino.delete;
                      var$auxt_des_valor.delete;
                      var$aux_oid_divisa.delete;  
                      var$aux_oid_denominacion.delete;  
                      var$aux_oid_unid_medida.delete;  
                      var$aux_cod_niv_detalle.delete;  
                      var$aux_cod_tp_efec_tot.delete;  
                      var$aux_oid_calidad.delete;  
                      var$aux_num_importe.delete;
                      var$aux_nel_cantidad.delete;
                      
                      dbms_output.put_line('Previo a validar balance');

                      /* Procedure responsable por validaciones del documento */
                      svalidar_mov_balance(par$oid_llamada             => par$oid_llamada,
                                          par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                          par$nel_index               => par$anel_index(idx),
                                          par$cod_device_id           => par$acod_device_id(idx),
                                          par$cod_cliente             => par$acod_cliente(idx),
                                          par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                          par$cod_punto_servicio      => par$acod_punto_servicio(idx),   
                                          par$cod_canal               => par$acndoc_cod_canal(idxC),
                                          par$cod_sub_canal           => par$acndoc_cod_sub_canal(idxC),
                                          par$cod_actual              => par$acod_actual_id(idx),
                                          par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                          par$oid_sector_mae          => var$oid_sector_mae,
                                          par$cod_cultura             => par$cod_cultura,
                                          par$cod_usuario             => par$cod_usuario,
                                          par$cod_pais                => par$cod_pais);

                      /* LOG de validación  */
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'svalidar_mov_balance con parametros:' ||
                                  ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                  ', par$nel_index: ' || par$anel_index(idx) ||
                                  ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                  ', par$cod_cliente: ' || par$acod_cliente(idx) ||
                                  ', par$cod_sub_cliente: ' || par$acod_sub_cliente(idx) ||
                                  ', par$cod_punto_servicio: ' || par$acod_punto_servicio(idx) ||
                                  ', par$cod_canal: ' || par$acndoc_cod_canal(idxC) ||
                                  ', par$cod_sub_canal: ' || par$acndoc_cod_sub_canal(idxC) ||
                                  ', par$cod_actual: ' || par$acod_actual_id(idx) ||
                                  ', par$oid_cuenta_cliente: ' || var$oid_cuenta_cliente ||
                                  ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                  ', par$cod_cultura: ' || par$cod_cultura ||
                                  ', par$cod_usuario: ' ||par$cod_usuario ||
                                  ', par$cod_pais: ' || par$cod_pais,
                              par$cod_identificador   => '');


                      dbms_output.put_line('Posterior a validar balance');

                      IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                         dbms_output.put_line('Posterior a validar balance: No hay error');
                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'svalidar_mov_balance y svalidar_actual_id',
                              par$cod_identificador   => '');

                          /* Validar fecha gestion */
                          var$fyh_gestion      := par$afyh_gestion(idx);
                          svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                          par$nel_index        => par$anel_index(idx),
                                          par$oid_sector_mae   => var$oid_sector_mae,
                                          par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                          par$fyh_gestion      => var$fyh_gestion,
                                          par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                          par$cod_cultura      => par$cod_cultura);

                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_fecha de gestion con parametros:' ||
                                      ' par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                      ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                      ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                  par$cod_identificador   => '');

                          /* Validar fecha contable */
                          IF par$afyh_contable(idx) IS NULL THEN
                            var$fyh_contable_gmt0      := var$fyh_gestion_gmt0;                            
                          ELSE
                            var$fyh_contable      := par$afyh_contable(idx);
                            svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                        par$nel_index     => par$anel_index(idx),
                                        par$oid_sector_mae   => var$oid_sector_mae,
                                        par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                        par$fyh_gestion      => var$fyh_contable,
                                        par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                                        par$cod_cultura      => par$cod_cultura); 

                            /* LOG de validación  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_fecha contable con parametros:' ||
                                      ' par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                      ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                      ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                  par$cod_identificador   => '');                         
                          END IF;

                          dbms_output.put_line('Posterior a validar fechas');

                          /* Validar Codigo externo */
                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                  'fvalidar_codigo_externo con parametros:' ||
                                  ' par$nel_index: ' ||  par$anel_index(idx) ||
                                  ', par$des_cod_externo: ' || var$des_cod_externo ||
                                  ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                  ', par$fyh_gestion: ' || var$fyh_gestion ||
                                  ', par$cod_precinto: ' || NULL ||
                                  ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                  ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                                  ', par$cod_cultura: ' || par$cod_cultura,
                              par$cod_identificador   => '');

                          IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                              /* LOG de validación  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                      'fvalidar_codigo_externo',
                                  par$cod_identificador   => '');

                              var$oid_documento := sys_guid();
                              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario;
                              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento;
                              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                              var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                              var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);

                              /* Formulario y Codigo Externo */
                              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo,
                                                                                                          par$cod_device_id       => par$acod_device_id(idx),
                                                                                                          par$fyh_gestion         => var$fyh_gestion,
                                                                                                          par$cod_precinto        => NULL,
                                                                                                          par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                          par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                          par$nel_sumar_secuencia => var$aux_nel_secuencia);
                              /* LOG de código externo  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'fcargar_codigo_externo:' || 
                                      ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                              var$aux_nel_secuencia := var$aux_nel_secuencia + 1;

                              DBMS_OUTPUT.PUT_LINE('var$adocs_cod_externo: '|| var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                              /* Campos Adcionales */
                              IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                                  FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                                      IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                                      par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                                      par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                                          svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                          par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                          par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                          par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                          par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                          par$cod_usuario         => par$cod_usuario,
                                                          par$cod_cultura         => par$cod_cultura);
                                          /* LOG validar tÃ©rminos  */
                                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                  'svalidar_terminos con parametros:' ||
                                                  ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                  ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                  ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                  ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                                  ,
                                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                      END IF;
                                  END LOOP;
                              END IF;

                              /* Valores */
                              IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
                                FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                                    IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_det_index(idxt) = par$acndoc_det_index(idxC) THEN
                                        /*Utilizar validar_valores () */
                                        svalidar_valores(par$oid_llamada             => par$oid_llamada,
                                                        par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                                        par$nel_index                 => par$anel_index(idx),
                                                        par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                                        par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                                        par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                                        par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                                        par$saida_oid_divisa          => var$aux_oid_divisa(var$aux_oid_divisa.COUNT),
                                                        par$saida_oid_denominacio     => var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT),
                                                        par$saida_oid_unid_medida     => var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT),
                                                        par$saida_cod_niv_detalle     => var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT),
                                                        par$saida_cod_tp_efec_tot     => var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT),
                                                        par$saida_oid_calidad         => var$aux_oid_calidad(var$aux_oid_calidad.COUNT),
                                                        par$saida_num_importe         => var$aux_num_importe(var$aux_num_importe.COUNT),
                                                        par$saida_nel_cantidad        => var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT),
                                                        par$cod_cultura               => par$cod_cultura);

                                        /* LOG validar valores  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Validación de valores de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                'svalidar_valores con parametros:' ||
                                                ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$anel_index: ' || par$anel_index(idx) ||
                                                ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                                ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) ||
                                                ', par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) ||
                                                ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                                ', par$saida_oid_divisa: ' || var$aux_oid_divisa(var$aux_oid_divisa.COUNT - 1) ||
                                                ', par$saida_oid_denominacio: ' || var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT - 1) ||
                                                ', par$saida_oid_unid_medida: ' || var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT - 1) ||
                                                ', par$saida_cod_niv_detalle: ' || var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT - 1) ||
                                                ', par$saida_cod_tp_efec_tot: ' || var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT - 1) ||
                                                ', par$saida_oid_calidad: ' || var$aux_oid_calidad(var$aux_oid_calidad.COUNT - 1) ||
                                                ', par$saida_num_importe: ' || var$aux_num_importe(var$aux_num_importe.COUNT - 1) ||
                                                ', par$saida_nel_cantidad: ' || var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT - 1) ||
                                                ', par$cod_cultura: ' || par$cod_cultura 
                                                ,
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                    END IF;

                                END LOOP;
                              END IF;

                              IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                                  /* LOG de validación  */
                                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                          'svalidar_terminos y svalidar_valores',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                                  /* Campos Adcionales */
                                  IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                                      FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                        var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                        var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                        var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                      END LOOP;
                                  END IF;

                                  /* Valores */
                                  IF var$aux_oid_divisa IS NOT NULL AND var$aux_oid_divisa.COUNT > 0 THEN
                                      FOR idxt IN var$aux_oid_divisa.first .. var$aux_oid_divisa.last LOOP
                                        var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                        var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$aux_oid_divisa(idxt);
                                        var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$aux_oid_denominacion(idxt);
                                        var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$aux_oid_unid_medida(idxt);
                                        var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$aux_cod_niv_detalle(idxt);
                                        var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$aux_cod_tp_efec_tot(idxt);
                                        var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$aux_oid_calidad(idxt);
                                        var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$aux_num_importe(idxt);
                                        var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$aux_nel_cantidad(idxt);
                                      END LOOP;
                                  END IF;                 
                              END IF;
                          END IF;
                      END IF;
            
                    END LOOP;
                    IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                      /* INICIO - LOG de sguardar_documento*/
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                          par$cod_identificador   => '');
                                          /* Grabar documentos */
                      sguardar_documento(
                                      par$oid_llamada             => par$oid_llamada,
                                      par$adocs_oid                 => var$adocs_oid,
                                      par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                      par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                      par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                      par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                      par$adocs_cod_actual_id       => var$acod_actual_id,
                                      par$adocs_cod_collection_id   => var$acndoc_collection_id,
                                      par$adocs_cod_externo         => var$adocs_cod_externo,
                                      par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                      par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                      par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                      par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                      par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                      par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                      par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                      par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                      par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                      par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                      par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                      par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                      par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                      par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                      par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                      par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                      par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                      par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                      par$cod_usuario               => par$cod_usuario,
                                      par$cod_cultura               => par$cod_cultura,
                                      par$cod_ejecucion             => par$cod_ejecucion,
                                      par$nel_index                 => par$anel_index(idx)
                                      );
                      /* FIN - LOG - parametros sguardar_documento*/
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                          par$cod_identificador   => '');
                      COMMIT;

                      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                              VALUES (par$anel_index(idx), '0040260000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040260000', gepr_pcomon_###VERSION###.const$CodFunGenerico,
                                      gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');
                    END IF;
                  END IF;
                END IF;

              EXCEPTION
                WHEN OTHERS THEN
                ROLLBACK;
                var$err := gepr_putilidades_###VERSION###.fformat_error;
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                VALUES (
                  par$anel_index(idx), 
                  '3040120001', 
                  gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                      gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 
                  'VALIDACIONES');
                /* LOG ROLLBACK  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Se realiza ROLLBACK',
                                        par$cod_identificador   => '');
              END;

          END LOOP;
        END IF;
        /* Validaciones */
        OPEN par$rc_validaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'VALIDACIONES';

        /* Documentos */
        OPEN par$rc_documentos FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

        /* Planificacion */
        OPEN par$rc_planificaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                                var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                                null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
        COMMIT;

        /* ===  Tratar excepciones - Rollback === */
        EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        var$err := gepr_putilidades_###VERSION###.fformat_error;

        var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                        var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                        null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
                         
        /* LOG ROLLBACK  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se realiza ROLLBACK',
                                par$cod_identificador   => '');

  END sgrabar_mov_balance;
  
  /* Validar Movimientos Balance */
  PROCEDURE svalidar_mov_balance(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);


  END svalidar_mov_balance;

  /* Grabar Movimientos de shipin */
PROCEDURE sgrabar_mov_shipin(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_shipin';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);


      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$bol_controla_faturacion   gepr_pcomon_###VERSION###.tipo$nbol_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable              gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0         gepr_pcomon_###VERSION###.tipo$fyh_;
      var$nel_secuencia             gepr_pcomon_###VERSION###.tipo$nel_ := 0;

      /* Formularios */
      var$oid_formulario     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo    gepr_pcomon_###VERSION###.tipo$cod_;

      /* Cuentas */
      var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
      var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
      var$acndoc_collection_id        gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$aux_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$aux_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_; 

      var$auxt_oid_termino      gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor        gepr_pcomon_###VERSION###.tipo$descs_;
      var$aux_nel_secuencia     gepr_pcomon_###VERSION###.tipo$nel_;
      
    BEGIN
         dbms_output.put_line('Ingrese en Grabar shipin');
        /* INICIO - LOG de parametros iniciales*/
        IF par$oid_llamada IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' ||
                                                ' par$oid_llamada: ' || par$oid_llamada ||
                                                ', par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$info_ejecucion: ' || par$info_ejecucion ||
                                                ', par$cod_usuario: ' || par$cod_usuario ||
                                                ', par$cod_cultura: ' || par$cod_cultura ||
                                                ', par$cod_pais: ' || par$cod_pais,
                                par$cod_identificador   => '');

            /* INICIO LOG de arrays asociativos */
            IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
              FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_index(' || idx || '):  ' || par$anel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_device_id IS NOT NULL AND par$acod_device_id.COUNT > 0 THEN
              FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_cliente IS NOT NULL AND par$acod_cliente.COUNT > 0 THEN
              FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_sub_cliente IS NOT NULL AND par$acod_sub_cliente.COUNT > 0 THEN
              FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_punto_servicio IS NOT NULL AND par$acod_punto_servicio.COUNT > 0 THEN
              FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$afyh_gestion IS NOT NULL AND par$afyh_gestion.COUNT > 0 THEN
              FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$afyh_contable IS NOT NULL AND par$afyh_contable.COUNT > 0 THEN
              FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
              FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_collection_id IS NOT NULL AND par$acndoc_collection_id.COUNT > 0 THEN
              FOR idx IN  par$acndoc_collection_id.first ..  par$acndoc_collection_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_collection_id(' || idx || '):  ' || par$acndoc_collection_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$anel_gmt_minuto IS NOT NULL AND par$anel_gmt_minuto.COUNT > 0 THEN
              FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_cod_termino IS NOT NULL AND par$avtdoc_cod_termino.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_des_valor IS NOT NULL AND par$avtdoc_des_valor.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$acndoc_nel_index.first ..  par$acndoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_nel_index(' || idx || '):  ' || par$acndoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_det_index IS NOT NULL AND par$acndoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$acndoc_det_index.first ..  par$acndoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_det_index(' || idx || '):  ' || par$acndoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_cod_canal IS NOT NULL AND par$acndoc_cod_canal.COUNT > 0 THEN
              FOR idx IN  par$acndoc_cod_canal.first ..  par$acndoc_cod_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_canal(' || idx || '):  ' || par$acndoc_cod_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_cod_sub_canal IS NOT NULL AND par$acndoc_cod_sub_canal.COUNT > 0 THEN
              FOR idx IN  par$acndoc_cod_sub_canal.first ..  par$acndoc_cod_sub_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_sub_canal(' || idx || '):  ' || par$acndoc_cod_sub_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_det_index IS NOT NULL AND par$aefdoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_det_index.first ..  par$aefdoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_det_index(' || idx || '):  ' || par$aefdoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_sub_canal IS NOT NULL AND par$aefdoc_cod_sub_canal.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_sub_canal.first ..  par$aefdoc_cod_sub_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_sub_canal(' || idx || '):  ' || par$aefdoc_cod_sub_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_divisa IS NOT NULL AND par$aefdoc_cod_divisa.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_denominacion IS NOT NULL AND par$aefdoc_cod_denominacion.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_nel_cantidad IS NOT NULL AND par$aefdoc_nel_cantidad.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_num_importe IS NOT NULL AND par$aefdoc_num_importe.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            /* FIN LOG de arrays asociativos */
        END IF;
        /* FIN - LOG de parametros iniciales*/

        /* #### Inicializar los cursores #### */
        OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

        /* Limpiar tabla temporaria */
        DELETE SAPR_GTT_TAUXILIAR;
        COMMIT;

        /* Recuperar Formularios - MAESIC */
        srecuperar_formularios(par$cod_formulario     => 'MAESIC',
                                par$oid_formulario     => var$oid_formulario,
                                par$oid_tipo_documento => var$oid_tipo_documento,
                                par$des_cod_externo    => var$des_cod_externo);

        /* LOG recuperación de formulario  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAESIC - ' ||  
                                    'var$oid_formulario: ' || var$oid_formulario ||
                                    ', var$oid_tipo_documento: ' || var$oid_tipo_documento ||
                                    ', var$des_cod_externo: ' || var$des_cod_externo,
                                par$cod_identificador   => '');


         dbms_output.put_line('Previo a recorrer los arrays aso');

        IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
          FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
              BEGIN
                /* Limpiar tabla temporaria */
                DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
                var$adocs_oid.delete;
                var$adocs_oid_formulario.delete;
                var$adocs_fyh_gestion.delete;
                var$adocs_fyh_contable.delete;
                var$acod_actual_id.delete;
                var$adocs_cod_externo.delete;
                var$adocs_oid_cuenta_ori.delete;
                var$adocs_oid_cuenta_des.delete;
                var$adocs_oid_cuentasaldo_ori.delete;
                var$adocs_oid_cuentasaldo_des.delete;
                var$adocs_oid_sector_ori.delete;
                var$adocs_oid_sector_des.delete;
                var$aefdoc_oid_documento.delete;
                var$aefdoc_oid_divisa.delete;
                var$aefdoc_oid_denominacion.delete;
                var$aefdoc_oid_unid_medida.delete;
                var$aefdoc_cod_niv_detalle.delete;
                var$aefdoc_cod_tp_efec_tot.delete;
                var$aefdoc_oid_calidad.delete;
                var$aefdoc_num_importe.delete;
                var$aefdoc_nel_cantidad.delete;
                var$avtdoc_oid_documento.delete;
                var$avtdoc_oid_termino.delete;
                var$avtdoc_des_valor.delete;

          
                /* LOG de validación  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                            'svalidar_actual_id con parametros:' ||
                            ' par$nel_index: ' || par$anel_index(idx) ||
                            ', par$fyh_gestion: ' || par$afyh_gestion(idx) ||
                            ', par$cod_actual_id: ' || par$acod_actual_id(idx) ||
                            ', par$cod_cultura: ' || par$cod_cultura,
                        par$cod_identificador   => '');

                svalidar_actual_id(par$oid_llamada             => par$oid_llamada,
                                par$nel_index       => par$anel_index(idx),
                                par$fyh_gestion      => par$afyh_gestion(idx),                                   
                                par$cod_actual_id    => par$acod_actual_id(idx),                                 
                                par$cod_cultura      => par$cod_cultura);      

                var$aux_nel_secuencia := 0;
                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
                    FOR idxC IN par$acndoc_nel_index.first .. par$acndoc_nel_index.last LOOP

                      var$auxt_oid_termino.delete;
                      var$auxt_des_valor.delete;
                      var$aux_oid_divisa.delete;  
                      var$aux_oid_denominacion.delete;  
                      var$aux_oid_unid_medida.delete;  
                      var$aux_cod_niv_detalle.delete;  
                      var$aux_cod_tp_efec_tot.delete;  
                      var$aux_oid_calidad.delete;  
                      var$aux_num_importe.delete;
                      var$aux_nel_cantidad.delete;
                      
                      dbms_output.put_line('Previo a validar shipin');

                      /* Procedure responsable por validaciones del documento */
                      svalidar_mov_shipin(par$oid_llamada             => par$oid_llamada,
                                          par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                          par$nel_index               => par$anel_index(idx),
                                          par$cod_device_id           => par$acod_device_id(idx),
                                          par$cod_cliente             => par$acod_cliente(idx),
                                          par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                          par$cod_punto_servicio      => par$acod_punto_servicio(idx),   
                                          par$cod_canal               => par$acndoc_cod_canal(idxC),
                                          par$cod_sub_canal           => par$acndoc_cod_sub_canal(idxC),
                                          par$cod_actual              => par$acod_actual_id(idx),
                                          par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                          par$oid_sector_mae          => var$oid_sector_mae,
                                          par$cod_cultura             => par$cod_cultura,
                                          par$cod_usuario             => par$cod_usuario,
                                          par$cod_pais                => par$cod_pais);

                      /* LOG de validación  */
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'svalidar_mov_shipin con parametros:' ||
                                  ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                  ', par$nel_index: ' || par$anel_index(idx) ||
                                  ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                  ', par$cod_cliente: ' || par$acod_cliente(idx) ||
                                  ', par$cod_sub_cliente: ' || par$acod_sub_cliente(idx) ||
                                  ', par$cod_punto_servicio: ' || par$acod_punto_servicio(idx) ||
                                  ', par$cod_canal: ' || par$acndoc_cod_canal(idxC) ||
                                  ', par$cod_sub_canal: ' || par$acndoc_cod_sub_canal(idxC) ||
                                  ', par$cod_actual: ' || par$acod_actual_id(idx) ||
                                  ', par$oid_cuenta_cliente: ' || var$oid_cuenta_cliente ||
                                  ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                  ', par$cod_cultura: ' || par$cod_cultura ||
                                  ', par$cod_usuario: ' ||par$cod_usuario ||
                                  ', par$cod_pais: ' || par$cod_pais,
                              par$cod_identificador   => '');


                      dbms_output.put_line('Posterior a validar shipin');

                      IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                         dbms_output.put_line('Posterior a validar shipin: No hay error');
                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'svalidar_mov_shipin y svalidar_actual_id',
                              par$cod_identificador   => '');

                          /* Validar fecha gestion */
                          var$fyh_gestion      := par$afyh_gestion(idx);
                          svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                          par$nel_index        => par$anel_index(idx),
                                          par$oid_sector_mae   => var$oid_sector_mae,
                                          par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                          par$fyh_gestion      => var$fyh_gestion,
                                          par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                          par$cod_cultura      => par$cod_cultura);

                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_fecha de gestion con parametros:' ||
                                      ' par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                      ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                      ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                  par$cod_identificador   => '');

                          /* Validar fecha contable */
                          IF par$afyh_contable(idx) IS NULL THEN
                            var$fyh_contable_gmt0      := var$fyh_gestion_gmt0;                            
                          ELSE
                            var$fyh_contable      := par$afyh_contable(idx);
                            svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                        par$nel_index     => par$anel_index(idx),
                                        par$oid_sector_mae   => var$oid_sector_mae,
                                        par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                        par$fyh_gestion      => var$fyh_contable,
                                        par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                                        par$cod_cultura      => par$cod_cultura); 

                            /* LOG de validación  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_fecha contable con parametros:' ||
                                      ' par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                      ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                      ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                  par$cod_identificador   => '');                         
                          END IF;

                          dbms_output.put_line('Posterior a validar fechas');

                          /* Validar Codigo externo */
                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                  'fvalidar_codigo_externo con parametros:' ||
                                  ' par$nel_index: ' ||  par$anel_index(idx) ||
                                  ', par$des_cod_externo: ' || var$des_cod_externo ||
                                  ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                  ', par$fyh_gestion: ' || var$fyh_gestion ||
                                  ', par$cod_precinto: ' || NULL ||
                                  ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                  ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0 || 
                                  ', par$cod_cultura: ' || par$cod_cultura,
                              par$cod_identificador   => '');

                          IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                              /* LOG de validación  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                      'fvalidar_codigo_externo',
                                  par$cod_identificador   => '');

                              var$oid_documento := sys_guid();
                              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario;
                              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento;
                              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                              var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                              var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);


                              /* Formulario y Codigo Externo */
                              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo,
                                                                                                          par$cod_device_id       => par$acod_device_id(idx),
                                                                                                          par$fyh_gestion         => var$fyh_gestion,
                                                                                                          par$cod_precinto        => NULL,
                                                                                                          par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                          par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                          par$nel_sumar_secuencia => var$aux_nel_secuencia);
                              /* LOG de código externo  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'fcargar_codigo_externo:' || 
                                      ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                              var$aux_nel_secuencia := var$aux_nel_secuencia + 1;

                              DBMS_OUTPUT.PUT_LINE('var$adocs_cod_externo: '|| var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                              /* Campos Adcionales */
                              IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                                  FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                                      IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                                      par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                                      par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                                          svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                          par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                          par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                          par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                          par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                          par$cod_usuario         => par$cod_usuario,
                                                          par$cod_cultura         => par$cod_cultura);
                                          /* LOG validar tÃ©rminos  */
                                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                  'svalidar_terminos con parametros:' ||
                                                  ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                  ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                  ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                  ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                                  ,
                                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                      END IF;
                                  END LOOP;
                              END IF;

                              /* Valores */
                              IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
                                FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                                    IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_det_index(idxt) = par$acndoc_det_index(idxC) THEN
                                        /*Utilizar validar_valores () */
                                        svalidar_valores(par$oid_llamada             => par$oid_llamada,
                                                        par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                                        par$nel_index                 => par$anel_index(idx),
                                                        par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                                        par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                                        par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                                        par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                                        par$saida_oid_divisa          => var$aux_oid_divisa(var$aux_oid_divisa.COUNT),
                                                        par$saida_oid_denominacio     => var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT),
                                                        par$saida_oid_unid_medida     => var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT),
                                                        par$saida_cod_niv_detalle     => var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT),
                                                        par$saida_cod_tp_efec_tot     => var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT),
                                                        par$saida_oid_calidad         => var$aux_oid_calidad(var$aux_oid_calidad.COUNT),
                                                        par$saida_num_importe         => var$aux_num_importe(var$aux_num_importe.COUNT),
                                                        par$saida_nel_cantidad        => var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT),
                                                        par$cod_cultura               => par$cod_cultura);

                                        /* LOG validar valores  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Validación de valores de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                'svalidar_valores con parametros:' ||
                                                ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$anel_index: ' || par$anel_index(idx) ||
                                                ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                                ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) ||
                                                ', par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) ||
                                                ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                                ', par$saida_oid_divisa: ' || var$aux_oid_divisa(var$aux_oid_divisa.COUNT - 1) ||
                                                ', par$saida_oid_denominacio: ' || var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT - 1) ||
                                                ', par$saida_oid_unid_medida: ' || var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT - 1) ||
                                                ', par$saida_cod_niv_detalle: ' || var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT - 1) ||
                                                ', par$saida_cod_tp_efec_tot: ' || var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT - 1) ||
                                                ', par$saida_oid_calidad: ' || var$aux_oid_calidad(var$aux_oid_calidad.COUNT - 1) ||
                                                ', par$saida_num_importe: ' || var$aux_num_importe(var$aux_num_importe.COUNT - 1) ||
                                                ', par$saida_nel_cantidad: ' || var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT - 1) ||
                                                ', par$cod_cultura: ' || par$cod_cultura 
                                                ,
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                    END IF;

                                END LOOP;
                              END IF;

                              IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                                  /* LOG de validación  */
                                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                          'svalidar_terminos y svalidar_valores',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                                  /* Campos Adcionales */
                                  IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                                      FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                        var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                        var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                        var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                      END LOOP;
                                  END IF;

                                  /* Valores */
                                  IF var$aux_oid_divisa IS NOT NULL AND var$aux_oid_divisa.COUNT > 0 THEN
                                      FOR idxt IN var$aux_oid_divisa.first .. var$aux_oid_divisa.last LOOP
                                        var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                        var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$aux_oid_divisa(idxt);
                                        var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$aux_oid_denominacion(idxt);
                                        var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$aux_oid_unid_medida(idxt);
                                        var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$aux_cod_niv_detalle(idxt);
                                        var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$aux_cod_tp_efec_tot(idxt);
                                        var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$aux_oid_calidad(idxt);
                                        var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$aux_num_importe(idxt);
                                        var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$aux_nel_cantidad(idxt);
                                      END LOOP;
                                  END IF;                 
                              END IF;
                          END IF;
                      END IF;
            
                    END LOOP;
                    IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                      /* INICIO - LOG de sguardar_documento*/
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                          par$cod_identificador   => '');
                                          /* Grabar documentos */
                      sguardar_documento(
                                      par$oid_llamada             => par$oid_llamada,
                                      par$adocs_oid                 => var$adocs_oid,
                                      par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                      par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                      par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                      par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                      par$adocs_cod_actual_id       => var$acod_actual_id,
                                      par$adocs_cod_collection_id   => var$acndoc_collection_id,
                                      par$adocs_cod_externo         => var$adocs_cod_externo,
                                      par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                      par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                      par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                      par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                      par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                      par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                      par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                      par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                      par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                      par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                      par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                      par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                      par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                      par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                      par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                      par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                      par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                      par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                      par$cod_usuario               => par$cod_usuario,
                                      par$cod_cultura               => par$cod_cultura,
                                      par$cod_ejecucion             => par$cod_ejecucion,
                                      par$nel_index                 => par$anel_index(idx)
                                      );
                      /* FIN - LOG - parametros sguardar_documento*/
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                          par$cod_identificador   => '');
                      COMMIT;

                      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                              VALUES (par$anel_index(idx), '0040270000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040270000', gepr_pcomon_###VERSION###.const$CodFunGenerico,
                                      gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');
                    END IF;
                  END IF;
                END IF;

              EXCEPTION
                WHEN OTHERS THEN
                ROLLBACK;
                var$err := gepr_putilidades_###VERSION###.fformat_error;
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                VALUES (
                  par$anel_index(idx), 
                  '3040120001', 
                  gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                      gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 
                  'VALIDACIONES');
                /* LOG ROLLBACK  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Se realiza ROLLBACK',
                                        par$cod_identificador   => '');
              END;

          END LOOP;
        END IF;
        /* Validaciones */
        OPEN par$rc_validaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'VALIDACIONES';

        /* Documentos */
        OPEN par$rc_documentos FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

        /* Planificacion */
        OPEN par$rc_planificaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                                var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                                null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
        COMMIT;

    /* ===  Tratar excepciones - Rollback === */
    EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    var$err := gepr_putilidades_###VERSION###.fformat_error;

    var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
    gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                    var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                    null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
                        
    /* LOG ROLLBACK  */
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Se realiza ROLLBACK',
                            par$cod_identificador   => '');

  END sgrabar_mov_shipin;
  
  /* Validar Movimientos ShipIn */
  PROCEDURE svalidar_mov_shipin(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);


  END svalidar_mov_shipin;
  /* Grabar Movimientos de MoveIn */
  PROCEDURE sgrabar_mov_movein(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acndoc_cod_canal        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acndoc_collection_id    IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acndoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_det_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_sub_canal    IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

      const$nombre_func CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'sgrabar_mov_movein';

      /* LOG */
      var$inicio    TIMESTAMP := SYSTIMESTAMP;
      var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
      var$err       varchar2(4000);


      /* Variables auxiliares */
      var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
      var$bol_controla_faturacion   gepr_pcomon_###VERSION###.tipo$nbol_;
      var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable              gepr_pcomon_###VERSION###.tipo$fyh_;
      var$fyh_contable_gmt0         gepr_pcomon_###VERSION###.tipo$fyh_;
      var$nel_secuencia             gepr_pcomon_###VERSION###.tipo$nel_ := 0;

      /* Formularios */
      var$oid_formulario     gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_tipo_documento gepr_pcomon_###VERSION###.tipo$oid_;
      var$des_cod_externo    gepr_pcomon_###VERSION###.tipo$cod_;

      /* Cuentas */
      var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
      var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;

      /* Documentos */
      var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_fyh_contable         gepr_pcomon_###VERSION###.tipo$fyhs_;
      var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
      var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
      var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
      var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
      var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
      var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
      var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
      var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
      var$acndoc_collection_id      gepr_pcomon_###VERSION###.tipo$descs_;

      /* Variables listas de auxiliares */
      var$aux_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
      var$aux_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
      var$aux_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
      var$aux_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_; 

      var$auxt_oid_termino      gepr_pcomon_###VERSION###.tipo$oids_;
      var$auxt_des_valor        gepr_pcomon_###VERSION###.tipo$descs_;
      var$aux_nel_secuencia     gepr_pcomon_###VERSION###.tipo$nel_;
      
    BEGIN
         dbms_output.put_line('Ingrese en Grabar movein');
        /* INICIO - LOG de parametros iniciales*/
        IF par$oid_llamada IS NOT NULL THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Parametros iniciales: ' ||
                                                ' par$oid_llamada: ' || par$oid_llamada ||
                                                ', par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$info_ejecucion: ' || par$info_ejecucion ||
                                                ', par$cod_usuario: ' || par$cod_usuario ||
                                                ', par$cod_cultura: ' || par$cod_cultura ||
                                                ', par$cod_pais: ' || par$cod_pais,
                                par$cod_identificador   => '');

            /* INICIO LOG de arrays asociativos */
            IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
              FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_index(' || idx || '):  ' || par$anel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_device_id IS NOT NULL AND par$acod_device_id.COUNT > 0 THEN
              FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_cliente IS NOT NULL AND par$acod_cliente.COUNT > 0 THEN
              FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_sub_cliente IS NOT NULL AND par$acod_sub_cliente.COUNT > 0 THEN
              FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_punto_servicio IS NOT NULL AND par$acod_punto_servicio.COUNT > 0 THEN
              FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$afyh_gestion IS NOT NULL AND par$afyh_gestion.COUNT > 0 THEN
              FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$afyh_contable IS NOT NULL AND par$afyh_contable.COUNT > 0 THEN
              FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
              FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_collection_id IS NOT NULL AND par$acndoc_collection_id.COUNT > 0 THEN
              FOR idx IN  par$acndoc_collection_id.first ..  par$acndoc_collection_id.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_collection_id(' || idx || '):  ' || par$acndoc_collection_id(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$anel_gmt_minuto IS NOT NULL AND par$anel_gmt_minuto.COUNT > 0 THEN
              FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_cod_termino IS NOT NULL AND par$avtdoc_cod_termino.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$avtdoc_des_valor IS NOT NULL AND par$avtdoc_des_valor.COUNT > 0 THEN
              FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$acndoc_nel_index.first ..  par$acndoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_nel_index(' || idx || '):  ' || par$acndoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_det_index IS NOT NULL AND par$acndoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$acndoc_det_index.first ..  par$acndoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_det_index(' || idx || '):  ' || par$acndoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_cod_canal IS NOT NULL AND par$acndoc_cod_canal.COUNT > 0 THEN
              FOR idx IN  par$acndoc_cod_canal.first ..  par$acndoc_cod_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_canal(' || idx || '):  ' || par$acndoc_cod_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$acndoc_cod_sub_canal IS NOT NULL AND par$acndoc_cod_sub_canal.COUNT > 0 THEN
              FOR idx IN  par$acndoc_cod_sub_canal.first ..  par$acndoc_cod_sub_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$acndoc_cod_sub_canal(' || idx || '):  ' || par$acndoc_cod_sub_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_det_index IS NOT NULL AND par$aefdoc_det_index.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_det_index.first ..  par$aefdoc_det_index.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_det_index(' || idx || '):  ' || par$aefdoc_det_index(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_sub_canal IS NOT NULL AND par$aefdoc_cod_sub_canal.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_sub_canal.first ..  par$aefdoc_cod_sub_canal.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_sub_canal(' || idx || '):  ' || par$aefdoc_cod_sub_canal(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_divisa IS NOT NULL AND par$aefdoc_cod_divisa.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_cod_denominacion IS NOT NULL AND par$aefdoc_cod_denominacion.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_nel_cantidad IS NOT NULL AND par$aefdoc_nel_cantidad.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            IF par$aefdoc_num_importe IS NOT NULL AND par$aefdoc_num_importe.COUNT > 0 THEN
              FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Parametros iniciales: ' || 'par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx),
                                  par$cod_identificador   => '');
              END LOOP;
            END IF;
            /* FIN LOG de arrays asociativos */
        END IF;
        /* FIN - LOG de parametros iniciales*/

        /* #### Inicializar los cursores #### */
        OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
        OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

        /* Limpiar tabla temporaria */
        DELETE SAPR_GTT_TAUXILIAR;
        COMMIT;

        /* Recuperar Formularios - MAEMIC */
        srecuperar_formularios(par$cod_formulario     => 'MAEMIC',
                                par$oid_formulario     => var$oid_formulario,
                                par$oid_tipo_documento => var$oid_tipo_documento,
                                par$des_cod_externo    => var$des_cod_externo);

        /* LOG recuperación de formulario  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se recupera formulario MAEMIC - ' ||  
                                    'var$oid_formulario: ' || var$oid_formulario ||
                                    ', var$oid_tipo_documento: ' || var$oid_tipo_documento ||
                                    ', var$des_cod_externo: ' || var$des_cod_externo,
                                par$cod_identificador   => '');


         dbms_output.put_line('Previo a recorrer los arrays aso');

        IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
          FOR idx IN par$anel_index.first .. par$anel_index.last LOOP
              BEGIN
                /* Limpiar tabla temporaria */
                DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES');
                var$adocs_oid.delete;
                var$adocs_oid_formulario.delete;
                var$adocs_fyh_gestion.delete;
                var$adocs_fyh_contable.delete;
                var$acod_actual_id.delete;
                var$adocs_cod_externo.delete;
                var$adocs_oid_cuenta_ori.delete;
                var$adocs_oid_cuenta_des.delete;
                var$adocs_oid_cuentasaldo_ori.delete;
                var$adocs_oid_cuentasaldo_des.delete;
                var$adocs_oid_sector_ori.delete;
                var$adocs_oid_sector_des.delete;
                var$aefdoc_oid_documento.delete;
                var$aefdoc_oid_divisa.delete;
                var$aefdoc_oid_denominacion.delete;
                var$aefdoc_oid_unid_medida.delete;
                var$aefdoc_cod_niv_detalle.delete;
                var$aefdoc_cod_tp_efec_tot.delete;
                var$aefdoc_oid_calidad.delete;
                var$aefdoc_num_importe.delete;
                var$aefdoc_nel_cantidad.delete;
                var$avtdoc_oid_documento.delete;
                var$avtdoc_oid_termino.delete;
                var$avtdoc_des_valor.delete;

          
                /* LOG de validación  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                            'svalidar_actual_id con parametros:' ||
                            ' par$nel_index: ' || par$anel_index(idx) ||
                            ', par$fyh_gestion: ' || TO_CHAR(par$afyh_gestion(idx), 'DD-MM-YYYY HH24:MI:SS') ||
                            ', par$cod_actual_id: ' || par$acod_actual_id(idx) ||
                            ', par$cod_cultura: ' || par$cod_cultura,
                        par$cod_identificador   => '');

                svalidar_actual_id(par$oid_llamada             => par$oid_llamada,
                                par$nel_index       => par$anel_index(idx),
                                par$fyh_gestion      => par$afyh_gestion(idx),                                   
                                par$cod_actual_id    => par$acod_actual_id(idx),                                 
                                par$cod_cultura      => par$cod_cultura);      

                var$aux_nel_secuencia := 0;
                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  IF par$acndoc_nel_index IS NOT NULL AND par$acndoc_nel_index.COUNT > 0 THEN
                    FOR idxC IN par$acndoc_nel_index.first .. par$acndoc_nel_index.last LOOP

                      var$auxt_oid_termino.delete;
                      var$auxt_des_valor.delete;
                      var$aux_oid_divisa.delete;  
                      var$aux_oid_denominacion.delete;  
                      var$aux_oid_unid_medida.delete;  
                      var$aux_cod_niv_detalle.delete;  
                      var$aux_cod_tp_efec_tot.delete;  
                      var$aux_oid_calidad.delete;  
                      var$aux_num_importe.delete;
                      var$aux_nel_cantidad.delete;
                      
                      dbms_output.put_line('Previo a validar movein');

                      /* Procedure responsable por validaciones del documento */
                      svalidar_mov_movein(par$oid_llamada             => par$oid_llamada,
                                          par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                          par$nel_index               => par$anel_index(idx),
                                          par$cod_device_id           => par$acod_device_id(idx),
                                          par$cod_cliente             => par$acod_cliente(idx),
                                          par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                          par$cod_punto_servicio      => par$acod_punto_servicio(idx),   
                                          par$cod_canal               => par$acndoc_cod_canal(idxC),
                                          par$cod_sub_canal           => par$acndoc_cod_sub_canal(idxC),
                                          par$cod_actual              => par$acod_actual_id(idx),
                                          par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                          par$oid_sector_mae          => var$oid_sector_mae,
                                          par$cod_cultura             => par$cod_cultura,
                                          par$cod_usuario             => par$cod_usuario,
                                          par$cod_pais                => par$cod_pais);

                      /* LOG de validación  */
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'svalidar_mov_movein con parametros:' ||
                                  ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                  ', par$nel_index: ' || par$anel_index(idx) ||
                                  ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                  ', par$cod_cliente: ' || par$acod_cliente(idx) ||
                                  ', par$cod_sub_cliente: ' || par$acod_sub_cliente(idx) ||
                                  ', par$cod_punto_servicio: ' || par$acod_punto_servicio(idx) ||
                                  ', par$cod_canal: ' || par$acndoc_cod_canal(idxC) ||
                                  ', par$cod_sub_canal: ' || par$acndoc_cod_sub_canal(idxC) ||
                                  ', par$cod_actual: ' || par$acod_actual_id(idx) ||
                                  ', par$oid_cuenta_cliente: ' || var$oid_cuenta_cliente ||
                                  ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                  ', par$cod_cultura: ' || par$cod_cultura ||
                                  ', par$cod_usuario: ' ||par$cod_usuario ||
                                  ', par$cod_pais: ' || par$cod_pais,
                              par$cod_identificador   => '');


                      dbms_output.put_line('Posterior a validar movein');

                      IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                         dbms_output.put_line('Posterior a validar movein: No hay error');
                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                                par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                  'svalidar_mov_movein y svalidar_actual_id',
                              par$cod_identificador   => '');

                          /* Validar fecha gestion */
                          var$fyh_gestion      := par$afyh_gestion(idx);
                          svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                          par$nel_index        => par$anel_index(idx),
                                          par$oid_sector_mae   => var$oid_sector_mae,
                                          par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                          par$fyh_gestion      => var$fyh_gestion,
                                          par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                                          par$cod_cultura      => par$cod_cultura);

                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_fecha de gestion con parametros:' ||
                                      ' par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                      ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                      ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                  par$cod_identificador   => '');

                          /* Validar fecha contable */
                          IF par$afyh_contable(idx) IS NULL THEN
                            var$fyh_contable_gmt0      := var$fyh_gestion_gmt0;                            
                          ELSE
                            var$fyh_contable      := par$afyh_contable(idx);
                            svalidar_fecha(par$oid_llamada             => par$oid_llamada,
                                        par$nel_index     => par$anel_index(idx),
                                        par$oid_sector_mae   => var$oid_sector_mae,
                                        par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                                        par$fyh_gestion      => var$fyh_contable,
                                        par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                                        par$cod_cultura      => par$cod_cultura); 

                            /* LOG de validación  */
                            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'svalidar_fecha contable con parametros:' ||
                                      ' par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                      ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx) ||
                                      ', par$fyh_gestion: ' || TO_CHAR(var$fyh_contable, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_contable_gmt0, 'DD-MM-YYYY HH24:MI:SS') ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                  par$cod_identificador   => '');                         
                          END IF;

                          dbms_output.put_line('Posterior a validar fechas');

                          /* Validar Codigo externo */
                          /* LOG de validación  */
                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Validación de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                  'fvalidar_codigo_externo con parametros:' ||
                                  ' par$nel_index: ' ||  par$anel_index(idx) ||
                                  ', par$des_cod_externo: ' || var$des_cod_externo ||
                                  ', par$cod_device_id: ' || par$acod_device_id(idx) ||
                                  ', par$fyh_gestion: ' || TO_CHAR(var$fyh_gestion, 'DD-MM-YYYY HH24:MI:SS') ||
                                  ', par$cod_precinto: ' || NULL ||
                                  ', par$oid_sector_mae: ' || var$oid_sector_mae ||
                                  ', par$fyh_gestion_gmt0: ' || TO_CHAR(var$fyh_gestion_gmt0, 'DD-MM-YYYY HH24:MI:SS') || 
                                  ', par$cod_cultura: ' || par$cod_cultura,
                              par$cod_identificador   => '');

                          IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo, par$acod_device_id(idx), var$fyh_gestion, NULL, var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN
                              /* LOG de validación  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Validación exitosa de codigo externo de movimiento de indice ('|| par$anel_index(idx) ||') - '||  
                                      'fvalidar_codigo_externo',
                                  par$cod_identificador   => '');

                              var$oid_documento := sys_guid();
                              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
                              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario;
                              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento;
                              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
                              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
                              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
                              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
                              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
                              var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
                              var$acndoc_collection_id(var$acndoc_collection_id.COUNT) := par$acndoc_collection_id(idxC);


                              /* Formulario y Codigo Externo */
                              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo,
                                                                                                          par$cod_device_id       => par$acod_device_id(idx),
                                                                                                          par$fyh_gestion         => var$fyh_gestion,
                                                                                                          par$cod_precinto        => NULL,
                                                                                                          par$oid_sector_mae      => var$oid_sector_mae,
                                                                                                          par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                                          par$nel_sumar_secuencia => var$aux_nel_secuencia);
                              /* LOG de código externo  */
                              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                  par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Carga de código externo en array asociativo de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                      'fcargar_codigo_externo:' || 
                                      ' var$adocs_cod_externo('|| (var$adocs_cod_externo.COUNT - 1) ||'): ' || var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1)
                                      ,
                                  par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                              var$aux_nel_secuencia := var$aux_nel_secuencia + 1;

                              DBMS_OUTPUT.PUT_LINE('var$adocs_cod_externo: '|| var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                              /* Campos Adcionales */
                              IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                                  FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                                      IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                                      par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                                      par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                                          svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                                          par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                                          par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                                          par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                                          par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                                          par$cod_usuario         => par$cod_usuario,
                                                          par$cod_cultura         => par$cod_cultura);
                                          /* LOG validar tÃ©rminos  */
                                          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                              par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Validación de campos adicionales de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                  'svalidar_terminos con parametros:' ||
                                                  ' par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) ||
                                                  ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) ||
                                                  ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                                  ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) 
                                                  ,
                                              par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                      END IF;
                                  END LOOP;
                              END IF;

                              /* Valores */
                              IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
                                FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                                    IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) AND par$aefdoc_det_index(idxt) = par$acndoc_det_index(idxC) THEN
                                        /*Utilizar validar_valores () */
                                        svalidar_valores(par$oid_llamada             => par$oid_llamada,
                                                        par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                                        par$nel_index                 => par$anel_index(idx),
                                                        par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                                        par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                                        par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                                        par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                                        par$saida_oid_divisa          => var$aux_oid_divisa(var$aux_oid_divisa.COUNT),
                                                        par$saida_oid_denominacio     => var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT),
                                                        par$saida_oid_unid_medida     => var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT),
                                                        par$saida_cod_niv_detalle     => var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT),
                                                        par$saida_cod_tp_efec_tot     => var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT),
                                                        par$saida_oid_calidad         => var$aux_oid_calidad(var$aux_oid_calidad.COUNT),
                                                        par$saida_num_importe         => var$aux_num_importe(var$aux_num_importe.COUNT),
                                                        par$saida_nel_cantidad        => var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT),
                                                        par$cod_cultura               => par$cod_cultura);

                                        /* LOG validar valores  */
                                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                            par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                            par$des_version     => const$version,                            
                                            par$des_detalle     => 'Validación de valores de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                                'svalidar_valores con parametros:' ||
                                                ' par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno ||
                                                ', par$anel_index: ' || par$anel_index(idx) ||
                                                ', par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) ||
                                                ', par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) ||
                                                ', par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) ||
                                                ', par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) ||
                                                ', par$saida_oid_divisa: ' || var$aux_oid_divisa(var$aux_oid_divisa.COUNT - 1) ||
                                                ', par$saida_oid_denominacio: ' || var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT - 1) ||
                                                ', par$saida_oid_unid_medida: ' || var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT - 1) ||
                                                ', par$saida_cod_niv_detalle: ' || var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT - 1) ||
                                                ', par$saida_cod_tp_efec_tot: ' || var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT - 1) ||
                                                ', par$saida_oid_calidad: ' || var$aux_oid_calidad(var$aux_oid_calidad.COUNT - 1) ||
                                                ', par$saida_num_importe: ' || var$aux_num_importe(var$aux_num_importe.COUNT - 1) ||
                                                ', par$saida_nel_cantidad: ' || var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT - 1) ||
                                                ', par$cod_cultura: ' || par$cod_cultura 
                                                ,
                                            par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                                    END IF;

                                END LOOP;
                              END IF;

                              IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                                  /* LOG de validación  */
                                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                      par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Validación exitosa de movimiento de indice ('|| par$anel_index(idx) ||') - ' ||  
                                          'svalidar_terminos y svalidar_valores',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                                  /* Campos Adcionales */
                                  IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                                      FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                                        var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                                        var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                                        var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);
                                      END LOOP;
                                  END IF;

                                  /* Valores */
                                  IF var$aux_oid_divisa IS NOT NULL AND var$aux_oid_divisa.COUNT > 0 THEN
                                      FOR idxt IN var$aux_oid_divisa.first .. var$aux_oid_divisa.last LOOP
                                        var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                                        var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$aux_oid_divisa(idxt);
                                        var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$aux_oid_denominacion(idxt);
                                        var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$aux_oid_unid_medida(idxt);
                                        var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$aux_cod_niv_detalle(idxt);
                                        var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$aux_cod_tp_efec_tot(idxt);
                                        var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$aux_oid_calidad(idxt);
                                        var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$aux_num_importe(idxt);
                                        var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$aux_nel_cantidad(idxt);
                                      END LOOP;
                                  END IF;                 
                              END IF;
                          END IF;
                      END IF;
            
                    END LOOP;
                    IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                      /* INICIO - LOG de sguardar_documento*/
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                          par$cod_identificador   => '');
                                          /* Grabar documentos */
                      sguardar_documento(
                                      par$oid_llamada             => par$oid_llamada,
                                      par$adocs_oid                 => var$adocs_oid,
                                      par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                      par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                      par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                      par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                      par$adocs_cod_actual_id       => var$acod_actual_id,
                                      par$adocs_cod_collection_id   => var$acndoc_collection_id,
                                      par$adocs_cod_externo         => var$adocs_cod_externo,
                                      par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                      par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                      par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                      par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                      par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                      par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                      par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                      par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                      par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                      par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                      par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                      par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                      par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                      par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                      par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                      par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                      par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                      par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                      par$cod_usuario               => par$cod_usuario,
                                      par$cod_cultura               => par$cod_cultura,
                                      par$cod_ejecucion             => par$cod_ejecucion,
                                      par$nel_index                 => par$anel_index(idx)
                                      );
                      /* FIN - LOG - parametros sguardar_documento*/
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Finaliza llamada a procedure sguardar_documento de movimiento de indice ('|| par$anel_index(idx) ||') ',
                                          par$cod_identificador   => '');
                      COMMIT;

                      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                              VALUES (par$anel_index(idx), '0040290000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040290000', gepr_pcomon_###VERSION###.const$CodFunGenerico,
                                      gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');
                    END IF;
                  END IF;
                END IF;

              EXCEPTION
                WHEN OTHERS THEN
                ROLLBACK;
                var$err := gepr_putilidades_###VERSION###.fformat_error;
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                VALUES (
                  par$anel_index(idx), 
                  '3040120001', 
                  gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                      gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 
                  'VALIDACIONES');
                /* LOG ROLLBACK  */
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                        par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Se realiza ROLLBACK',
                                        par$cod_identificador   => '');
              END;

          END LOOP;
        END IF;
        /* Validaciones */
        OPEN par$rc_validaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'VALIDACIONES';

        /* Documentos */
        OPEN par$rc_documentos FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

        /* Planificacion */
        OPEN par$rc_planificaciones FOR
            SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                                var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                                null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
        COMMIT;
        
        /* ===  Tratar excepciones - Rollback === */
        EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        var$err := gepr_putilidades_###VERSION###.fformat_error;

        var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
        gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$codFuncionalidad || '.' || const$nombre_func,
                        var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                        null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
                         
        /* LOG ROLLBACK  */
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada => par$oid_llamada,
                                par$des_origen      => const$codFuncionalidad || '.' || const$nombre_func,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Se realiza ROLLBACK',
                                par$cod_identificador   => '');

  END sgrabar_mov_movein;

  /* Validar Movimientos MoveIn */
  PROCEDURE svalidar_mov_movein(par$oid_llamada              IN gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                      par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,   
                                      par$cod_canal               IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_sub_canal           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_actual              IN gepr_pcomon_###VERSION###.tipo$desc_,
                                      par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                      par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                      par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                      par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    var$nel_existe           gepr_pcomon_###VERSION###.tipo$nel_;

  BEGIN

    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => par$cod_canal,
                    par$cod_sub_canal           => par$cod_sub_canal,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);


  END svalidar_mov_movein;

  /* Grabar Movimientos de Recojo */
  PROCEDURE sgrabar_mov_recojo(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_precinto           IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$hacer_commit            IN gepr_pcomon_###VERSION###.tipo$bol_ := TRUE,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

    -- Variables de LOG
    const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.sgrabar_mov_recojo';
    var$detalle           VARCHAR2(4000);
    var$detalle_actual    VARCHAR2(4000);

    /* LOG */
    var$inicio    TIMESTAMP := SYSTIMESTAMP;
    var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$err       varchar2(4000);

    /* Variables auxiliares */
    var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
    var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
    var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
    var$fyh_contable               gepr_pcomon_###VERSION###.tipo$fyh_;
    var$fyh_contable_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;

    /* Formularios */
    var$oid_formulario_maercjo     gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_tipo_documento_maercjo gepr_pcomon_###VERSION###.tipo$oid_;
    var$des_cod_externo_maercjo    gepr_pcomon_###VERSION###.tipo$cod_;

    /* Cuentas */
    var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;

    /* Documentos */
    var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
    var$adocs_fyh_contable         gepr_pcomon_###VERSION###.tipo$fyhs_;
    var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
    var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
    var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
    var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
    var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
    var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
    var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
    var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
    var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
    var$acod_collection_id        gepr_pcomon_###VERSION###.tipo$descs_;

    /* Variables listas de auxiliares */
    var$aux_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
    var$aux_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
    var$aux_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
    var$aux_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
    var$aux_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
    var$aux_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
    var$aux_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
    var$aux_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;
    var$auxt_oid_termino          gepr_pcomon_###VERSION###.tipo$oids_;
    var$auxt_des_valor            gepr_pcomon_###VERSION###.tipo$descs_;
    var$array_nulo                 gepr_pcomon_###VERSION###.tipo$descs_;

  BEGIN

    /* #### Inicializar los cursores #### */
    OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
    OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
    OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

    IF par$hacer_commit THEN
      /* Limpiar tabla temporaria */
      DELETE SAPR_GTT_TAUXILIAR;
      COMMIT;
    END IF;
    
    -- INICIO - LOG de parametros iniciales
    IF par$oid_llamada IS NOT NULL THEN
      var$detalle := q'[Parametros iniciales: 
        par$oid_llamada: ]'             || par$oid_llamada                || q'[
        par$cod_identificador_ajeno: ]' || par$cod_identificador_ajeno    || q'[
        par$info_ejecucion: ]'          || par$info_ejecucion             || q'[
        par$cod_usuario: ]'             || par$cod_usuario                || q'[
        par$cod_cultura: ]'             || par$cod_cultura                || q'[
        par$cod_pais: ]'                || par$cod_pais                   || q'[
        par$hacer_commit: ]'            || CASE WHEN par$hacer_commit THEN 'TRUE' ELSE 'FALSE'END;

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
                          
      /* INICIO LOG de arrays asociativos */
      IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
            var$detalle_actual := '';
            IF par$anel_index(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$anel_index(' || idx || '):  ' || par$anel_index(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$anel_index(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_device_id IS NOT NULL AND par$acod_device_id.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
            var$detalle_actual := '';
            IF par$acod_device_id(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_device_id(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_cliente IS NOT NULL AND par$acod_cliente.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
            var$detalle_actual := '';
            IF par$acod_cliente(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_cliente(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_sub_cliente IS NOT NULL AND par$acod_sub_cliente.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
            var$detalle_actual := '';
            IF par$acod_sub_cliente(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_sub_cliente(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_punto_servicio IS NOT NULL AND par$acod_punto_servicio.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
            var$detalle_actual := '';
            IF par$acod_punto_servicio(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_punto_servicio(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$afyh_gestion IS NOT NULL AND par$afyh_gestion.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
            var$detalle_actual := '';
            IF par$afyh_gestion(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$afyh_gestion(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$afyh_contable IS NOT NULL AND par$afyh_contable.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
            var$detalle_actual := '';
            IF par$afyh_contable(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$afyh_contable(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;
        
      IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
            var$detalle_actual := '';
            IF par$acod_actual_id(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_actual_id(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_collection_id IS NOT NULL AND par$acod_collection_id.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_collection_id.first ..  par$acod_collection_id.last LOOP 
            var$detalle_actual := '';
            IF par$acod_collection_id(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_collection_id(' || idx || '):  ' || par$acod_collection_id(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_collection_id(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$anel_gmt_minuto IS NOT NULL AND par$anel_gmt_minuto.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
            var$detalle_actual := '';
            IF par$anel_gmt_minuto(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$anel_gmt_minuto(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
            var$detalle_actual := '';
            IF par$avtdoc_nel_index(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_nel_index(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$avtdoc_cod_termino IS NOT NULL AND par$avtdoc_cod_termino.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
            var$detalle_actual := '';
            IF par$avtdoc_cod_termino(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_cod_termino(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$avtdoc_des_valor IS NOT NULL AND par$avtdoc_des_valor.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
            var$detalle_actual := '';
            IF par$avtdoc_des_valor(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_des_valor(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_nel_index(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_index(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_cod_divisa IS NOT NULL AND par$aefdoc_cod_divisa.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_cod_divisa(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_divisa(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_cod_denominacion IS NOT NULL AND par$aefdoc_cod_denominacion.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_cod_denominacion(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_denominacion(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_nel_cantidad IS NOT NULL AND par$aefdoc_nel_cantidad.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_nel_cantidad(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_cantidad(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_num_importe IS NOT NULL AND par$aefdoc_num_importe.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_num_importe(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_num_importe(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;
    END IF;
    -- FIN - LOG de parametros iniciales

    /* Recuperar Formularios - MAERCJO */
    srecuperar_formularios(par$cod_formulario     => 'MAERCJO',
                            par$oid_formulario     => var$oid_formulario_maercjo,
                            par$oid_tipo_documento => var$oid_tipo_documento_maercjo,
                            par$des_cod_externo    => var$des_cod_externo_maercjo);

    var$detalle := '';
    var$detalle := var$detalle || 'srecuperar_formularios(par$cod_formulario     =>' || const$comilla_simple|| 'MAERCJO' || const$comilla_simple || ', ' || const$new_line;
    var$detalle := var$detalle || 'par$oid_formulario: ' || var$oid_formulario_maercjo || const$new_line;
    var$detalle := var$detalle || 'par$oid_tipo_documento: ' || var$oid_tipo_documento_maercjo || const$new_line;
    var$detalle := var$detalle || 'par$des_cod_externo: ' || var$des_cod_externo_maercjo || const$new_line;

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                      par$des_origen      => const$des_origen,
                      par$des_version     => const$version,                            
                      par$des_detalle     => var$detalle,
                      par$cod_identificador   => '');

      
    FOR idx IN par$anel_index.first .. par$anel_index.last LOOP

        BEGIN
          /* Limpiar tabla temporaria */
          DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES', 'TIPO_PERIODO_AC', 'TIPO_PERIODO_RE', 'TIPO_PERIODO_BO', 'VALIDACIONES_FECHA_CONFIRMAR');
          
          var$adocs_oid.delete;
          var$adocs_oid_formulario.delete;
          var$adocs_fyh_gestion.delete;
          var$adocs_fyh_contable.delete;
          var$acod_actual_id.delete;
          var$adocs_cod_externo.delete;
          var$adocs_oid_cuenta_ori.delete;
          var$adocs_oid_cuenta_des.delete;
          var$adocs_oid_cuentasaldo_ori.delete;
          var$adocs_oid_cuentasaldo_des.delete;
          var$adocs_oid_sector_ori.delete;
          var$adocs_oid_sector_des.delete;
          var$aefdoc_oid_documento.delete;
          var$aefdoc_oid_divisa.delete;
          var$aefdoc_oid_denominacion.delete;
          var$aefdoc_oid_unid_medida.delete;
          var$aefdoc_cod_niv_detalle.delete;
          var$aefdoc_cod_tp_efec_tot.delete;
          var$aefdoc_oid_calidad.delete;
          var$aefdoc_num_importe.delete;
          var$aefdoc_nel_cantidad.delete;
          var$avtdoc_oid_documento.delete;
          var$avtdoc_oid_termino.delete;
          var$avtdoc_des_valor.delete;
          var$aux_oid_divisa.delete;
          var$aux_oid_denominacion.delete;
          var$aux_oid_unid_medida.delete;
          var$aux_cod_niv_detalle.delete;
          var$aux_cod_tp_efec_tot.delete;
          var$aux_oid_calidad.delete;
          var$aux_num_importe.delete;
          var$aux_nel_cantidad.delete;
          var$auxt_oid_termino.delete;
          var$auxt_des_valor.delete;


          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$des_origen,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Por ingresar en svalidar_mov_recojo()',
                              par$cod_identificador   => '');

          /* Procedure responsable por validaciones del documento */
          svalidar_mov_recojo(par$oid_llamada => par$oid_llamada,
                                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                    par$nel_index               => par$anel_index(idx),
                                    par$cod_device_id           => par$acod_device_id(idx),
                                    par$cod_cliente             => par$acod_cliente(idx),
                                    par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                    par$cod_punto_servicio      => par$acod_punto_servicio(idx),
                                    par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                    par$oid_sector_mae          => var$oid_sector_mae,
                                    par$cod_cultura             => par$cod_cultura,
                                    par$cod_usuario             => par$cod_usuario,
                                    par$cod_pais                => par$cod_pais);
          

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$des_origen,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Por ingresar en svalidar_actual_id()',
                              par$cod_identificador   => '');
          svalidar_actual_id(
            par$oid_llamada  => par$oid_llamada,
            par$nel_index    => par$anel_index(idx),
            par$fyh_gestion  => par$afyh_gestion(idx),
            par$cod_actual_id=> par$acod_actual_id(idx),
            par$cod_cultura  => par$cod_cultura);

          /* CREAR MOVIMIENTO MAERCJO */
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$des_origen,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'INICIO grabar movimiento MAERCJO',
                              par$cod_identificador   => '');
          IF var$oid_formulario_maercjo IS NULL AND var$oid_tipo_documento_maercjo IS NULL AND var$des_cod_externo_maercjo IS NULL THEN
              INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                  VALUES (par$anel_index(idx), '2040120004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAERCJO', 0), 'VALIDACIONES');
              
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$des_origen,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'var$oid_formulario_maercjo IS NULL AND var$oid_tipo_documento_maercjo IS NULL AND var$des_cod_externo_maercjo' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAERCJO', 0),
                              par$cod_identificador   => '');
          END IF;
        
          IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'NOT fhay_error(par$nel_index => par$anel_index(idx))',
                                      par$cod_identificador   => '');
            /* Validar fecha gestion */
            var$fyh_gestion      := par$afyh_gestion(idx);
            svalidar_fecha(par$oid_llamada      => par$oid_llamada,
                            par$nel_index        => par$anel_index(idx),
                            par$oid_sector_mae   => var$oid_sector_mae,
                            par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                            par$fyh_gestion      => var$fyh_gestion,
                            par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                            par$cod_cultura      => par$cod_cultura);

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'svalidar_fecha(par$nel_index: ' || par$anel_index(idx)
                                      || ', par$oid_sector_mae: ' || var$oid_sector_mae  || ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx)
                                      || ', par$fyh_gestion: ' || var$fyh_gestion ||  ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0
                                      || ', par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => '');

            /* Validar fecha contable */
            IF par$afyh_contable(idx) IS NULL THEN
                var$fyh_contable      := par$afyh_gestion(idx);                            
            ELSE
                var$fyh_contable      := par$afyh_contable(idx);                          
            END IF;

            svalidar_fecha(par$oid_llamada      => par$oid_llamada,
                            par$nel_index        => par$anel_index(idx),
                            par$oid_sector_mae   => var$oid_sector_mae,
                            par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                            par$fyh_gestion      => var$fyh_contable,
                            par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                            par$cod_cultura      => par$cod_cultura);
            
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'svalidar_fecha(par$nel_index: ' || par$anel_index(idx)
                                      || ', par$oid_sector_mae: ' || var$oid_sector_mae  || ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx)
                                      || ', par$fyh_contable: ' || var$fyh_contable ||  ', par$fyh_gestion_gmt0: ' || var$fyh_contable_gmt0
                                      || ', par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => '');

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                    par$des_origen      => const$des_origen,
                                                    par$des_version     => const$version,                            
                                                    par$des_detalle     => q'[Llamada a procedure fvalidar_codigo_externo: 
                                                                              par$anel_index(idx): ]'         || par$anel_index(idx)          || q'[
                                                                              var$des_cod_externo_maercjo: ]' || var$des_cod_externo_maercjo  || q'[
                                                                              par$acod_device_id(idx): ]'     || par$acod_device_id(idx)      || q'[
                                                                              var$fyh_gestion: ]'             || var$fyh_gestion              || q'[
                                                                              par$acod_precinto(idx): ]'      || par$acod_precinto(idx)       || q'[
                                                                              var$oid_sector_mae: ]'          || var$oid_sector_mae           || q'[
                                                                              var$fyh_gestion_gmt0: ]'        || var$fyh_gestion_gmt0         || q'[
                                                                              par$cod_cultura: ]'             || par$cod_cultura,
                                                    par$cod_identificador   => '');

                /* Validar Codigo externo */
            IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maercjo, par$acod_device_id(idx), var$fyh_gestion, par$acod_precinto(idx), var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN

                
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                        par$des_origen      => const$des_origen,
                                                        par$des_version     => const$version,                            
                                                        par$des_detalle     => 'Validación exitosa de código externo',
                                                        par$cod_identificador   => '');

              var$oid_documento := sys_guid();
              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maercjo;
              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maercjo;
              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
              var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
              var$acod_collection_id(var$acod_collection_id.COUNT) := par$acod_collection_id(idx);


              /* Formulario y Codigo Externo */
              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maercjo,
                                                                                            par$cod_device_id       => par$acod_device_id(idx),
                                                                                            par$fyh_gestion         => var$fyh_gestion,
                                                                                            par$cod_precinto        => par$acod_precinto(idx),
                                                                                            par$oid_sector_mae      => var$oid_sector_mae,
                                                                                            par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                            par$nel_sumar_secuencia => NULL);

              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Previo a svalidar_terminos',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
              /* Campos Adcionales */
              IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                  IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                      par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                      par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                      svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                        par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                        par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                        par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                        par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                        par$cod_usuario         => par$cod_usuario,
                                        par$cod_cultura         => par$cod_cultura);
                      
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'svalidar_terminos(par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) || 
                                      ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) || 
                                      ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                      ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) ||
                                      ', par$cod_usuario: ' || par$cod_usuario ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                  END IF;
                END LOOP;
              END IF;

              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Previo a svalidar_valores',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
              /* Valores */
              FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) THEN

                  svalidar_valores( par$oid_llamada               => par$oid_llamada,
                                    par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                    par$nel_index                 => par$anel_index(idx),
                                    par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                    par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                    par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                    par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                    par$saida_oid_divisa          => var$aux_oid_divisa(var$aux_oid_divisa.COUNT),
                                    par$saida_oid_denominacio     => var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT),
                                    par$saida_oid_unid_medida     => var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT),
                                    par$saida_cod_niv_detalle     => var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT),
                                    par$saida_cod_tp_efec_tot     => var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT),
                                    par$saida_oid_calidad         => var$aux_oid_calidad(var$aux_oid_calidad.COUNT),
                                    par$saida_num_importe         => var$aux_num_importe(var$aux_num_importe.COUNT),
                                    par$saida_nel_cantidad        => var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT),
                                    par$cod_cultura               => par$cod_cultura);

                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'svalidar_valores(par$oid_llamada: ' || par$oid_llamada || const$new_line ||
                                      'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line ||
                                      'par$nel_index: ' || par$anel_index(idx) || const$new_line ||
                                      'par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) || const$new_line || 
                                      'par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) || const$new_line ||
                                      'par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) || const$new_line ||
                                      'par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) || const$new_line ||
                                      'par$saida_oid_divisa: ' || var$aux_oid_divisa(var$aux_oid_divisa.COUNT -1) || const$new_line ||
                                      'par$saida_oid_denominacio: ' || var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT -1) || const$new_line ||
                                      'par$saida_oid_unid_medida: ' || var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT -1) || const$new_line ||
                                      'par$saida_cod_niv_detalle: ' || var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT -1) || const$new_line ||
                                      'par$saida_cod_tp_efec_tot: ' || var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT -1) || const$new_line ||
                                      'par$saida_oid_calidad: ' || var$aux_oid_calidad(var$aux_oid_calidad.COUNT -1) || const$new_line ||
                                      'par$saida_num_importe: ' || var$aux_num_importe(var$aux_num_importe.COUNT -1) || const$new_line ||
                                      'par$saida_nel_cantidad: ' || var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT -1) || const$new_line ||
                                      'par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                END IF;

              END LOOP;

              IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Previo a cargar los campos adicionales',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                /* Campos Adcionales */
                IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                  FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                    var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                    var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                    var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);

                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Campos Adcionales - indice: ' || idxt || const$new_line ||
                                                              'var$avtdoc_oid_documento(' || (var$avtdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                              'var$avtdoc_oid_termino(' || (var$avtdoc_oid_termino.COUNT - 1) || '): ' || var$auxt_oid_termino(idxt) || const$new_line ||
                                                              'var$avtdoc_des_valor(' || (var$avtdoc_des_valor.COUNT - 1) || '): ' || var$auxt_des_valor(idxt),
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                  END LOOP;
                END IF;

                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Previo a cargar los valores',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                /* Valores */
                IF var$aux_oid_divisa IS NOT NULL AND var$aux_oid_divisa.COUNT > 0 THEN
                  FOR idxt IN var$aux_oid_divisa.first .. var$aux_oid_divisa.last LOOP

                    var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                    var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$aux_oid_divisa(idxt);
                    var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$aux_oid_denominacion(idxt);
                    var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$aux_oid_unid_medida(idxt);
                    var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$aux_cod_niv_detalle(idxt);
                    var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$aux_cod_tp_efec_tot(idxt);
                    var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$aux_oid_calidad(idxt);
                    var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$aux_num_importe(idxt);
                    var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$aux_nel_cantidad(idxt);

                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Campos Adcionales - indice: ' || idxt || const$new_line ||
                                                              'var$aefdoc_oid_documento(' || (var$aefdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                              'var$aefdoc_oid_divisa(' || (var$aefdoc_oid_divisa.COUNT - 1) || '): ' || var$aefdoc_oid_divisa(idxt) || const$new_line ||
                                                              'var$aefdoc_oid_denominacion(' || (var$aefdoc_oid_denominacion.COUNT - 1) || '): ' || var$aefdoc_oid_denominacion(idxt) || const$new_line ||
                                                              'var$aefdoc_oid_unid_medida(' || (var$aefdoc_oid_unid_medida.COUNT - 1) || '): ' || var$aefdoc_oid_unid_medida(idxt) || const$new_line ||
                                                              'var$aefdoc_cod_niv_detalle(' || (var$aefdoc_cod_niv_detalle.COUNT - 1) || '): ' || var$aefdoc_cod_niv_detalle(idxt) || const$new_line ||
                                                              'var$aefdoc_cod_tp_efec_tot(' || (var$aefdoc_cod_tp_efec_tot.COUNT - 1) || '): ' || var$aefdoc_cod_tp_efec_tot(idxt) || const$new_line ||
                                                              'var$aefdoc_oid_calidad(' || (var$aefdoc_oid_calidad.COUNT - 1) || '): ' || var$aefdoc_oid_calidad(idxt) || const$new_line ||
                                                              'var$aefdoc_num_importe(' || (var$aefdoc_num_importe.COUNT - 1) || '): ' || var$aefdoc_num_importe(idxt) || const$new_line ||
                                                              'var$aefdoc_nel_cantidad(' || (var$aefdoc_nel_cantidad.COUNT - 1) || '): ' || var$aefdoc_nel_cantidad(idxt),
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                  END LOOP;
                END IF;

                /* FIN - CREAR MOVIMIENTO MAERCJO */

                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  /* Grabar documentos */

                  sguardar_documento(par$oid_llamada               => par$oid_llamada,
                                      par$adocs_oid                 => var$adocs_oid,
                                      par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                      par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                      par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                      par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                      par$adocs_cod_actual_id       => var$acod_actual_id,
                                      par$adocs_cod_collection_id   => var$acod_collection_id,
                                      par$adocs_cod_externo         => var$adocs_cod_externo,
                                      par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                      par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                      par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                      par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                      par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                      par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                      par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                      par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                      par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                      par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                      par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                      par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                      par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                      par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                      par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                      par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                      par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                      par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                      par$cod_usuario               => par$cod_usuario,
                                      par$cod_cultura               => par$cod_cultura,
                                      par$cod_ejecucion             => par$cod_ejecucion,
                                      par$nel_index                 => par$anel_index(idx)
                                      );

                  IF par$hacer_commit THEN
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Realiza commit luego de llamar al servicio sguardar_documento para el par$nel_index: ' || par$anel_index(idx),
                                      par$cod_identificador   => '');

                    COMMIT;
                  END IF;

                      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                          VALUES (par$anel_index(idx), '0040120000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040120000', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                                  gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

                END IF;
              END IF;

            END IF;

          END IF;

        EXCEPTION
          WHEN OTHERS THEN
            IF par$hacer_commit THEN
              ROLLBACK;
            END IF;
              var$err := gepr_putilidades_###VERSION###.fformat_error;
              INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                  VALUES (par$anel_index(idx), '3040120001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 'VALIDACIONES');
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'ROOLBACK 1 - 3040120001 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0),
                                      par$cod_identificador   => '');

        END;

    END LOOP;

    /* Validaciones */
    OPEN par$rc_validaciones FOR
          SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
            FROM SAPR_GTT_TAUXILIAR
          WHERE COD_CALIFICADOR = 'VALIDACIONES';

    /* Documentos */
    OPEN par$rc_documentos FOR
          SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
            FROM SAPR_GTT_TAUXILIAR
          WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

    /* Planificacion */
    OPEN par$rc_planificaciones FOR
          SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
            FROM SAPR_GTT_TAUXILIAR
          WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

    gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$des_origen,
                          var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                          null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
    IF par$hacer_commit THEN
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Realiza commit al finalizar procedure sgrabar_mov_recojo',
                                      par$cod_identificador   => '');
      COMMIT;
    END IF;

      /* ===  Tratar excepciones - Rollback === */
  EXCEPTION
    WHEN OTHERS THEN
      IF par$hacer_commit THEN
        ROLLBACK;

      END IF;
      var$err := gepr_putilidades_###VERSION###.fformat_error;

      var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$des_origen,
                    var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                    null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
      
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$des_origen,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'ROOLBACK FINAL - var$err - ' || var$err,
                                        par$cod_identificador   => '');
      RAISE;
  END sgrabar_mov_recojo;

  /* Validar Movimientos Recojo */
  PROCEDURE svalidar_mov_recojo(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    -- Variables de LOG
    const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.svalidar_mov_recojo';

  BEGIN
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'par$oid_llamada: ' || par$oid_llamada || const$new_line 
                        || 'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line
                        || 'par$nel_index: ' || par$nel_index || const$new_line
                        || 'par$cod_device_id: ' || par$cod_device_id || const$new_line
                        || 'par$cod_cliente: ' || par$cod_cliente || const$new_line
                        || 'par$cod_sub_cliente: ' || par$cod_sub_cliente || const$new_line
                        || 'par$cod_punto_servicio: ' || par$cod_punto_servicio || const$new_line
                        || 'par$cod_cultura: ' || par$cod_cultura || const$new_line
                        || 'par$cod_usuario: ' || par$cod_usuario || const$new_line
                        || 'par$cod_pais: ' || par$cod_pais,
                        par$cod_identificador   => '');


    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldoFisico,
                    par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalSaldoFisico,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'SALIDA: ' ||  const$new_line
                        || 'oid_cuenta_cliente: ' || par$oid_cuenta_cliente || const$new_line
                        || 'oid_sector_mae: ' || par$oid_sector_mae,
                        par$cod_identificador   => '');

  END svalidar_mov_recojo;
  
  /* Grabar Movimientos de Bóveda */
  PROCEDURE sgrabar_mov_boveda(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                     par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$anel_index              IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$acod_device_id          IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_cliente            IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_sub_cliente        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$acod_punto_servicio     IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$afyh_gestion            IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$afyh_contable           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                     par$acod_actual_id          IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_collection_id      IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$acod_precinto           IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$anel_gmt_minuto         IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$avtdoc_cod_termino      IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$avtdoc_des_valor        IN gepr_pcomon_###VERSION###.tipo$descs_,
                                     par$aefdoc_nel_index        IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_cod_divisa       IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_cod_denominacion IN gepr_pcomon_###VERSION###.tipo$cods_,
                                     par$aefdoc_nel_cantidad     IN gepr_pcomon_###VERSION###.tipo$nels_,
                                     par$aefdoc_num_importe      IN gepr_pcomon_###VERSION###.tipo$imps_,
                                     par$info_ejecucion          IN gepr_pcomon_###VERSION###.tipo$desc_,
                                     par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                     par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_,
                                     par$hacer_commit            IN gepr_pcomon_###VERSION###.tipo$bol_ := TRUE,
                                     par$rc_validaciones         OUT sys_refcursor,
                                     par$rc_planificaciones      OUT sys_refcursor,
                                     par$rc_documentos           OUT sys_refcursor,
                                     par$cod_ejecucion           OUT gepr_pcomon_###VERSION###.tipo$nel_) IS

    -- Variables de LOG
    const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.sgrabar_mov_boveda';
    var$detalle           VARCHAR2(4000);
    var$detalle_actual    VARCHAR2(4000);

    /* LOG */
    var$inicio    TIMESTAMP := SYSTIMESTAMP;
    var$registros gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$inserts   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$updates   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$deletes   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$merges    gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$selects   gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$err       varchar2(4000);

    /* Variables auxiliares */
    var$oid_documento             gepr_pcomon_###VERSION###.tipo$oid_;
    var$fyh_gestion               gepr_pcomon_###VERSION###.tipo$fyh_;
    var$fyh_gestion_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;
    var$fyh_contable               gepr_pcomon_###VERSION###.tipo$fyh_;
    var$fyh_contable_gmt0          gepr_pcomon_###VERSION###.tipo$fyh_;

    /* Formularios */
    var$oid_formulario_maebove     gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_tipo_documento_maebove gepr_pcomon_###VERSION###.tipo$oid_;
    var$des_cod_externo_maebove    gepr_pcomon_###VERSION###.tipo$cod_;

    /* Cuentas */
    var$oid_cuenta_cliente        gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_sector_mae            gepr_pcomon_###VERSION###.tipo$oid_;

    /* Documentos */
    var$adocs_oid                 gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_formulario      gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_tipo_documento  gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_fyh_gestion         gepr_pcomon_###VERSION###.tipo$fyhs_;
    var$adocs_fyh_contable         gepr_pcomon_###VERSION###.tipo$fyhs_;
    var$adocs_cod_externo         gepr_pcomon_###VERSION###.tipo$cods_;
    var$adocs_oid_cuenta_ori      gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_cuenta_des      gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_cuentasaldo_ori gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_cuentasaldo_des gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_sector_ori      gepr_pcomon_###VERSION###.tipo$oids_;
    var$adocs_oid_sector_des      gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_oid_divisa         gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_oid_denominacion   gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_oid_unid_medida    gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_cod_niv_detalle    gepr_pcomon_###VERSION###.tipo$cods_;
    var$aefdoc_cod_tp_efec_tot    gepr_pcomon_###VERSION###.tipo$cods_;
    var$aefdoc_oid_calidad        gepr_pcomon_###VERSION###.tipo$oids_;
    var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
    var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
    var$avtdoc_oid_documento      gepr_pcomon_###VERSION###.tipo$oids_;
    var$avtdoc_oid_termino        gepr_pcomon_###VERSION###.tipo$oids_;
    var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;
    var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
    var$acod_collection_id        gepr_pcomon_###VERSION###.tipo$descs_;

    /* Variables listas de auxiliares */
    var$aux_oid_divisa        gepr_pcomon_###VERSION###.tipo$oids_;
    var$aux_oid_denominacion  gepr_pcomon_###VERSION###.tipo$oids_;
    var$aux_oid_unid_medida   gepr_pcomon_###VERSION###.tipo$oids_;
    var$aux_cod_niv_detalle   gepr_pcomon_###VERSION###.tipo$cods_;
    var$aux_cod_tp_efec_tot   gepr_pcomon_###VERSION###.tipo$cods_;
    var$aux_oid_calidad       gepr_pcomon_###VERSION###.tipo$oids_;
    var$aux_num_importe       gepr_pcomon_###VERSION###.tipo$imps_;
    var$aux_nel_cantidad      gepr_pcomon_###VERSION###.tipo$nels_;
    var$auxt_oid_termino          gepr_pcomon_###VERSION###.tipo$oids_;
    var$auxt_des_valor            gepr_pcomon_###VERSION###.tipo$descs_;
    var$array_nulo                 gepr_pcomon_###VERSION###.tipo$descs_;

  BEGIN

    /* #### Inicializar los cursores #### */
    OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
    OPEN par$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
    OPEN par$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

    IF par$hacer_commit THEN
      /* Limpiar tabla temporaria */
      DELETE SAPR_GTT_TAUXILIAR;
      COMMIT;
    END IF;
    
    -- INICIO - LOG de parametros iniciales
    IF par$oid_llamada IS NOT NULL THEN
      var$detalle := q'[Parametros iniciales: 
        par$oid_llamada: ]'             || par$oid_llamada                || q'[
        par$cod_identificador_ajeno: ]' || par$cod_identificador_ajeno    || q'[
        par$info_ejecucion: ]'          || par$info_ejecucion             || q'[
        par$cod_usuario: ]'             || par$cod_usuario                || q'[
        par$cod_cultura: ]'             || par$cod_cultura                || q'[
        par$cod_pais: ]'                || par$cod_pais                   || q'[
        par$hacer_commit: ]'            || CASE WHEN par$hacer_commit THEN 'TRUE' ELSE 'FALSE'END;

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
                          
      /* INICIO LOG de arrays asociativos */
      IF par$anel_index IS NOT NULL AND par$anel_index.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$anel_index.first ..  par$anel_index.last LOOP 
            var$detalle_actual := '';
            IF par$anel_index(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$anel_index(' || idx || '):  ' || par$anel_index(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$anel_index(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_device_id IS NOT NULL AND par$acod_device_id.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_device_id.first ..  par$acod_device_id.last LOOP 
            var$detalle_actual := '';
            IF par$acod_device_id(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_device_id(' || idx || '):  ' || par$acod_device_id(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_device_id(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_cliente IS NOT NULL AND par$acod_cliente.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_cliente.first ..  par$acod_cliente.last LOOP 
            var$detalle_actual := '';
            IF par$acod_cliente(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_cliente(' || idx || '):  ' || par$acod_cliente(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_cliente(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_sub_cliente IS NOT NULL AND par$acod_sub_cliente.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_sub_cliente.first ..  par$acod_sub_cliente.last LOOP 
            var$detalle_actual := '';
            IF par$acod_sub_cliente(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_sub_cliente(' || idx || '):  ' || par$acod_sub_cliente(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_sub_cliente(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_punto_servicio IS NOT NULL AND par$acod_punto_servicio.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_punto_servicio.first ..  par$acod_punto_servicio.last LOOP 
            var$detalle_actual := '';
            IF par$acod_punto_servicio(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_punto_servicio(' || idx || '):  ' || par$acod_punto_servicio(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_punto_servicio(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$afyh_gestion IS NOT NULL AND par$afyh_gestion.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$afyh_gestion.first ..  par$afyh_gestion.last LOOP 
            var$detalle_actual := '';
            IF par$afyh_gestion(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$afyh_gestion(' || idx || '):  ' || par$afyh_gestion(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$afyh_gestion(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$afyh_contable IS NOT NULL AND par$afyh_contable.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$afyh_contable.first ..  par$afyh_contable.last LOOP 
            var$detalle_actual := '';
            IF par$afyh_contable(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$afyh_contable(' || idx || '):  ' || par$afyh_contable(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$afyh_contable(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;
        
      IF par$acod_actual_id IS NOT NULL AND par$acod_actual_id.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_actual_id.first ..  par$acod_actual_id.last LOOP 
            var$detalle_actual := '';
            IF par$acod_actual_id(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_actual_id(' || idx || '):  ' || par$acod_actual_id(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_actual_id(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$acod_collection_id IS NOT NULL AND par$acod_collection_id.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$acod_collection_id.first ..  par$acod_collection_id.last LOOP 
            var$detalle_actual := '';
            IF par$acod_collection_id(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$acod_collection_id(' || idx || '):  ' || par$acod_collection_id(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$acod_collection_id(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$anel_gmt_minuto IS NOT NULL AND par$anel_gmt_minuto.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$anel_gmt_minuto.first ..  par$anel_gmt_minuto.last LOOP 
            var$detalle_actual := '';
            IF par$anel_gmt_minuto(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$anel_gmt_minuto(' || idx || '):  ' || par$anel_gmt_minuto(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$anel_gmt_minuto(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$avtdoc_nel_index IS NOT NULL AND par$avtdoc_nel_index.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$avtdoc_nel_index.first ..  par$avtdoc_nel_index.last LOOP 
            var$detalle_actual := '';
            IF par$avtdoc_nel_index(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_nel_index(' || idx || '):  ' || par$avtdoc_nel_index(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_nel_index(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$avtdoc_cod_termino IS NOT NULL AND par$avtdoc_cod_termino.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$avtdoc_cod_termino.first ..  par$avtdoc_cod_termino.last LOOP 
            var$detalle_actual := '';
            IF par$avtdoc_cod_termino(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_cod_termino(' || idx || '):  ' || par$avtdoc_cod_termino(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_cod_termino(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$avtdoc_des_valor IS NOT NULL AND par$avtdoc_des_valor.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$avtdoc_des_valor.first ..  par$avtdoc_des_valor.last LOOP 
            var$detalle_actual := '';
            IF par$avtdoc_des_valor(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_des_valor(' || idx || '):  ' || par$avtdoc_des_valor(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$avtdoc_des_valor(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_nel_index IS NOT NULL AND par$aefdoc_nel_index.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_nel_index.first ..  par$aefdoc_nel_index.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_nel_index(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_index(' || idx || '):  ' || par$aefdoc_nel_index(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_index(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_cod_divisa IS NOT NULL AND par$aefdoc_cod_divisa.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_cod_divisa.first ..  par$aefdoc_cod_divisa.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_cod_divisa(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_divisa(' || idx || '):  ' || par$aefdoc_cod_divisa(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_divisa(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_cod_denominacion IS NOT NULL AND par$aefdoc_cod_denominacion.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_cod_denominacion.first ..  par$aefdoc_cod_denominacion.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_cod_denominacion(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_denominacion(' || idx || '):  ' || par$aefdoc_cod_denominacion(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_cod_denominacion(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_nel_cantidad IS NOT NULL AND par$aefdoc_nel_cantidad.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_nel_cantidad.first ..  par$aefdoc_nel_cantidad.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_nel_cantidad(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_cantidad(' || idx || '):  ' || par$aefdoc_nel_cantidad(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_nel_cantidad(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;

      IF par$aefdoc_num_importe IS NOT NULL AND par$aefdoc_num_importe.COUNT > 0 THEN
        var$detalle := '';
        FOR idx IN  par$aefdoc_num_importe.first ..  par$aefdoc_num_importe.last LOOP 
            var$detalle_actual := '';
            IF par$aefdoc_num_importe(idx) IS NOT NULL THEN
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_num_importe(' || idx || '):  ' || par$aefdoc_num_importe(idx) || ' ';
            ELSE
              var$detalle_actual := 'Parametros iniciales: par$aefdoc_num_importe(' || idx || '):  NULL ';
            END IF;
            IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
              var$detalle := var$detalle_actual;
            ELSE
              var$detalle := var$detalle || const$new_line || var$detalle_actual;
            END IF;
        END LOOP;
        IF var$detalle IS NOT NULL THEN
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
                          par$des_origen      => const$des_origen,
                          par$des_version     => const$version,                            
                          par$des_detalle     => var$detalle,
                          par$cod_identificador   => '');
        END IF;
      END IF;
    END IF;
    -- FIN - LOG de parametros iniciales

    /* Recuperar Formularios - MAEBOVE */
    srecuperar_formularios(par$cod_formulario     => 'MAEBOVE',
                            par$oid_formulario     => var$oid_formulario_maebove,
                            par$oid_tipo_documento => var$oid_tipo_documento_maebove,
                            par$des_cod_externo    => var$des_cod_externo_maebove);

    var$detalle := '';
    var$detalle := var$detalle || 'srecuperar_formularios(par$cod_formulario     =>' || const$comilla_simple|| 'MAEBOVE' || const$comilla_simple || ', ' || const$new_line;
    var$detalle := var$detalle || 'par$oid_formulario: ' || var$oid_formulario_maebove || const$new_line;
    var$detalle := var$detalle || 'par$oid_tipo_documento: ' || var$oid_tipo_documento_maebove || const$new_line;
    var$detalle := var$detalle || 'par$des_cod_externo: ' || var$des_cod_externo_maebove || const$new_line;

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                      par$des_origen      => const$des_origen,
                      par$des_version     => const$version,                            
                      par$des_detalle     => var$detalle,
                      par$cod_identificador   => '');

      
    FOR idx IN par$anel_index.first .. par$anel_index.last LOOP

        BEGIN
          /* Limpiar tabla temporaria */
          DELETE SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR NOT IN ('VALIDACIONES', 'CODIGO_EXTERNO', 'PLANIFICACIONES', 'TIPO_PERIODO_AC', 'TIPO_PERIODO_RE', 'TIPO_PERIODO_BO', 'VALIDACIONES_FECHA_CONFIRMAR');
          
          var$adocs_oid.delete;
          var$adocs_oid_formulario.delete;
          var$adocs_fyh_gestion.delete;
          var$adocs_fyh_contable.delete;
          var$acod_actual_id.delete;
          var$adocs_cod_externo.delete;
          var$adocs_oid_cuenta_ori.delete;
          var$adocs_oid_cuenta_des.delete;
          var$adocs_oid_cuentasaldo_ori.delete;
          var$adocs_oid_cuentasaldo_des.delete;
          var$adocs_oid_sector_ori.delete;
          var$adocs_oid_sector_des.delete;
          var$aefdoc_oid_documento.delete;
          var$aefdoc_oid_divisa.delete;
          var$aefdoc_oid_denominacion.delete;
          var$aefdoc_oid_unid_medida.delete;
          var$aefdoc_cod_niv_detalle.delete;
          var$aefdoc_cod_tp_efec_tot.delete;
          var$aefdoc_oid_calidad.delete;
          var$aefdoc_num_importe.delete;
          var$aefdoc_nel_cantidad.delete;
          var$avtdoc_oid_documento.delete;
          var$avtdoc_oid_termino.delete;
          var$avtdoc_des_valor.delete;
          var$aux_oid_divisa.delete;
          var$aux_oid_denominacion.delete;
          var$aux_oid_unid_medida.delete;
          var$aux_cod_niv_detalle.delete;
          var$aux_cod_tp_efec_tot.delete;
          var$aux_oid_calidad.delete;
          var$aux_num_importe.delete;
          var$aux_nel_cantidad.delete;
          var$auxt_oid_termino.delete;
          var$auxt_des_valor.delete;


          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$des_origen,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Por ingresar en svalidar_mov_boveda()',
                              par$cod_identificador   => '');

          /* Procedure responsable por validaciones del documento */
          svalidar_mov_boveda(par$oid_llamada => par$oid_llamada,
                                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                                    par$nel_index               => par$anel_index(idx),
                                    par$cod_device_id           => par$acod_device_id(idx),
                                    par$cod_cliente             => par$acod_cliente(idx),
                                    par$cod_sub_cliente         => par$acod_sub_cliente(idx),
                                    par$cod_punto_servicio      => par$acod_punto_servicio(idx),
                                    par$oid_cuenta_cliente      => var$oid_cuenta_cliente,
                                    par$oid_sector_mae          => var$oid_sector_mae,
                                    par$cod_cultura             => par$cod_cultura,
                                    par$cod_usuario             => par$cod_usuario,
                                    par$cod_pais                => par$cod_pais);
          

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$des_origen,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Por ingresar en svalidar_actual_id()',
                              par$cod_identificador   => '');
          svalidar_actual_id(
            par$oid_llamada  => par$oid_llamada,
            par$nel_index    => par$anel_index(idx),
            par$fyh_gestion  => par$afyh_gestion(idx),
            par$cod_actual_id=> par$acod_actual_id(idx),
            par$cod_cultura  => par$cod_cultura);

          /* CREAR MOVIMIENTO MAEBOVE */
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$des_origen,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'INICIO grabar movimiento MAEBOVE',
                              par$cod_identificador   => '');
          IF var$oid_formulario_maebove IS NULL AND var$oid_tipo_documento_maebove IS NULL AND var$des_cod_externo_maebove IS NULL THEN
              INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                  VALUES (par$anel_index(idx), '2040120004', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEBOVE', 0), 'VALIDACIONES');
              
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$des_origen,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'var$oid_formulario_maebove IS NULL AND var$oid_tipo_documento_maebove IS NULL AND var$des_cod_externo_maebove' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040120004', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion, gepr_pcomon_###VERSION###.const$codAplicacionGenesis, 'MAEBOVE', 0),
                              par$cod_identificador   => '');
          END IF;
        
          IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'NOT fhay_error(par$nel_index => par$anel_index(idx))',
                                      par$cod_identificador   => '');
            /* Validar fecha gestion */
            var$fyh_gestion      := par$afyh_gestion(idx);
            svalidar_fecha(par$oid_llamada      => par$oid_llamada,
                            par$nel_index        => par$anel_index(idx),
                            par$oid_sector_mae   => var$oid_sector_mae,
                            par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                            par$fyh_gestion      => var$fyh_gestion,
                            par$fyh_gestion_gmt0 => var$fyh_gestion_gmt0,
                            par$cod_cultura      => par$cod_cultura);

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'svalidar_fecha(par$nel_index: ' || par$anel_index(idx)
                                      || ', par$oid_sector_mae: ' || var$oid_sector_mae  || ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx)
                                      || ', par$fyh_gestion: ' || var$fyh_gestion ||  ', par$fyh_gestion_gmt0: ' || var$fyh_gestion_gmt0
                                      || ', par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => '');

            /* Validar fecha contable */
            IF par$afyh_contable(idx) IS NULL THEN
                var$fyh_contable      := par$afyh_gestion(idx);                            
            ELSE
                var$fyh_contable      := par$afyh_contable(idx);                          
            END IF;

            svalidar_fecha(par$oid_llamada      => par$oid_llamada,
                            par$nel_index        => par$anel_index(idx),
                            par$oid_sector_mae   => var$oid_sector_mae,
                            par$nel_gmt_minuto   => par$anel_gmt_minuto(idx),
                            par$fyh_gestion      => var$fyh_contable,
                            par$fyh_gestion_gmt0 => var$fyh_contable_gmt0,
                            par$cod_cultura      => par$cod_cultura);
            
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'svalidar_fecha(par$nel_index: ' || par$anel_index(idx)
                                      || ', par$oid_sector_mae: ' || var$oid_sector_mae  || ', par$nel_gmt_minuto: ' || par$anel_gmt_minuto(idx)
                                      || ', par$fyh_contable: ' || var$fyh_contable ||  ', par$fyh_gestion_gmt0: ' || var$fyh_contable_gmt0
                                      || ', par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => '');


            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                    par$des_origen      => const$des_origen,
                                                    par$des_version     => const$version,                            
                                                    par$des_detalle     => q'[Llamada a procedure fvalidar_codigo_externo: 
                                                                              par$anel_index(idx): ]'         || par$anel_index(idx)          || q'[
                                                                              var$des_cod_externo_maebove: ]' || var$des_cod_externo_maebove  || q'[
                                                                              par$acod_device_id(idx): ]'     || par$acod_device_id(idx)      || q'[
                                                                              var$fyh_gestion: ]'             || var$fyh_gestion              || q'[
                                                                              par$acod_precinto(idx): ]'      || par$acod_precinto(idx)       || q'[
                                                                              var$oid_sector_mae: ]'          || var$oid_sector_mae           || q'[
                                                                              var$fyh_gestion_gmt0: ]'        || var$fyh_gestion_gmt0         || q'[
                                                                              par$cod_cultura: ]'             || par$cod_cultura,
                                                    par$cod_identificador   => '');

            /* Validar Codigo externo */
            IF fvalidar_codigo_externo(par$anel_index(idx), var$des_cod_externo_maebove, par$acod_device_id(idx), var$fyh_gestion, par$acod_precinto(idx), var$oid_sector_mae, var$fyh_gestion_gmt0, par$cod_cultura) = 0 THEN

                
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                      par$des_origen      => const$des_origen,
                                                      par$des_version     => const$version,                            
                                                      par$des_detalle     => 'Validación exitosa de código externo',
                                                      par$cod_identificador   => '');

              var$oid_documento := sys_guid();
              var$adocs_oid(var$adocs_oid.COUNT) := var$oid_documento;
              var$adocs_oid_formulario(var$adocs_oid_formulario.COUNT) := var$oid_formulario_maebove;
              var$adocs_oid_tipo_documento(var$adocs_oid_tipo_documento.COUNT) := var$oid_tipo_documento_maebove;
              var$adocs_fyh_gestion(var$adocs_fyh_gestion.COUNT) := var$fyh_gestion_gmt0;
              var$adocs_fyh_contable(var$adocs_fyh_contable.COUNT) := var$fyh_contable_gmt0;
              var$adocs_oid_cuenta_ori(var$adocs_oid_cuenta_ori.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_cuenta_des(var$adocs_oid_cuenta_des.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_cuentasaldo_ori(var$adocs_oid_cuentasaldo_ori.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_cuentasaldo_des(var$adocs_oid_cuentasaldo_des.COUNT) := var$oid_cuenta_cliente;
              var$adocs_oid_sector_ori(var$adocs_oid_sector_ori.COUNT) := var$oid_sector_mae;
              var$adocs_oid_sector_des(var$adocs_oid_sector_des.COUNT) := var$oid_sector_mae;
              var$acod_actual_id(var$acod_actual_id.COUNT) := par$acod_actual_id(idx);
              var$acod_collection_id(var$acod_collection_id.COUNT) := par$acod_collection_id(idx);


              /* Formulario y Codigo Externo */
              var$adocs_cod_externo(var$adocs_cod_externo.COUNT) := fcargar_codigo_externo(par$des_cod_externo     => var$des_cod_externo_maebove,
                                                                                            par$cod_device_id       => par$acod_device_id(idx),
                                                                                            par$fyh_gestion         => var$fyh_gestion,
                                                                                            par$cod_precinto        => par$acod_precinto(idx),
                                                                                            par$oid_sector_mae      => var$oid_sector_mae,
                                                                                            par$fyh_gestion_gmt0    => var$fyh_gestion_gmt0,
                                                                                            par$nel_sumar_secuencia => NULL);

              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Previo a svalidar_terminos',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
              /* Campos Adcionales */
              IF  par$avtdoc_nel_index IS NOT NULL AND  par$avtdoc_nel_index.COUNT > 0 THEN
                FOR idxt IN par$avtdoc_nel_index.first .. par$avtdoc_nel_index.last LOOP
                  IF par$avtdoc_nel_index(idxt) = par$anel_index(idx) AND 
                      par$avtdoc_cod_termino(idxt) IS NOT NULL AND
                      par$avtdoc_des_valor(idxt) IS NOT NULL THEN
                      svalidar_terminos(par$nel_index           => par$anel_index(idx),
                                        par$entrada_cod_termino => par$avtdoc_cod_termino(idxt),
                                        par$entrada_des_valor   => par$avtdoc_des_valor(idxt),
                                        par$saida_oid_termino   => var$auxt_oid_termino(var$auxt_oid_termino.COUNT),
                                        par$saida_des_valor     => var$auxt_des_valor(var$auxt_des_valor.COUNT),
                                        par$cod_usuario         => par$cod_usuario,
                                        par$cod_cultura         => par$cod_cultura);
                      
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'svalidar_terminos(par$nel_index: ' || par$anel_index(idx) ||
                                      ', par$entrada_cod_termino: ' || par$avtdoc_cod_termino(idxt) || 
                                      ', par$entrada_des_valor: ' || par$avtdoc_des_valor(idxt) || 
                                      ', par$saida_oid_termino: ' || var$auxt_oid_termino(var$auxt_oid_termino.COUNT - 1) ||
                                      ', par$saida_des_valor: ' || var$auxt_des_valor(var$auxt_des_valor.COUNT - 1) ||
                                      ', par$cod_usuario: ' || par$cod_usuario ||
                                      ', par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                  END IF;
                END LOOP;
              END IF;

              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Previo a svalidar_valores',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
              /* Valores */
              FOR idxt IN par$aefdoc_nel_index.first .. par$aefdoc_nel_index.last LOOP

                IF par$aefdoc_nel_index(idxt) = par$anel_index(idx) THEN

                  svalidar_valores( par$oid_llamada               => par$oid_llamada,
                                    par$cod_identificador_ajeno   => par$cod_identificador_ajeno,
                                    par$nel_index                 => par$anel_index(idx),
                                    par$entrada_cod_divisa        => par$aefdoc_cod_divisa(idxt),
                                    par$entrada_cod_denominacion  => par$aefdoc_cod_denominacion(idxt),
                                    par$entrada_nel_cantidad      => par$aefdoc_nel_cantidad(idxt),
                                    par$entrada_num_importe       => par$aefdoc_num_importe(idxt),
                                    par$saida_oid_divisa          => var$aux_oid_divisa(var$aux_oid_divisa.COUNT),
                                    par$saida_oid_denominacio     => var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT),
                                    par$saida_oid_unid_medida     => var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT),
                                    par$saida_cod_niv_detalle     => var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT),
                                    par$saida_cod_tp_efec_tot     => var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT),
                                    par$saida_oid_calidad         => var$aux_oid_calidad(var$aux_oid_calidad.COUNT),
                                    par$saida_num_importe         => var$aux_num_importe(var$aux_num_importe.COUNT),
                                    par$saida_nel_cantidad        => var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT),
                                    par$cod_cultura               => par$cod_cultura);

                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'svalidar_valores(par$oid_llamada: ' || par$oid_llamada || const$new_line ||
                                      'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line ||
                                      'par$nel_index: ' || par$anel_index(idx) || const$new_line ||
                                      'par$entrada_cod_divisa: ' || par$aefdoc_cod_divisa(idxt) || const$new_line || 
                                      'par$entrada_cod_denominacion: ' || par$aefdoc_cod_denominacion(idxt) || const$new_line ||
                                      'par$entrada_nel_cantidad: ' || par$aefdoc_nel_cantidad(idxt) || const$new_line ||
                                      'par$entrada_num_importe: ' || par$aefdoc_num_importe(idxt) || const$new_line ||
                                      'par$saida_oid_divisa: ' || var$aux_oid_divisa(var$aux_oid_divisa.COUNT -1) || const$new_line ||
                                      'par$saida_oid_denominacio: ' || var$aux_oid_denominacion(var$aux_oid_denominacion.COUNT -1) || const$new_line ||
                                      'par$saida_oid_unid_medida: ' || var$aux_oid_unid_medida(var$aux_oid_unid_medida.COUNT -1) || const$new_line ||
                                      'par$saida_cod_niv_detalle: ' || var$aux_cod_niv_detalle(var$aux_cod_niv_detalle.COUNT -1) || const$new_line ||
                                      'par$saida_cod_tp_efec_tot: ' || var$aux_cod_tp_efec_tot(var$aux_cod_tp_efec_tot.COUNT -1) || const$new_line ||
                                      'par$saida_oid_calidad: ' || var$aux_oid_calidad(var$aux_oid_calidad.COUNT -1) || const$new_line ||
                                      'par$saida_num_importe: ' || var$aux_num_importe(var$aux_num_importe.COUNT -1) || const$new_line ||
                                      'par$saida_nel_cantidad: ' || var$aux_nel_cantidad(var$aux_nel_cantidad.COUNT -1) || const$new_line ||
                                      'par$cod_cultura: ' || par$cod_cultura,
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                END IF;

              END LOOP;

              IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Previo a cargar los campos adicionales',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));
                /* Campos Adcionales */
                IF var$auxt_oid_termino IS NOT NULL AND var$auxt_oid_termino.COUNT > 0 THEN
                  FOR idxt IN var$auxt_oid_termino.first .. var$auxt_oid_termino.last LOOP
                    var$avtdoc_oid_documento(var$avtdoc_oid_documento.COUNT) := var$oid_documento;
                    var$avtdoc_oid_termino(var$avtdoc_oid_termino.COUNT) := var$auxt_oid_termino(idxt);
                    var$avtdoc_des_valor(var$avtdoc_des_valor.COUNT) := var$auxt_des_valor(idxt);

                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Campos Adcionales - indice: ' || idxt || const$new_line ||
                                                              'var$avtdoc_oid_documento(' || (var$avtdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                              'var$avtdoc_oid_termino(' || (var$avtdoc_oid_termino.COUNT - 1) || '): ' || var$auxt_oid_termino(idxt) || const$new_line ||
                                                              'var$avtdoc_des_valor(' || (var$avtdoc_des_valor.COUNT - 1) || '): ' || var$auxt_des_valor(idxt),
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                  END LOOP;
                END IF;

                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Previo a cargar los valores',
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                /* Valores */
                IF var$aux_oid_divisa IS NOT NULL AND var$aux_oid_divisa.COUNT > 0 THEN
                  FOR idxt IN var$aux_oid_divisa.first .. var$aux_oid_divisa.last LOOP

                    var$aefdoc_oid_documento(var$aefdoc_oid_documento.COUNT) := var$oid_documento;
                    var$aefdoc_oid_divisa(var$aefdoc_oid_divisa.COUNT) := var$aux_oid_divisa(idxt);
                    var$aefdoc_oid_denominacion(var$aefdoc_oid_denominacion.COUNT) := var$aux_oid_denominacion(idxt);
                    var$aefdoc_oid_unid_medida(var$aefdoc_oid_unid_medida.COUNT) := var$aux_oid_unid_medida(idxt);
                    var$aefdoc_cod_niv_detalle(var$aefdoc_cod_niv_detalle.COUNT) := var$aux_cod_niv_detalle(idxt);
                    var$aefdoc_cod_tp_efec_tot(var$aefdoc_cod_tp_efec_tot.COUNT) := var$aux_cod_tp_efec_tot(idxt);
                    var$aefdoc_oid_calidad(var$aefdoc_oid_calidad.COUNT) := var$aux_oid_calidad(idxt);
                    var$aefdoc_num_importe(var$aefdoc_num_importe.COUNT) := var$aux_num_importe(idxt);
                    var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.COUNT) := var$aux_nel_cantidad(idxt);

                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Campos Adcionales - indice: ' || idxt || const$new_line ||
                                                              'var$aefdoc_oid_documento(' || (var$aefdoc_oid_documento.COUNT - 1) || '): ' || var$oid_documento || const$new_line ||
                                                              'var$aefdoc_oid_divisa(' || (var$aefdoc_oid_divisa.COUNT - 1) || '): ' || var$aefdoc_oid_divisa(idxt) || const$new_line ||
                                                              'var$aefdoc_oid_denominacion(' || (var$aefdoc_oid_denominacion.COUNT - 1) || '): ' || var$aefdoc_oid_denominacion(idxt) || const$new_line ||
                                                              'var$aefdoc_oid_unid_medida(' || (var$aefdoc_oid_unid_medida.COUNT - 1) || '): ' || var$aefdoc_oid_unid_medida(idxt) || const$new_line ||
                                                              'var$aefdoc_cod_niv_detalle(' || (var$aefdoc_cod_niv_detalle.COUNT - 1) || '): ' || var$aefdoc_cod_niv_detalle(idxt) || const$new_line ||
                                                              'var$aefdoc_cod_tp_efec_tot(' || (var$aefdoc_cod_tp_efec_tot.COUNT - 1) || '): ' || var$aefdoc_cod_tp_efec_tot(idxt) || const$new_line ||
                                                              'var$aefdoc_oid_calidad(' || (var$aefdoc_oid_calidad.COUNT - 1) || '): ' || var$aefdoc_oid_calidad(idxt) || const$new_line ||
                                                              'var$aefdoc_num_importe(' || (var$aefdoc_num_importe.COUNT - 1) || '): ' || var$aefdoc_num_importe(idxt) || const$new_line ||
                                                              'var$aefdoc_nel_cantidad(' || (var$aefdoc_nel_cantidad.COUNT - 1) || '): ' || var$aefdoc_nel_cantidad(idxt),
                                      par$cod_identificador   => var$adocs_cod_externo(var$adocs_cod_externo.COUNT - 1));

                  END LOOP;
                END IF;

                /* FIN - CREAR MOVIMIENTO MAEBOVE */

                IF NOT fhay_error(par$nel_index => par$anel_index(idx)) THEN
                  /* Grabar documentos */

                  sguardar_documento(par$oid_llamada               => par$oid_llamada,
                                      par$adocs_oid                 => var$adocs_oid,
                                      par$adocs_oid_formulario      => var$adocs_oid_formulario,
                                      par$adocs_oid_tipo_documento  => var$adocs_oid_tipo_documento,
                                      par$adocs_fyh_gestion         => var$adocs_fyh_gestion,
                                      par$adocs_fyh_contable        => var$adocs_fyh_contable,
                                      par$adocs_cod_actual_id       => var$acod_actual_id,
                                      par$adocs_cod_collection_id   => var$acod_collection_id,
                                      par$adocs_cod_externo         => var$adocs_cod_externo,
                                      par$adocs_oid_cuenta_ori      => var$adocs_oid_cuenta_ori,
                                      par$adocs_oid_cuenta_des      => var$adocs_oid_cuenta_des,
                                      par$adocs_oid_cuentasaldo_ori => var$adocs_oid_cuentasaldo_ori,
                                      par$adocs_oid_cuentasaldo_des => var$adocs_oid_cuentasaldo_des,
                                      par$adocs_oid_sector_ori      => var$adocs_oid_sector_ori,
                                      par$adocs_oid_sector_des      => var$adocs_oid_sector_des,
                                      par$aefdoc_oid_documento      => var$aefdoc_oid_documento,
                                      par$aefdoc_oid_divisa         => var$aefdoc_oid_divisa,
                                      par$aefdoc_oid_denominacion   => var$aefdoc_oid_denominacion,
                                      par$aefdoc_oid_unid_medida    => var$aefdoc_oid_unid_medida,
                                      par$aefdoc_cod_niv_detalle    => var$aefdoc_cod_niv_detalle,
                                      par$aefdoc_cod_tp_efec_tot    => var$aefdoc_cod_tp_efec_tot,
                                      par$aefdoc_oid_calidad        => var$aefdoc_oid_calidad,
                                      par$aefdoc_num_importe        => var$aefdoc_num_importe,
                                      par$aefdoc_nel_cantidad       => var$aefdoc_nel_cantidad,
                                      par$avtdoc_oid_documento      => var$avtdoc_oid_documento,
                                      par$avtdoc_oid_termino        => var$avtdoc_oid_termino,
                                      par$avtdoc_des_valor          => var$avtdoc_des_valor,
                                      par$cod_usuario               => par$cod_usuario,
                                      par$cod_cultura               => par$cod_cultura,
                                      par$cod_ejecucion             => par$cod_ejecucion,
                                      par$nel_index                 => par$anel_index(idx)
                                      );

                  IF par$hacer_commit THEN
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Realiza commit luego de llamar al servicio sguardar_documento para el par$nel_index: ' || par$anel_index(idx),
                                      par$cod_identificador   => '');

                    COMMIT;
                  END IF;

                      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                          VALUES (par$anel_index(idx), '0040120000', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '0040120000', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                                  gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

                END IF;
              END IF;

            END IF;

          END IF;

        EXCEPTION
          WHEN OTHERS THEN
            IF par$hacer_commit THEN
              ROLLBACK;
            END IF;
              var$err := gepr_putilidades_###VERSION###.fformat_error;
              INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
                  VALUES (par$anel_index(idx), '3040120001', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0), 'VALIDACIONES');
              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'ROOLBACK 1 - 3040120001 - ' || gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '3040120001', gepr_pcomon_###VERSION###.const$CodFunMoviAcreditacion,
                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis, var$err, 0),
                                      par$cod_identificador   => '');

        END;

    END LOOP;

    /* Validaciones */
    OPEN par$rc_validaciones FOR
          SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO, COD_CAMPO3 AS DESCRIPCION
            FROM SAPR_GTT_TAUXILIAR
          WHERE COD_CALIFICADOR = 'VALIDACIONES';

    /* Documentos */
    OPEN par$rc_documentos FOR
          SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_EXTERNO
            FROM SAPR_GTT_TAUXILIAR
          WHERE COD_CALIFICADOR = 'CODIGO_EXTERNO';

    /* Planificacion */
    OPEN par$rc_planificaciones FOR
          SELECT OID_CAMPO1 AS NEL_INDEX, COD_CAMPO2 AS CODIGO_BANCO, COD_CAMPO3 AS CODIGO_PLANIFICACION
            FROM SAPR_GTT_TAUXILIAR
          WHERE COD_CALIFICADOR = 'PLANIFICACIONES';

    gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$des_origen,
                          var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                          null, 'C', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
    IF par$hacer_commit THEN
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Realiza commit al finalizar procedure sgrabar_mov_recojo',
                                      par$cod_identificador   => '');
      COMMIT;
    END IF;

      /* ===  Tratar excepciones - Rollback === */
  EXCEPTION
    WHEN OTHERS THEN
      IF par$hacer_commit THEN
        ROLLBACK;

      END IF;
      var$err := gepr_putilidades_###VERSION###.fformat_error;

      var$registros := var$inserts + var$updates + var$deletes + var$merges + var$selects;
      gepr_putilidades_###VERSION###.sins_tlog_ejecucion_trn_in(const$des_origen,
                    var$inserts, var$updates, var$deletes, var$merges, var$selects, var$registros, var$inicio,
                    null, 'R', par$info_ejecucion, var$err, par$cod_usuario, par$cod_ejecucion);
      
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$des_origen,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'ROOLBACK FINAL - var$err - ' || var$err,
                                        par$cod_identificador   => '');
      RAISE;
  END sgrabar_mov_boveda;

  /* Validar Movimientos Bóveda */
  PROCEDURE svalidar_mov_boveda(par$oid_llamada             IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_identificador_ajeno IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$nel_index               IN gepr_pcomon_###VERSION###.tipo$nel_,
                                par$cod_device_id           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_cliente             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_sub_cliente         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_punto_servicio      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$oid_cuenta_cliente      OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$oid_sector_mae          OUT gepr_pcomon_###VERSION###.tipo$oid_,
                                par$cod_cultura             IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_usuario             IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_pais                IN gepr_pcomon_###VERSION###.tipo$cod_) IS

    -- Variables de LOG
    const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.svalidar_mov_boveda';

  BEGIN


    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'par$oid_llamada: ' || par$oid_llamada || const$new_line 
                        || 'par$cod_identificador_ajeno: ' || par$cod_identificador_ajeno || const$new_line
                        || 'par$nel_index: ' || par$nel_index || const$new_line
                        || 'par$cod_device_id: ' || par$cod_device_id || const$new_line
                        || 'par$cod_cliente: ' || par$cod_cliente || const$new_line
                        || 'par$cod_sub_cliente: ' || par$cod_sub_cliente || const$new_line
                        || 'par$cod_punto_servicio: ' || par$cod_punto_servicio || const$new_line
                        || 'par$cod_cultura: ' || par$cod_cultura || const$new_line
                        || 'par$cod_usuario: ' || par$cod_usuario || const$new_line
                        || 'par$cod_pais: ' || par$cod_pais,
                        par$cod_identificador   => '');


    /* Validar Cuenta Cliente */
    svalidar_cuenta(par$oid_llamada             => par$oid_llamada,
                    par$cod_identificador_ajeno => par$cod_identificador_ajeno,
                    par$nel_index               => par$nel_index,
                    par$cod_cliente             => par$cod_cliente,
                    par$cod_sub_cliente         => par$cod_sub_cliente,
                    par$cod_punto_servicio      => par$cod_punto_servicio,
                    par$cod_canal               => gepr_pcomon_###VERSION###.const$CodCanalSaldoFisico,
                    par$cod_sub_canal           => gepr_pcomon_###VERSION###.const$CodSubCanalSaldoFisico,
                    par$cod_device_id           => par$cod_device_id,
                    par$cod_cultura             => par$cod_cultura,
                    par$cod_usuario             => par$cod_usuario,
                    par$bol_esmaquina           => 1,
                    par$bol_validar_punto       => 1,
                    par$cod_pais                => par$cod_pais,
                    par$oid_cuenta              => par$oid_cuenta_cliente,
                    par$oid_sector              => par$oid_sector_mae);

    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'SALIDA: ' ||  const$new_line
                        || 'oid_cuenta_cliente: ' || par$oid_cuenta_cliente || const$new_line
                        || 'oid_sector_mae: ' || par$oid_sector_mae,
                        par$cod_identificador   => '');

  END svalidar_mov_boveda;

  /* Validar codigo externo */
  FUNCTION fvalidar_codigo_externo(par$nel_index        IN gepr_pcomon_###VERSION###.tipo$nel_,
                                   par$des_cod_externo  IN gepr_pcomon_###VERSION###.tipo$cod_,
                                   par$cod_device_id    IN gepr_pcomon_###VERSION###.tipo$cod_,
                                   par$fyh_gestion      IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                   par$cod_precinto     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                   par$oid_sector_mae   IN gepr_pcomon_###VERSION###.tipo$oid_,
                                   par$fyh_gestion_gmt0 IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                   par$cod_cultura      IN gepr_pcomon_###VERSION###.tipo$cod_)
    RETURN gepr_pcomon_###VERSION###.tipo$nel_ IS

    var$cod_externo gepr_pcomon_###VERSION###.tipo$cod_ := '';
    var$existe      gepr_pcomon_###VERSION###.tipo$nel_ := 0;
  BEGIN

    var$cod_externo := TO_CHAR(par$fyh_gestion, 'YYYYMMDDHH24MISS');

    IF par$cod_device_id IS NOT NULL THEN
      var$cod_externo := var$cod_externo || '_' || SUBSTR(par$cod_device_id,6);
    END IF;

    var$cod_externo := var$cod_externo || '_' || par$des_cod_externo;

    IF par$cod_precinto IS NOT NULL THEN
      var$cod_externo := var$cod_externo || '_' || par$cod_precinto;
    END IF;
    DBMS_OUTPUT.PUT_LINE('fvalidar_codigo_externo - var$cod_externo: ' || var$cod_externo);
    BEGIN
      SELECT COUNT(1)
        INTO var$existe
        FROM SAPR_TDOCUMENTO DOCU
       WHERE DOCU.OID_SECTOR_ORIGEN = par$oid_sector_mae
         AND DOCU.FYH_GESTION = par$fyh_gestion_gmt0
         AND DOCU.COD_EXTERNO LIKE var$cod_externo || '%'
         AND DOCU.COD_EXTERNO NOT LIKE '%DELETED';

    EXCEPTION WHEN no_data_found THEN
      var$existe := 0;
    END;

    IF var$existe > 0 THEN
      /* 2040010023 - Ya existe en la base de datos un movimiento (código externo) con los mismos datos informados (DeviceID y Fecha/Hora). */
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CALIFICADOR)
          VALUES (par$nel_index, '2040010023', gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura, '2040010023', gepr_pcomon_###VERSION###.const$CodFunGenerico,
                  gepr_pcomon_###VERSION###.const$codAplicacionGenesis, NULL, 0), 'VALIDACIONES');

    END IF;

    RETURN var$existe;

  END fvalidar_codigo_externo;

  /* Cargar codigo externo */
  FUNCTION fcargar_codigo_externo(par$des_cod_externo     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_device_id       IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$fyh_gestion         IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                  par$cod_precinto        IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$oid_sector_mae      IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$fyh_gestion_gmt0    IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                  par$nel_sumar_secuencia IN gepr_pcomon_###VERSION###.tipo$nel_)
    RETURN gepr_pcomon_###VERSION###.tipo$cod_ IS

    var$cod_externo   gepr_pcomon_###VERSION###.tipo$cod_ := '';
    var$nel_secuencia gepr_pcomon_###VERSION###.tipo$nel_ := 1;
  BEGIN

    var$cod_externo := TO_CHAR(par$fyh_gestion, 'YYYYMMDDHH24MISS');

    IF par$cod_device_id IS NOT NULL THEN
      var$cod_externo := var$cod_externo || '_' || SUBSTR(par$cod_device_id,6);
    END IF;

    var$cod_externo := var$cod_externo || '_' || par$des_cod_externo;

    IF par$cod_precinto IS NOT NULL THEN
      var$cod_externo := var$cod_externo || '_' || par$cod_precinto;
    END IF;

    BEGIN
      SELECT MAX(CASE WHEN LENGTH(TRIM(TRANSLATE(SUBSTR(DOCU.COD_EXTERNO, INSTR(DOCU.COD_EXTERNO, '_', -1) + 1), '0123456789',' '))) IS NULL THEN
                SUBSTR(DOCU.COD_EXTERNO, INSTR(DOCU.COD_EXTERNO, '_', -1) + 1) + 1
              ELSE
                1
              END) SECUENCIA_PROXIMA
        INTO var$nel_secuencia
        FROM SAPR_TDOCUMENTO DOCU
       WHERE DOCU.OID_SECTOR_ORIGEN = par$oid_sector_mae
         AND DOCU.FYH_GESTION = par$fyh_gestion_gmt0
         AND DOCU.COD_EXTERNO LIKE var$cod_externo || '_%'
         AND DOCU.COD_EXTERNO NOT LIKE '%DELETED';

        IF var$nel_secuencia IS NULL OR var$nel_secuencia = 0 THEN
          var$nel_secuencia := 1;
        END IF;

    EXCEPTION WHEN no_data_found THEN
      var$nel_secuencia := 1;
    END;

    IF par$nel_sumar_secuencia IS NOT NULL THEN
      var$nel_secuencia := var$nel_secuencia + par$nel_sumar_secuencia;
    END IF;
    DBMS_OUTPUT.PUT_LINE(var$cod_externo || '_' || var$nel_secuencia);
    RETURN var$cod_externo || '_' || var$nel_secuencia;

  END fcargar_codigo_externo;

  /* Validar si existe error con el movimiento*/
  FUNCTION fhay_error(par$nel_index IN gepr_pcomon_###VERSION###.tipo$nel_) RETURN BOOLEAN IS
    var$existe gepr_pcomon_###VERSION###.tipo$nel_ := 0;
  BEGIN
  /*Reviso si hay error de pais*/
    begin
       SELECT COUNT(1)
        INTO var$existe
        FROM SAPR_GTT_TAUXILIAR
       WHERE COD_CALIFICADOR = 'VALIDACIONES'
         AND OID_CAMPO1 IN ('2040010027','2040010026');
    EXCEPTION WHEN no_data_found THEN
      var$existe := 0;
    END;
    IF var$existe = 0 THEN
        BEGIN

        SELECT COUNT(1)
            INTO var$existe
            FROM SAPR_GTT_TAUXILIAR
        WHERE COD_CALIFICADOR = 'VALIDACIONES'
            AND OID_CAMPO1 = par$nel_index
            AND COD_CAMPO2 NOT LIKE '0040__0000';

        EXCEPTION WHEN no_data_found THEN
        var$existe := 0;
        END;
    END IF;

    RETURN  gepr_putilidades_###VERSION###.fmayor_que_cero(var$existe);

  END fhay_error;

   /* Validar si existe error en el servicio confirmar periodos*/
  FUNCTION fhay_error_confir_periodos(par$nel_index IN gepr_pcomon_###VERSION###.tipo$nel_) RETURN BOOLEAN IS
    var$existe gepr_pcomon_###VERSION###.tipo$nel_ := 0;
  BEGIN
    BEGIN
      SELECT COUNT(1)
          INTO var$existe
          FROM SAPR_GTT_TAUXILIAR
      WHERE COD_CALIFICADOR = 'VALIDACIONES_FECHA_CONFIRMAR' 
        AND NEL_CAMPO5 = par$nel_index;
    EXCEPTION WHEN no_data_found THEN
    var$existe := 0;
    END;
    RETURN  gepr_putilidades_###VERSION###.fmayor_que_cero(var$existe);
  END fhay_error_confir_periodos;

    /*Se encarga de grabar la estructura de Clientes en caso de que las entidades
   no existan en el alta de movimientos  */
  PROCEDURE sgrabar_clientes(
                        par$oid_llamada                      IN gepr_pcomon_###VERSION###.tipo$oid_,
                        /* CLIENTE */
                        par$anel_cli_index                   IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$acod_cli_cliente                 IN gepr_pcomon_###VERSION###.tipo$cods_,
                        par$ades_cli_cliente                 IN gepr_pcomon_###VERSION###.tipo$descs_,
                        par$aoid_cli_tipo_cliente            IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$acod_cli_bancario                IN gepr_pcomon_###VERSION###.tipo$cods_,
                        par$abol_cli_vigente                 IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_cli_totaliza_saldo          IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_cli_abona_por_total         IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_cli_banco_capital           IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_cli_banco_comision          IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$anum_cli_percent_comision        IN gepr_pcomon_###VERSION###.tipo$nels_,
                        /* SUBCLIENTE */
                        par$aoid_sc_cliente                  IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$anel_sc_cli_index                IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$anel_sc_index                    IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$acod_sc_subcliente               IN gepr_pcomon_###VERSION###.tipo$cods_,
                        par$ades_sc_subcliente               IN gepr_pcomon_###VERSION###.tipo$descs_,
                        par$aoid_sc_tipo_subcliente          IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$abol_sc_enviado_saldos           IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_sc_vigente                  IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_sc_totaliza_saldo           IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        /* PUNTO_SERVICIO */
                        par$aoid_pto_subcliente              IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$anel_pto_index                   IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$anel_pto_sc_index                IN gepr_pcomon_###VERSION###.tipo$nels_,
                        par$acod_pto_pto_servicio            IN gepr_pcomon_###VERSION###.tipo$cods_,
                        par$ades_pto_pto_servicio            IN gepr_pcomon_###VERSION###.tipo$descs_,
                        par$aoid_pto_tipo_pto_servicio       IN gepr_pcomon_###VERSION###.tipo$oids_,
                        par$abol_pto_vigente                 IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$abol_pto_totaliza_saldo          IN gepr_pcomon_###VERSION###.tipo$nbols_,
                        par$cod_usuario                      IN gepr_pcomon_###VERSION###.tipo$desc_) IS

    const$des_origen CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.' || 'sgrabar_clientes';
    var$oid_cliente             gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_subCliente          gepr_pcomon_###VERSION###.tipo$oid_;
    var$oid_puntoServicio       gepr_pcomon_###VERSION###.tipo$oid_;
    var$existe                  gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    BEGIN
        /*Borrar tabla Temporal*/
        DELETE SAPR_GTT_TAUXILIAR
        WHERE  COD_CALIFICADOR IN ('SERVICIO_OID_CLIENTE', 'SERVICIO_OID_SUBCLIENTE');




        /* grabar Cliente*/
        IF par$anel_cli_index IS NOT NULL AND par$anel_cli_index.COUNT > 0 THEN
          FOR idxCli IN par$anel_cli_index.first .. par$anel_cli_index.last LOOP
              var$oid_cliente := NULL;
              var$existe := 0;

              /*Validar si existe el Cliente*/
              BEGIN
                  SELECT COUNT(1)
                  INTO var$existe
                  FROM GEPR_TCLIENTE
                  WHERE COD_CLIENTE = par$acod_cli_cliente(idxCli);
              EXCEPTION WHEN no_data_found THEN
                  var$existe := 0;
              END;

              IF var$existe = 0 and par$acod_cli_cliente(idxCli) is not null THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$des_origen,
                                              par$des_version     => const$version,
                                              par$des_detalle     => 'No existe cliente, se da de alta con los siguientes datos: ' 
                                                                    || const$new_line || 'par$oid_cliente: '          || var$oid_cliente
                                                                    || const$new_line || 'par$cod_cliente: '          || par$acod_cli_cliente(idxCli)
                                                                    || const$new_line || 'par$des_cliente: '          || par$ades_cli_cliente(idxCli)
                                                                    || const$new_line || 'par$oid_tipo_cliente: '     || par$aoid_cli_tipo_cliente(idxCli)
                                                                    || const$new_line || 'par$cod_bancario: '         || par$acod_cli_bancario(idxCli)
                                                                    || const$new_line || 'par$bol_vigente: '          || par$abol_cli_vigente(idxCli)
                                                                    || const$new_line || 'par$bol_totaliza_saldo: '   || par$abol_cli_totaliza_saldo(idxCli)
                                                                    || const$new_line || 'par$bol_abona_por_total: '  || par$abol_cli_abona_por_total(idxCli)
                                                                    || const$new_line || 'par$bol_banco_capital: '    || par$abol_cli_banco_capital(idxCli)
                                                                    || const$new_line || 'par$bol_banco_comision: '   || par$abol_cli_banco_comision(idxCli)
                                                                    || const$new_line || 'par$num_percent_comision: ' || par$anum_cli_percent_comision(idxCli)
                                                                    || const$new_line || 'par$cod_usuario: '          || par$cod_usuario
                                                                    ,
                                              par$cod_identificador   => '');

                /*supd_Cliente*/
                SAPR_PCLIENTE_###VERSION###.supd_cliente(
                        par$oid_cliente               => var$oid_cliente,
                        par$cod_cliente               => par$acod_cli_cliente(idxCli),
                        par$des_cliente               => par$ades_cli_cliente(idxCli),
                        par$oid_tipo_cliente          => par$aoid_cli_tipo_cliente(idxCli),
                        par$cod_bancario              => par$acod_cli_bancario(idxCli),
                        par$bol_vigente               => par$abol_cli_vigente(idxCli),
                        par$bol_totaliza_saldo        => par$abol_cli_totaliza_saldo(idxCli),
                        par$bol_abona_por_total       => par$abol_cli_abona_por_total(idxCli),
                        par$bol_banco_capital         => par$abol_cli_banco_capital(idxCli),
                        par$bol_banco_comision        => par$abol_cli_banco_comision(idxCli),
                        par$num_percent_comision      => par$anum_cli_percent_comision(idxCli),
                        par$cod_usuario               => par$cod_usuario);

                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                par$des_origen      => const$des_origen,
                                                par$des_version     => const$version,
                                                par$des_detalle     => 'Grabamos el código ajeno del cliente, con los siguientes datos: ' 
                                                                      || const$new_line || 'par$oid_tabla_genesis: '  || var$oid_cliente
                                                                      || const$new_line || 'par$cod_tabla_genesis: '  || 'GEPR_TCLIENTE'
                                                                      || const$new_line || 'par$cod_identificador: '  || 'MAE'
                                                                      || const$new_line || 'par$cod_ajeno: '          || par$acod_cli_cliente(idxCli)
                                                                      || const$new_line || 'par$des_ajeno: '          || par$acod_cli_cliente(idxCli)
                                                                      || const$new_line || 'par$bol_defecto: '        || 1
                                                                      || const$new_line || 'par$cod_usuario: '        || par$cod_usuario
                                                                      ,
                                                par$cod_identificador   => '');

                /*Grabamos el codigo ajeno*/
                GEPR_PCODIGO_AJENO_###VERSION###.sconfigurar_ajeno(
                            par$oid_tabla_genesis      =>   var$oid_cliente,
                            par$cod_tabla_genesis      =>   'GEPR_TCLIENTE',
                            par$cod_identificador      =>   'MAE',
                            par$cod_ajeno              =>   par$acod_cli_cliente(idxCli),
                            par$des_ajeno              =>   par$acod_cli_cliente(idxCli),
                            par$bol_defecto            =>   1,
                            par$cod_usuario            =>   par$cod_usuario);


                /*Grabar OID en tabla auxiliar para luego usarlo en el subcliente*/
                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CALIFICADOR)
                                VALUES (
                                    var$oid_cliente, 
                                    par$anel_cli_index(idxCli), 
                                    'SERVICIO_OID_CLIENTE'); 

              END IF;
          END LOOP;
        END IF;

        /* grabar SubCliente*/
        IF par$anel_sc_index IS NOT NULL AND par$anel_sc_index.COUNT > 0 THEN
          FOR idxSci IN par$anel_sc_index.first .. par$anel_sc_index.last LOOP
              var$oid_subCliente := NULL;
              var$oid_cliente := NULL;
              var$existe := 0;

              /*Validar si existe el SubCliente*/
              BEGIN
                  SELECT COUNT(1)
                  INTO var$existe
                  FROM GEPR_TSUBCLIENTE
                  WHERE COD_SUBCLIENTE =  par$acod_sc_subcliente(idxSci);
              EXCEPTION WHEN no_data_found THEN
                  var$existe := 0;
              END;

              IF var$existe = 0 and par$acod_sc_subcliente(idxSci) is not null THEN
                  /*Validamos si paso el oid de cliente por parametro*/
                  IF par$aoid_sc_cliente(idxSci) IS NULL THEN
                      BEGIN
                          /*Recuperar oid_cliente*/
                          SELECT OID_CAMPO1
                          INTO var$oid_cliente
                          FROM SAPR_GTT_TAUXILIAR 
                          WHERE COD_CALIFICADOR = 'SERVICIO_OID_CLIENTE'  AND COD_CAMPO2 =  par$anel_sc_cli_index(idxSci) AND ROWNUM = 1;
                      EXCEPTION WHEN no_data_found THEN
                          var$oid_cliente := NULL;
                      END;
                  ELSE
                      var$oid_cliente := par$aoid_sc_cliente(idxSci);
                  END IF;

                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                par$des_origen      => const$des_origen,
                                                par$des_version     => const$version,
                                                par$des_detalle     => 'No existe subcliente, se da de alta con los siguientes datos: ' 
                                                                      || const$new_line || 'par$oid_subcliente: '       || var$oid_subCliente
                                                                      || const$new_line || 'par$oid_cliente: '          || var$oid_cliente
                                                                      || const$new_line || 'par$cod_subcliente: '       || par$acod_sc_subcliente(idxSci)
                                                                      || const$new_line || 'par$des_subcliente: '       || par$ades_sc_subcliente(idxSci)
                                                                      || const$new_line || 'par$oid_tipo_subcliente: '  || par$aoid_sc_tipo_subcliente(idxSci)
                                                                      || const$new_line || 'par$bol_enviado_saldos: '   || par$abol_sc_enviado_saldos(idxSci)
                                                                      || const$new_line || 'par$bol_vigente: '          || par$abol_sc_vigente(idxSci)
                                                                      || const$new_line || 'par$bol_totaliza_saldo: '   || par$abol_sc_totaliza_saldo(idxSci)
                                                                      || const$new_line || 'par$cod_usuario: '          || par$cod_usuario
                                                                      ,
                                                par$cod_identificador   => '');

                  /*supd_subcliente*/
                  SAPR_PCLIENTE_###VERSION###.supd_subcliente(
                          par$oid_subcliente          =>   var$oid_subCliente,
                          par$oid_cliente             =>   var$oid_cliente,
                          par$cod_subcliente          =>   par$acod_sc_subcliente(idxSci),
                          par$des_subcliente          =>   par$ades_sc_subcliente(idxSci),
                          par$oid_tipo_subcliente     =>   par$aoid_sc_tipo_subcliente(idxSci),
                          par$bol_enviado_saldos      =>   par$abol_sc_enviado_saldos(idxSci),
                          par$bol_vigente             =>   par$abol_sc_vigente(idxSci),
                          par$bol_totaliza_saldo      =>   par$abol_sc_totaliza_saldo(idxSci),
                          par$cod_usuario             =>   par$cod_usuario);

                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                par$des_origen      => const$des_origen,
                                                par$des_version     => const$version,
                                                par$des_detalle     => 'Grabamos el código ajeno del subcliente, con los siguientes datos: ' 
                                                                      || const$new_line || 'par$oid_tabla_genesis: '  || var$oid_subCliente
                                                                      || const$new_line || 'par$cod_tabla_genesis: '  || 'GEPR_TSUBCLIENTE'
                                                                      || const$new_line || 'par$cod_identificador: '  || 'MAE'
                                                                      || const$new_line || 'par$cod_ajeno: '          || par$acod_sc_subcliente(idxSci)
                                                                      || const$new_line || 'par$des_ajeno: '          || par$acod_sc_subcliente(idxSci)
                                                                      || const$new_line || 'par$bol_defecto: '        || 1
                                                                      || const$new_line || 'par$cod_usuario: '        || par$cod_usuario
                                                                      ,
                                                par$cod_identificador   => '');


                  /*Grabamos el codigo ajeno*/
                  GEPR_PCODIGO_AJENO_###VERSION###.sconfigurar_ajeno(
                              par$oid_tabla_genesis      =>   var$oid_subCliente,
                              par$cod_tabla_genesis      =>   'GEPR_TSUBCLIENTE',
                              par$cod_identificador      =>   'MAE',
                              par$cod_ajeno              =>   par$acod_sc_subcliente(idxSci),
                              par$des_ajeno              =>   par$acod_sc_subcliente(idxSci),
                              par$bol_defecto            =>   1,
                              par$cod_usuario            =>   par$cod_usuario);

                  /*Grabar OID en tabla auxiliar para luego usarlo en el punto de servicio*/
                  INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CALIFICADOR)
                                  VALUES (
                                      var$oid_subCliente, 
                                      par$anel_sc_index(idxSci), 
                                      'SERVICIO_OID_SUBCLIENTE'); 
              END IF;
          END LOOP;
        END IF;

        /* grabar Punto de Servicio*/
        IF par$anel_pto_index IS NOT NULL AND par$anel_pto_index.COUNT > 0 THEN
          FOR idxPto IN par$anel_pto_index.first .. par$anel_pto_index.last LOOP
              var$oid_puntoServicio := NULL;
              var$oid_subCliente := NULL;
              var$existe := 0;

              /*Validar si existe el Punto de Servicio*/
              BEGIN
                  SELECT COUNT(1)
                  INTO var$existe
                  FROM GEPR_TPUNTO_SERVICIO
                  WHERE COD_PTO_SERVICIO =  par$acod_pto_pto_servicio(idxPto);
              EXCEPTION WHEN no_data_found THEN
                  var$existe := 0;
              END;

              IF var$existe = 0 and par$acod_pto_pto_servicio(idxPto) is not null THEN
                  /*Validamos si paso el oid de subcliente por parametro*/
                  IF par$aoid_pto_subcliente(idxPto) IS NULL THEN
                      BEGIN
                          /*Recuperar oid_subCliente*/
                          SELECT OID_CAMPO1
                          INTO var$oid_subCliente
                          FROM SAPR_GTT_TAUXILIAR 
                          WHERE COD_CALIFICADOR = 'SERVICIO_OID_SUBCLIENTE'  AND COD_CAMPO2 =  par$anel_pto_sc_index(idxPto) AND ROWNUM = 1;
                      EXCEPTION WHEN no_data_found THEN
                          var$oid_subCliente := NULL;
                      END;
                  ELSE
                      var$oid_subCliente := par$aoid_pto_subcliente(idxPto);
                  END IF;

                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                par$des_origen      => const$des_origen,
                                                par$des_version     => const$version,
                                                par$des_detalle     => 'No existe punto de servicio, se da de alta con los siguientes datos: ' 
                                                                      || const$new_line || 'par$oid_pto_servicio: '       || var$oid_puntoServicio
                                                                      || const$new_line || 'par$oid_subcliente: '         || var$oid_subCliente
                                                                      || const$new_line || 'par$cod_pto_servicio: '       || par$acod_pto_pto_servicio(idxPto)
                                                                      || const$new_line || 'par$des_pto_servicio: '       || par$ades_pto_pto_servicio(idxPto)
                                                                      || const$new_line || 'par$oid_tipo_pto_servicio: '  || par$aoid_pto_tipo_pto_servicio(idxPto)
                                                                      || const$new_line || 'par$bol_vigente: '            || par$abol_pto_vigente(idxPto)
                                                                      || const$new_line || 'par$bol_totaliza_saldo: '     || par$abol_pto_totaliza_saldo(idxPto)
                                                                      || const$new_line || 'par$cod_usuario: '            || par$cod_usuario
                                                                      ,
                                                par$cod_identificador   => '');

                  /*supd_pto_servicio*/
                  SAPR_PCLIENTE_###VERSION###.supd_pto_servicio(
                          par$oid_pto_servicio        =>   var$oid_puntoServicio,
                          par$oid_subcliente          =>   var$oid_subCliente,
                          par$cod_pto_servicio        =>   par$acod_pto_pto_servicio(idxPto),
                          par$des_pto_servicio        =>   par$ades_pto_pto_servicio(idxPto),
                          par$oid_tipo_pto_servicio   =>   par$aoid_pto_tipo_pto_servicio(idxPto),
                          par$bol_vigente             =>   par$abol_pto_vigente(idxPto),
                          par$bol_totaliza_saldo      =>   par$abol_pto_totaliza_saldo(idxPto),
                          par$cod_usuario             =>   par$cod_usuario);

                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                par$des_origen      => const$des_origen,
                                                par$des_version     => const$version,
                                                par$des_detalle     => 'Grabamos el código ajeno del punto de servicio, con los siguientes datos: ' 
                                                                      || const$new_line || 'par$oid_tabla_genesis: '  || var$oid_puntoServicio
                                                                      || const$new_line || 'par$cod_tabla_genesis: '  || 'GEPR_TPUNTO_SERVICIO'
                                                                      || const$new_line || 'par$cod_identificador: '  || 'MAE'
                                                                      || const$new_line || 'par$cod_ajeno: '          || par$acod_pto_pto_servicio(idxPto)
                                                                      || const$new_line || 'par$des_ajeno: '          || par$acod_pto_pto_servicio(idxPto)
                                                                      || const$new_line || 'par$bol_defecto: '        || 1
                                                                      || const$new_line || 'par$cod_usuario: '        || par$cod_usuario
                                                                      ,
                                                par$cod_identificador   => '');

                  /*Grabamos el codigo ajeno*/
                  GEPR_PCODIGO_AJENO_###VERSION###.sconfigurar_ajeno(
                              par$oid_tabla_genesis      =>   var$oid_puntoServicio,
                              par$cod_tabla_genesis      =>   'GEPR_TPUNTO_SERVICIO',
                              par$cod_identificador      =>   'MAE',
                              par$cod_ajeno              =>   par$acod_pto_pto_servicio(idxPto),
                              par$des_ajeno              =>   par$acod_pto_pto_servicio(idxPto),
                              par$bol_defecto            =>   1,
                              par$cod_usuario            =>   par$cod_usuario);
              END IF;
          END LOOP;
        END IF;

  END sgrabar_clientes;

  PROCEDURE sconfirmar_periodos(
                                par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$adevice_id            IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$aidentificador        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$acodigo               IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$aconfirmacion         IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$afecha_hora           IN gepr_pcomon_###VERSION###.tipo$fyhs_,
                                par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_cultura           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_pais              IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$rc_errores_confirma   OUT sys_refcursor,
                                par$rc_validaciones       OUT sys_refcursor) IS
		-- Variables de LOG
    const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.sconfirmar_periodos';
		var$detalle           VARCHAR2(4000);
		var$detalle_actual    VARCHAR2(4000);
  
    -- Variables para validaciones
    var$oid_validaciones       gepr_pcomon_###VERSION###.tipo$oids_;
    var$cod_validaciones       gepr_pcomon_###VERSION###.tipo$cods_;
    var$des_validaciones       gepr_pcomon_###VERSION###.tipo$descs_;
    var$toid_validaciones      varchar2_array;
    var$tcod_validaciones      varchar2_array;
    var$tdes_validaciones      varchar2_array;

    -- Identificadores de estado de período
    var$oid_estado_periodo_AB  gepr_pcomon_###VERSION###.tipo$oid_; --ABIERTO
		var$oid_estado_periodo_CF  gepr_pcomon_###VERSION###.tipo$oid_; --CONFIRMADO
    var$oid_estado_periodo_NC  gepr_pcomon_###VERSION###.tipo$oid_; --NO CONFIRMADO
    var$oid_estado_periodo_AC  gepr_pcomon_###VERSION###.tipo$oid_; --ACREDITADO
		var$oid_estado_periodo_RE  gepr_pcomon_###VERSION###.tipo$oid_; --REPROCESAR
		var$oid_estado_periodo_NA  gepr_pcomon_###VERSION###.tipo$oid_; --NO ACREDITADO
    var$oid_estado_periodo_EC  gepr_pcomon_###VERSION###.tipo$oid_; --EN CREACION
    var$oid_estado_periodo_NP  gepr_pcomon_###VERSION###.tipo$oid_; --NO PROCESAR

    --Variables de parametros
    const$cod_parametro_correos     CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'FechaValorConfirmacionListaCorreos';
    const$cod_parametro_reintentos  CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := 'FechaValorConfirmacionMaxReintentosPeriodos';
    var$lista_correos               VARCHAR2(4000);
    var$max_reintentos              gepr_pcomon_###VERSION###.tipo$nel_ := 0;

    -- Variables locales
    var$existe 						    gepr_pcomon_###VERSION###.tipo$nel_;
    var$cod_pais              gepr_pcomon_###VERSION###.tipo$cod_;
    var$oid_pais              gepr_pcomon_###VERSION###.tipo$oid_;
    var$mensaje               gepr_pcomon_###VERSION###.tipo$desc_;
    var$aux_cant_registros    gepr_pcomon_###VERSION###.tipo$nel_;
    var$hay_periodos_AC       gepr_pcomon_###VERSION###.tipo$bol_;
    var$hay_periodos_RE       gepr_pcomon_###VERSION###.tipo$bol_;
    var$hay_periodos_BO       gepr_pcomon_###VERSION###.tipo$bol_;
    var$nel_precinto          gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$nel_divisa            gepr_pcomon_###VERSION###.tipo$nel_;
    -- Variables para manejo del período
    var$oid_periodo           gepr_pcomon_###VERSION###.tipo$oid_;

    var$cod_tipo_periodo      gepr_pcomon_###VERSION###.tipo$cod_;
    var$cod_identificador     gepr_pcomon_###VERSION###.tipo$cod_;

    -- Variables para procedures sgrabar_mov_acreditacion, sgrabar_mov_recojo y sgrabar_mov_boveda
    var$anel_index                gepr_pcomon_###VERSION###.tipo$nels_;
    var$acod_device_id            gepr_pcomon_###VERSION###.tipo$cods_;
    var$acod_cliente              gepr_pcomon_###VERSION###.tipo$descs_;
    var$acod_sub_cliente          gepr_pcomon_###VERSION###.tipo$cods_;
    var$acod_punto_servicio       gepr_pcomon_###VERSION###.tipo$cods_;
    var$afyh_gestion              gepr_pcomon_###VERSION###.tipo$fyhs_;
    var$afyh_contable             gepr_pcomon_###VERSION###.tipo$fyhs_;
    var$acod_actual_id            gepr_pcomon_###VERSION###.tipo$descs_;
    var$acod_collection_id        gepr_pcomon_###VERSION###.tipo$descs_;
    var$acod_precinto             gepr_pcomon_###VERSION###.tipo$cods_;
    var$anel_gmt_minuto           gepr_pcomon_###VERSION###.tipo$nels_;
    var$avtdoc_nel_index          gepr_pcomon_###VERSION###.tipo$nels_;
    var$avtdoc_cod_termino        gepr_pcomon_###VERSION###.tipo$cods_;
    var$avtdoc_des_valor          gepr_pcomon_###VERSION###.tipo$descs_;

    var$adiv_nel_index            gepr_pcomon_###VERSION###.tipo$nels_;
    var$adiv_index                gepr_pcomon_###VERSION###.tipo$nels_;
    var$aefdoc_div_index          gepr_pcomon_###VERSION###.tipo$nels_;

    var$aefdoc_nel_index          gepr_pcomon_###VERSION###.tipo$nels_;
    var$aefdoc_cod_divisa         gepr_pcomon_###VERSION###.tipo$cods_;
    var$aefdoc_cod_denominacion   gepr_pcomon_###VERSION###.tipo$cods_;
    var$aefdoc_nel_cantidad       gepr_pcomon_###VERSION###.tipo$nels_;
    var$aefdoc_num_importe        gepr_pcomon_###VERSION###.tipo$imps_;
    var$aefdoc_nel_tipo           gepr_pcomon_###VERSION###.tipo$nels_;
    var$rc_validaciones           sys_refcursor;
    var$rc_planificaciones        sys_refcursor;
    var$rc_documentos             sys_refcursor;
    var$cod_ejecucion             gepr_pcomon_###VERSION###.tipo$nel_;
    var$aux_cantidad_valores      gepr_pcomon_###VERSION###.tipo$nel_;
    var$aux_anel_index            gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$aux_acod_cliente          gepr_pcomon_###VERSION###.tipo$desc_ := '';
    var$aux_acod_sub_cliente      gepr_pcomon_###VERSION###.tipo$cod_ := '';
    var$aux_acod_punto_servicio   gepr_pcomon_###VERSION###.tipo$cod_ := '';


    CURSOR cur$periodos_confirmados (par$adevice_id gepr_pcomon_###VERSION###.tipo$cod_, par$aidentificador gepr_pcomon_###VERSION###.tipo$cod_) IS
      SELECT DISTINCT FYH_CONFIRMACION, PER.COD_CONFIRMACION
      FROM SAPR_TPERIODO PER
      INNER JOIN SAPR_TMAQUINA MAQ ON MAQ.OID_MAQUINA = PER.OID_MAQUINA
      INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
      INNER JOIN SAPR_TTIPO_PLANIFICACION TPLANI ON TPLANI.OID_TIPO_PLANIFICACION = PLANI.OID_TIPO_PLANIFICACION
      WHERE TPLANI.COD_TIPO_PLANIFICACION = 'FECHA_VALOR_CONFIR'
      AND PER.BOL_CONFIRMADO = 1
      AND PER.FYH_CONFIRMACION IS NOT NULL
      AND MAQ.COD_IDENTIFICACION = par$adevice_id
      AND PER.COD_PERIODO_CONFIRMACION = par$aidentificador;

  BEGIN
  	-- INICIO - LOG de parametros iniciales
		IF par$oid_llamada IS NOT NULL THEN
			var$detalle := q'[Parametros iniciales: 
        par$oid_llamada: ]'             || par$oid_llamada || q'[
        par$cod_cultura: ]'             || par$cod_cultura || q'[
        par$cod_usuario: ]'             || par$cod_usuario || q'[
        par$cod_pais: ]'                || par$cod_pais ;

			SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
													
			/* INICIO LOG de arrays asociativos */
			IF par$adevice_id IS NOT NULL AND par$adevice_id.COUNT > 0 THEN
				var$detalle := '';
				FOR idx IN  par$adevice_id.first ..  par$adevice_id.last LOOP 
						var$detalle_actual := '';
						IF par$adevice_id(idx) IS NOT NULL THEN
							var$detalle_actual := 'Parametros iniciales: par$adevice_id(' || idx || '):  ' || par$adevice_id(idx) || ' ';
						ELSE
							var$detalle_actual := 'Parametros iniciales: par$adevice_id(' || idx || '):  NULL ';
						END IF;
						IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
							SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
														par$des_origen      => const$des_origen,
														par$des_version     => const$version,                            
														par$des_detalle     => var$detalle,
														par$cod_identificador   => '');
							var$detalle := var$detalle_actual;
						ELSE
							var$detalle := var$detalle || const$new_line || var$detalle_actual;
						END IF;
				END LOOP;
				IF var$detalle IS NOT NULL THEN
					SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
													par$des_origen      => const$des_origen,
													par$des_version     => const$version,                            
													par$des_detalle     => var$detalle,
													par$cod_identificador   => '');
				END IF;
			END IF;

			IF par$aidentificador IS NOT NULL AND par$aidentificador.COUNT > 0 THEN
				var$detalle := '';
				FOR idx IN  par$aidentificador.first ..  par$aidentificador.last LOOP 
						var$detalle_actual := '';
						IF par$aidentificador(idx) IS NOT NULL THEN
							var$detalle_actual := 'Parametros iniciales: par$aidentificador(' || idx || '):  ' || par$aidentificador(idx) || ' ';
						ELSE
							var$detalle_actual := 'Parametros iniciales: par$aidentificador(' || idx || '):  NULL ';
						END IF;
						IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
							SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
														par$des_origen      => const$des_origen,
														par$des_version     => const$version,                            
														par$des_detalle     => var$detalle,
														par$cod_identificador   => '');
							var$detalle := var$detalle_actual;
						ELSE
							var$detalle := var$detalle || const$new_line || var$detalle_actual;
						END IF;
				END LOOP;
				IF var$detalle IS NOT NULL THEN
					SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
													par$des_origen      => const$des_origen,
													par$des_version     => const$version,                            
													par$des_detalle     => var$detalle,
													par$cod_identificador   => '');
				END IF;
			END IF;

			IF par$acodigo IS NOT NULL AND par$acodigo.COUNT > 0 THEN
				var$detalle := '';
				FOR idx IN  par$acodigo.first ..  par$acodigo.last LOOP 
						var$detalle_actual := '';
						IF par$acodigo(idx) IS NOT NULL THEN
							var$detalle_actual := 'Parametros iniciales: par$acodigo(' || idx || '):  ' || par$acodigo(idx) || ' ';
						ELSE
							var$detalle_actual := 'Parametros iniciales: par$acodigo(' || idx || '):  NULL ';
						END IF;
						IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
							SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
														par$des_origen      => const$des_origen,
														par$des_version     => const$version,                            
														par$des_detalle     => var$detalle,
														par$cod_identificador   => '');
							var$detalle := var$detalle_actual;
						ELSE
							var$detalle := var$detalle || const$new_line || var$detalle_actual;
						END IF;
				END LOOP;
				IF var$detalle IS NOT NULL THEN
					SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
													par$des_origen      => const$des_origen,
													par$des_version     => const$version,                            
													par$des_detalle     => var$detalle,
													par$cod_identificador   => '');
				END IF;
			END IF;
 			
			IF par$aconfirmacion IS NOT NULL AND par$aconfirmacion.COUNT > 0 THEN
				var$detalle := '';
				FOR idx IN  par$aconfirmacion.first ..  par$aconfirmacion.last LOOP 
						var$detalle_actual := '';
						IF par$aconfirmacion(idx) IS NOT NULL THEN
							var$detalle_actual := 'Parametros iniciales: par$aconfirmacion(' || idx || '):  ' || par$aconfirmacion(idx) || ' ';
						ELSE
							var$detalle_actual := 'Parametros iniciales: par$aconfirmacion(' || idx || '):  NULL ';
						END IF;
						IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
							SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
														par$des_origen      => const$des_origen,
														par$des_version     => const$version,                            
														par$des_detalle     => var$detalle,
														par$cod_identificador   => '');
							var$detalle := var$detalle_actual;
						ELSE
							var$detalle := var$detalle || const$new_line || var$detalle_actual;
						END IF;
				END LOOP;
				IF var$detalle IS NOT NULL THEN
					SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
													par$des_origen      => const$des_origen,
													par$des_version     => const$version,                            
													par$des_detalle     => var$detalle,
													par$cod_identificador   => '');
				END IF;
			END IF;

			IF par$afecha_hora IS NOT NULL AND par$afecha_hora.COUNT > 0 THEN
				var$detalle := '';
				FOR idx IN  par$afecha_hora.first ..  par$afecha_hora.last LOOP 
						var$detalle_actual := '';
						IF par$afecha_hora(idx) IS NOT NULL THEN
							var$detalle_actual := 'Parametros iniciales: par$afecha_hora(' || idx || '):  ' || par$afecha_hora(idx) || ' ';
						ELSE
							var$detalle_actual := 'Parametros iniciales: par$afecha_hora(' || idx || '):  NULL ';
						END IF;
						IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
							SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
														par$des_origen      => const$des_origen,
														par$des_version     => const$version,                            
														par$des_detalle     => var$detalle,
														par$cod_identificador   => '');
							var$detalle := var$detalle_actual;
						ELSE
							var$detalle := var$detalle || const$new_line || var$detalle_actual;
						END IF;
				END LOOP;
				IF var$detalle IS NOT NULL THEN
					SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
													par$des_origen      => const$des_origen,
													par$des_version     => const$version,                            
													par$des_detalle     => var$detalle,
													par$cod_identificador   => '');
				END IF;
			END IF;
			/* FIN LOG de arrays asociativos */
		END IF;
		-- FIN - LOG de parametros iniciales

		-- #### Inicializar los cursores ####
		OPEN par$rc_errores_confirma FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
    OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

    -- Limpiar tabla temporal
    DELETE SAPR_GTT_TAUXILIAR;
    COMMIT;
  
    -- Carga identificadores de estado de periodo
    SELECT OID_ESTADO_PERIODO INTO var$oid_estado_periodo_AB FROM SAPR_TESTADO_PERIODO WHERE COD_ESTADO_PERIODO = 'AB';
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga var$oid_estado_periodo_AB: ' || var$oid_estado_periodo_AB,
                            par$cod_identificador   => '');

    SELECT OID_ESTADO_PERIODO INTO var$oid_estado_periodo_AC FROM SAPR_TESTADO_PERIODO WHERE COD_ESTADO_PERIODO = 'AC';
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga var$oid_estado_periodo_AC: ' || var$oid_estado_periodo_AC,
                            par$cod_identificador   => '');
    
    SELECT OID_ESTADO_PERIODO INTO var$oid_estado_periodo_CF FROM SAPR_TESTADO_PERIODO WHERE COD_ESTADO_PERIODO = 'CF';
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga var$oid_estado_periodo_CF: ' || var$oid_estado_periodo_CF,
                            par$cod_identificador   => '');
    
    SELECT OID_ESTADO_PERIODO INTO var$oid_estado_periodo_NC FROM SAPR_TESTADO_PERIODO WHERE COD_ESTADO_PERIODO = 'NC';
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga var$oid_estado_periodo_NC: ' || var$oid_estado_periodo_NC,
                            par$cod_identificador   => '');

    SELECT OID_ESTADO_PERIODO INTO var$oid_estado_periodo_RE FROM SAPR_TESTADO_PERIODO WHERE COD_ESTADO_PERIODO = 'RE';
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga var$oid_estado_periodo_RE: ' || var$oid_estado_periodo_RE,
                            par$cod_identificador   => '');

    SELECT OID_ESTADO_PERIODO INTO var$oid_estado_periodo_NA FROM SAPR_TESTADO_PERIODO WHERE COD_ESTADO_PERIODO = 'NA';
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga var$oid_estado_periodo_NA: ' || var$oid_estado_periodo_NA,
                            par$cod_identificador   => '');

    SELECT OID_ESTADO_PERIODO INTO var$oid_estado_periodo_EC FROM SAPR_TESTADO_PERIODO WHERE COD_ESTADO_PERIODO = 'EC';
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga var$oid_estado_periodo_EC: ' || var$oid_estado_periodo_EC,
                            par$cod_identificador   => '');

    SELECT OID_ESTADO_PERIODO INTO var$oid_estado_periodo_NP FROM SAPR_TESTADO_PERIODO WHERE COD_ESTADO_PERIODO = 'NP';
    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Carga var$oid_estado_periodo_NP: ' || var$oid_estado_periodo_NP,
                            par$cod_identificador   => '');

    /* Validar código pais*/
    /* Al recibir el par$cod_pais de tipo OUT necesito crear una variable*/
    var$cod_pais := par$cod_pais;
    GEPR_PPAIS_###VERSION###.srecuperar_pais(par$oid_llamada => par$oid_llamada,
                          par$cod_identificador_ajeno => '',
                          par$cod_pais => var$cod_pais,
                          par$oid_pais => var$oid_pais,
                          par$cod_cultura => par$cod_cultura);
     
    IF var$oid_pais IS NOT NULL THEN
      /*Obtengo el parametro de la lista de correos*/
      var$lista_correos := gepr_putilidades_###VERSION###.frecuperar_parametro(par$cod_delegacion => NULL,
                                                                              par$cod_pais => var$cod_pais,
                                                                              par$cod_parametro => const$cod_parametro_correos,
                                                                              par$cod_aplicacion => 'Genesis');
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                par$des_origen      => const$des_origen,
                par$des_version     => const$version,                            
                par$des_detalle     => 'Se retorna parámetro de lista de correos,  var$lista_correos: ' || var$lista_correos,
                par$cod_identificador   => '');

      /*Obtengo el parametro de la maxima cantidad de reintentos */
      var$max_reintentos := gepr_putilidades_###VERSION###.frecuperar_parametro(par$cod_delegacion => NULL,
                                                                              par$cod_pais => var$cod_pais,
                                                                              par$cod_parametro => const$cod_parametro_reintentos,
                                                                              par$cod_aplicacion => 'Genesis');
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Se retorna parámetro de máxima cantidad de reintentos,  var$max_reintentos: ' || var$max_reintentos,
            par$cod_identificador   => '');


      FOR idx IN par$aidentificador.first .. par$aidentificador.last LOOP
        BEGIN

         -- Limpiamos la tabla auxiliar
          DELETE FROM SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR IN ('TIPO_PERIODO_AC','TIPO_PERIODO_RE','TIPO_PERIODO_BO','VALIDACIONES');
          -- Limpiamos variables
          var$oid_periodo     := NULL;

          var$hay_periodos_AC := FALSE;
          var$hay_periodos_RE := FALSE;
          var$hay_periodos_BO := FALSE;
          

          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                    par$des_origen      => const$des_origen,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Índice: ' || idx || '. Limpieza de variables utilizadas en el procedure sgrabar_mov_acreditacion',
                    par$cod_identificador   => '');
      
          var$anel_index.delete;
          var$acod_device_id.delete;
          var$acod_cliente.delete;
          var$acod_sub_cliente.delete;
          var$acod_punto_servicio.delete;
          var$afyh_gestion.delete;
          var$afyh_contable.delete;
          var$acod_actual_id.delete;
          var$acod_collection_id.delete;
          var$acod_precinto.delete;
          var$anel_gmt_minuto.delete;
          var$avtdoc_nel_index.delete;
          var$avtdoc_cod_termino.delete;
          var$avtdoc_des_valor.delete;
          
          var$adiv_nel_index.delete;
          var$adiv_index.delete;
          var$aefdoc_div_index.delete;

          var$aefdoc_nel_index.delete;
          var$aefdoc_cod_divisa.delete;
          var$aefdoc_cod_denominacion.delete;
          var$aefdoc_nel_cantidad.delete;
          var$aefdoc_num_importe.delete;
          var$aefdoc_nel_tipo.delete;
          var$aux_anel_index := 0;
          var$aux_acod_cliente        := '';
          var$aux_acod_sub_cliente    := '';
          var$aux_acod_punto_servicio := '';
          var$aux_cantidad_valores := 0;
          OPEN var$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
          OPEN var$rc_planificaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;
          OPEN var$rc_documentos FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

          --Validar que existan períodos a confirmar (sin importar el tipo de período)
          SELECT COUNT(1) INTO var$existe 
            FROM SAPR_TPERIODO PER
            INNER JOIN SAPR_TMAQUINA MAQ ON MAQ.OID_MAQUINA = PER.OID_MAQUINA
            INNER JOIN SAPR_TESTADO_PERIODO ESTADO ON ESTADO.OID_ESTADO_PERIODO = PER.OID_ESTADO_PERIODO
            INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
            INNER JOIN SAPR_TTIPO_PLANIFICACION TPLANI ON TPLANI.OID_TIPO_PLANIFICACION = PLANI.OID_TIPO_PLANIFICACION
            WHERE TPLANI.COD_TIPO_PLANIFICACION = 'FECHA_VALOR_CONFIR'
                AND ESTADO.COD_ESTADO_PERIODO = 'CO'
                AND MAQ.COD_IDENTIFICACION = par$adevice_id(idx)
                AND PER.COD_PERIODO_CONFIRMACION = par$aidentificador(idx);
          IF var$existe > 0 THEN
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
              par$des_origen      => const$des_origen,
              par$des_version     => const$version,                            
              par$des_detalle     => 'Índice: ' || idx || '. Existen periodos para confirmar para MAQ.COD_IDENTIFICACION: ' || par$adevice_id(idx) || ' y PER.COD_PERIODO_CONFIRMACION: ' || par$aidentificador(idx), 
              par$cod_identificador   => '');

            -- GRABAMOS EN LA TABLA AUXILIAR LOS PERIODOS ENCONTRADOS PARA EL IDENTIFICADOR Y LA MÁQUINA
            INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CAMPO4, COD_CAMPO8, COD_CAMPO9, NEL_CAMPO5, NEL_CAMPO6, COD_CALIFICADOR) 
            SELECT PER.OID_PERIODO, PER.COD_PERIODO_CONFIRMACION, par$acodigo(idx), TO_CHAR(par$afecha_hora(idx), 'YYYY-MM-DD HH24:MI:SS'), 
            MAQ.COD_IDENTIFICACION, par$aconfirmacion(idx), PER.NEL_INTENTO_CONFIRMACION, ROWNUM, 'TIPO_PERIODO_' ||  TIPE.COD_TIPO_PERIODO
            FROM SAPR_TPERIODO PER
            INNER JOIN SAPR_TMAQUINA MAQ ON MAQ.OID_MAQUINA = PER.OID_MAQUINA
            INNER JOIN SAPR_TESTADO_PERIODO ESTADO ON ESTADO.OID_ESTADO_PERIODO = PER.OID_ESTADO_PERIODO
            INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
            INNER JOIN SAPR_TTIPO_PLANIFICACION TPLANI ON TPLANI.OID_TIPO_PLANIFICACION = PLANI.OID_TIPO_PLANIFICACION
            INNER JOIN SAPR_TTIPO_PERIODO TIPE ON TIPE.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO
            WHERE TPLANI.COD_TIPO_PLANIFICACION = 'FECHA_VALOR_CONFIR'
                AND ESTADO.COD_ESTADO_PERIODO = 'CO'
                AND MAQ.COD_IDENTIFICACION = par$adevice_id(idx)
                AND PER.COD_PERIODO_CONFIRMACION = par$aidentificador(idx)
            ORDER BY TIPE.COD_TIPO_PERIODO, PER.FYH_INICIO;

            --* CONFIRMACION PERIODOS DE ACREDITACION
            FOR rec$periodo_acreditacion IN (
              SELECT 	OID_CAMPO1 AS OID_PERIODO,
                      COD_CAMPO2 AS IDENTIFICADOR,
                      COD_CAMPO3 AS CODIGO_MENSAJE,
                      COD_CAMPO4 AS FECHA_HORA,
                      NEL_CAMPO5 AS INTENTOS_CONFIRMACION,
                      COD_CAMPO8 AS DEVICEID,
                      COD_CAMPO9 AS COD_CONFIRMACION
                FROM SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR = 'TIPO_PERIODO_AC' ORDER BY NEL_CAMPO6)
            LOOP
              -- Variable para indicar que se encontraron períodos de Acreditación
              var$hay_periodos_AC := TRUE;

              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                par$des_origen      => const$des_origen,
                par$des_version     => const$version,                            
                par$des_detalle     => 'Índice: ' || idx || '. Llamada al procedure sconfirmar_periodos_ac para el OID_PERIODO: ' || rec$periodo_acreditacion.OID_PERIODO, 
                par$cod_identificador   => '');

              IF NOT fhay_error_confir_periodos(idx) THEN
                sconfirmar_periodos_ac(
                                              par$oid_llamada           => par$oid_llamada,
                                              par$oid_periodo           => rec$periodo_acreditacion.OID_PERIODO,
                                              par$cod_identificador     => rec$periodo_acreditacion.IDENTIFICADOR,
                                              par$cod_device_id         => rec$periodo_acreditacion.DEVICEID,
                                              par$cod_mensaje           => rec$periodo_acreditacion.CODIGO_MENSAJE,
                                              par$cod_confirmacion      => rec$periodo_acreditacion.COD_CONFIRMACION,
                                              par$fecha_hora            => TO_DATE(rec$periodo_acreditacion.FECHA_HORA, 'YYYY-MM-DD HH24:MI:SS'),
                                              par$intentos_confirmacion => rec$periodo_acreditacion.INTENTOS_CONFIRMACION,
                                              par$max_intentos_confir   => var$max_reintentos,
                                              par$oid_estado_periodo_AC => var$oid_estado_periodo_AC,
                                              par$oid_estado_periodo_RE => var$oid_estado_periodo_RE,
                                              par$oid_estado_periodo_NA => var$oid_estado_periodo_NA,
                                              par$cod_usuario           => par$cod_usuario
                                            );
                                            
              END IF;
            END LOOP;
            IF var$hay_periodos_AC AND NOT fhay_error_confir_periodos(idx) THEN
              -- VALIDAR QUE LOS PERIODOS DE ACREDITACION FUERON CONFIRMADOS CORRECTAMENTE (ESTADO = AC)
              --Buscamos los periodos de acreditación que no se encuentran acreditados
              SELECT COUNT(1) INTO var$existe 
              FROM SAPR_TPERIODO PERI
                INNER JOIN SAPR_GTT_TAUXILIAR AUX ON PERI.OID_PERIODO = AUX.OID_CAMPO1 AND AUX.COD_CALIFICADOR = 'TIPO_PERIODO_AC'
              WHERE PERI.OID_ESTADO_PERIODO <> var$oid_estado_periodo_AC;

              --En caso de que alguno de los períodos no fuera acreditado no seguimos procesando
              IF var$existe = 0 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$des_origen,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Índice: ' || idx || '. Todos los períodos de acreditación fueron confirmados', 
                                              par$cod_identificador   => '');

                -- Validamos que el período de acreditación fue enviado al banco
                -- Buscamos la cantidad de períodos de acreditación que no fueron enviados al banco
                SELECT COUNT(1)
                  INTO var$existe
                FROM SAPR_TPERIODO PERI
                INNER JOIN SAPR_GTT_TAUXILIAR AUX ON PERI.OID_PERIODO = AUX.OID_CAMPO1 AND COD_CALIFICADOR = 'TIPO_PERIODO_AC'
                WHERE FYH_ENVIO_BANCO IS NULL;
                  -- En caso de que alguno de los períodos NO fuera enviado al banco NO continuamos el proceso
                IF var$existe = 0 THEN
                  /*Además, sumar el "SAPR_TCALCULO_EFECTIVO.NUM_IMPORTE" de la tabla "SAPR_TCALCULO_EFECTIVO" 
                    que se identifique con los datos del "Periodo y que "SAPR_TCALCULO_EFECTIVO.COD_TIPO_CALCULO" 
                    tenga el valor "CONTABLE" agrupando por  "SAPR_TCALCULO_EFECTIVO.OID_PTO_SERVICIO". 
                    Para cada "Importe" de "Punto de Servicio" agrupado:
                      Generar un movimiento de "Acreditación" (lógica interna del servicio "AltaMovimientosAcreditacion").
                  */
                  -- GENERAR UN MOVIMIENTO DE ACREDITACION PARA CADA PUNTO DE SERVICIO
                  FOR rec$valores IN (
                        SELECT 
                        CLI.COD_CLIENTE, SCLI.COD_SUBCLIENTE, PTO.COD_PTO_SERVICIO, MAQU.COD_IDENTIFICACION, DIVI.COD_ISO_DIVISA, 
                        TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') || '_' || 
                          CASE WHEN AJEP.COD_AJENO IS NOT NULL 
                            THEN REPLACE(AJEP.COD_AJENO, '-', '') 
                            ELSE MAQU.COD_IDENTIFICACION 
                            END || '_ACCREDITATION_' || par$aidentificador(idx) AS ACTUAL_ID,
                        CASE WHEN SYSDATE BETWEEN DELE.FYH_VERANO_INICIO AND DELE.FYH_VERANO_FIN 
                          THEN DELE.NEC_GMT_MINUTOS + DELE.NEC_VERANO_AJUSTE  
                          ELSE DELE.NEC_GMT_MINUTOS 
                          END AS GMT_MINUTOS, 
                        SUM(CALC.NUM_IMPORTE) AS NUM_IMPORTE
                        FROM GEPR_TCLIENTE CLI
                        INNER JOIN GEPR_TSUBCLIENTE SCLI ON CLI.OID_CLIENTE = SCLI.OID_CLIENTE
                        INNER JOIN GEPR_TPUNTO_SERVICIO PTO ON SCLI.OID_SUBCLIENTE = PTO.OID_SUBCLIENTE
                        INNER JOIN SAPR_TCALCULO_EFECTIVO CALC ON CALC.OID_PTO_SERVICIO = PTO.OID_PTO_SERVICIO
                        INNER JOIN SAPR_TTIPO_CALCULO TCAL ON TCAL.OID_TIPO_CALCULO = CALC.OID_TIPO_CALCULO AND TCAL.COD_TIPO_CALCULO = 'CONTABLE'
                        INNER JOIN GEPR_TDIVISA DIVI ON DIVI.OID_DIVISA = CALC.OID_DIVISA
                        INNER JOIN SAPR_TMAQUINA MAQU ON MAQU.OID_MAQUINA = PTO.OID_MAQUINA
                        INNER JOIN GEPR_TSECTOR SECT ON SECT.OID_SECTOR = MAQU.OID_SECTOR
                        INNER JOIN GEPR_TPLANTA PLTA ON PLTA.OID_PLANTA = SECT.OID_PLANTA
                        INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLTA.OID_DELEGACION
                        INNER JOIN SAPR_GTT_TAUXILIAR AUX ON AUX.OID_CAMPO1 = CALC.OID_PERIODO AND AUX.COD_CALIFICADOR = 'TIPO_PERIODO_AC'
                        LEFT JOIN GEPR_TCODIGO_AJENO AJEP ON AJEP.OID_TABLA_GENESIS = PTO.OID_PTO_SERVICIO AND AJEP.COD_TIPO_TABLA_GENESIS = 'GEPR_TPUNTO_SERVICIO' AND AJEP.COD_IDENTIFICADOR = 'MAE'
                        GROUP BY  
                        CLI.COD_CLIENTE, SCLI.COD_SUBCLIENTE, PTO.COD_PTO_SERVICIO, MAQU.COD_IDENTIFICACION, 
                        TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') || '_' || CASE WHEN AJEP.COD_AJENO IS NOT NULL THEN REPLACE(AJEP.COD_AJENO, '-', '') ELSE MAQU.COD_IDENTIFICACION END || '_ACCREDITATION_' || par$aidentificador(idx),
                        CASE WHEN SYSDATE BETWEEN DELE.FYH_VERANO_INICIO AND DELE.FYH_VERANO_FIN THEN DELE.NEC_GMT_MINUTOS + DELE.NEC_VERANO_AJUSTE  ELSE DELE.NEC_GMT_MINUTOS END,
                        DIVI.COD_ISO_DIVISA
                        ORDER BY CLI.COD_CLIENTE, SCLI.COD_SUBCLIENTE, PTO.COD_PTO_SERVICIO
                  ) 
                  LOOP
                    var$aux_cantidad_valores := var$aux_cantidad_valores + 1;
                    
                    IF (var$aux_acod_cliente IS NULL OR rec$valores.COD_CLIENTE <> var$aux_acod_cliente) AND
                        (var$aux_acod_sub_cliente IS NULL OR rec$valores.COD_SUBCLIENTE <> var$aux_acod_sub_cliente)  AND 
                        (var$aux_acod_punto_servicio  IS NULL OR  rec$valores.COD_PTO_SERVICIO <> var$aux_acod_punto_servicio)
                      THEN

                      var$aux_acod_cliente        := rec$valores.COD_CLIENTE;
                      var$aux_acod_sub_cliente    := rec$valores.COD_SUBCLIENTE;
                      var$aux_acod_punto_servicio := rec$valores.COD_PTO_SERVICIO;

                      var$aux_anel_index := var$aux_anel_index + 1;
                      var$nel_divisa   := 0;

                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                          par$des_origen      => const$des_origen,
                                          par$des_version     => const$version,                            
                                          par$des_detalle     => 'Índice: ' || idx || '. Se genera var$aux_anel_index: ' || var$aux_anel_index || 
                                          ' para el cliente: ' || var$aux_acod_cliente ||
                                          ' subcliente: ' || var$aux_acod_sub_cliente ||
                                          ' punto: ' || var$aux_acod_punto_servicio 
                                          ,
                                          par$cod_identificador   => '');
                    END IF;
                    

                    var$nel_divisa   := var$nel_divisa + 1;

                    -- Almacenamos los valores para enviar al procedure sgrabar_mov_acreditacion
                    var$anel_index(var$aux_anel_index)                      := var$aux_anel_index;
                    var$acod_device_id(var$aux_anel_index)                  := rec$valores.COD_IDENTIFICACION;
                    var$acod_cliente(var$aux_anel_index)                    := rec$valores.COD_CLIENTE;
                    var$acod_sub_cliente(var$aux_anel_index)                := rec$valores.COD_SUBCLIENTE;
                    var$acod_punto_servicio(var$aux_anel_index)             := rec$valores.COD_PTO_SERVICIO;

                    var$afyh_gestion(var$aux_anel_index)                    := SYSDATE;
                    var$afyh_contable(var$aux_anel_index)                   := NULL; --Quedará automaticamente con la fecha de gestión;
                    var$acod_actual_id(var$aux_anel_index)                  := rec$valores.ACTUAL_ID; 
                    var$acod_collection_id(var$aux_anel_index)              := NULL;
                    var$acod_precinto(var$aux_anel_index)                   := idx; -- Utilizado para generar el código externo
                    var$anel_gmt_minuto(var$aux_anel_index)                 := rec$valores.GMT_MINUTOS;



                    -- Campos adicionales
                    var$avtdoc_nel_index(var$aux_anel_index)                        := var$aux_anel_index; 
                    var$avtdoc_cod_termino(var$aux_anel_index)                      := 'CODIGO_CONFIRMACION_PERIODO'; 
                    var$avtdoc_des_valor(var$aux_anel_index)                        := par$aidentificador(idx); 
                    -- Campos adicionales

                    -- Valores
                    var$adiv_nel_index(var$adiv_nel_index.count)            := var$aux_anel_index;
                    var$adiv_index(var$adiv_index.count)                    := var$nel_divisa;
                    var$aefdoc_div_index(var$aefdoc_div_index.count)        := var$nel_divisa;

                    var$aefdoc_nel_index(var$aefdoc_nel_index.count)                := var$aux_anel_index;
                    var$aefdoc_cod_divisa(var$aefdoc_cod_divisa.count)              := rec$valores.COD_ISO_DIVISA;
                    var$aefdoc_cod_denominacion(var$aefdoc_cod_denominacion.count)  := NULL;
                    var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.count)          := 0;
                    var$aefdoc_num_importe(var$aefdoc_num_importe.count)            := rec$valores.NUM_IMPORTE;
                    var$aefdoc_nel_tipo(var$aefdoc_nel_tipo.count)                  := 0; --Tipo 0 es acreditacion
                    -- Valores

                  END LOOP;

                  IF var$aux_cantidad_valores > 0 THEN
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Índice: ' || idx || '. Llamada al procedure sgrabar_mov_acreditacion',
                        par$cod_identificador   => '');

                    sgrabar_mov_acreditacion(par$oid_llamada       => par$oid_llamada,
                                              par$cod_identificador_ajeno => '',
                                              par$anel_index              => var$anel_index, --obligatorio
                                              par$acod_device_id          => var$acod_device_id, --obligatorio
                                              par$acod_cliente            => var$acod_cliente, --obligatorio
                                              par$acod_sub_cliente        => var$acod_sub_cliente, --obligatorio
                                              par$acod_punto_servicio     => var$acod_punto_servicio, --obligatorio
                                              par$afyh_gestion            => var$afyh_gestion, --obligatorio
                                              par$afyh_contable           => var$afyh_contable,
                                              par$acod_actual_id          => var$acod_actual_id, --obligatorio
                                              par$acod_collection_id      => var$acod_collection_id,
                                              par$acod_precinto           => var$acod_precinto,
                                              par$anel_gmt_minuto         => var$anel_gmt_minuto,
                                              par$avtdoc_nel_index        => var$avtdoc_nel_index,
                                              par$avtdoc_cod_termino      => var$avtdoc_cod_termino,
                                              par$avtdoc_des_valor        => var$avtdoc_des_valor,
                                              par$adiv_nel_index          => var$adiv_nel_index,
                                              par$adiv_index              => var$adiv_index,
                                              par$aefdoc_div_index        => var$aefdoc_div_index,
                                              par$aefdoc_nel_index        => var$aefdoc_nel_index,
                                              par$aefdoc_cod_divisa       => var$aefdoc_cod_divisa, --obligatorio
                                              par$aefdoc_cod_denominacion => var$aefdoc_cod_denominacion,
                                              par$aefdoc_nel_cantidad     => var$aefdoc_nel_cantidad,
                                              par$aefdoc_num_importe      => var$aefdoc_num_importe, --obligatorio
                                              par$aefdoc_nel_tipo         => var$aefdoc_nel_tipo, 
                                              par$info_ejecucion          => '',
                                              par$cod_usuario             => par$cod_usuario,
                                              par$cod_cultura             => par$cod_cultura,
                                              par$cod_pais                => par$cod_pais,
                                              par$hacer_commit            => false,
                                              par$rc_validaciones         => var$rc_validaciones,
                                              par$rc_planificaciones      => var$rc_planificaciones,
                                              par$rc_documentos           => var$rc_documentos,
                                              par$cod_ejecucion           => var$cod_ejecucion);

                    -- Verificamos la tabla auxiliar SAPR_GTT_TAUXILIAR para ver si hay errores en sgrabar_mov_acreditacion
                    --* Buscando por el NEL_INDEX
                    FOR idx2 IN var$anel_index.first .. var$anel_index.last LOOP
                      IF fhay_error(par$nel_index => var$anel_index(idx2)) THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Índice: ' || idx || '. Hay errores en la llamada al procedure sgrabar_mov_acreditacion de nel_index: ' || var$anel_index(idx2),
                                  par$cod_identificador   => '');

                        -- Guardamos las validaciones con el COD_CALIFICADOR del servicio
                        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CAMPO4, NEL_CAMPO5, COD_CALIFICADOR)
                        SELECT  par$adevice_id(idx), par$aidentificador(idx), COD_CAMPO3, COD_CAMPO2, idx, 'VALIDACIONES_FECHA_CONFIRMAR'
                        FROM SAPR_GTT_TAUXILIAR
                        WHERE COD_CALIFICADOR = 'VALIDACIONES' AND OID_CAMPO1 = var$anel_index(idx2) AND COD_CAMPO2 NOT LIKE '0040__0000';
                      END IF;
                    END LOOP;
                  END IF;

                  /* Verificamos si hay errores en la ejecución del procedure sgrabar_mov_acreditacion*/
                  DBMS_OUTPUT.PUT_LINE('Verificamos si hay errores en la ejecución del procedure sgrabar_mov_acreditacion');
                  -- Busco si hay errores previos
                  IF NOT fhay_error_confir_periodos(idx) THEN
                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                      par$des_origen      => const$des_origen,
                      par$des_version     => const$version,                            
                      par$des_detalle     => 'Índice: ' || idx || '. NO Hay errores en la llamada al procedure sgrabar_mov_acreditacion',
                      par$cod_identificador   => '');


                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                                    par$des_origen      => const$des_origen,
                                                    par$des_version     => const$version,                            
                                                    par$des_detalle     => 'Índice: ' || idx || '. Tratamiento de períodos de recojo en la confirmación de períodos de acreditación', 
                                                    par$cod_identificador   => '');
                    -- Verificar que los períodos de acreditación relacionados al período de recojo fueron confirmados correctamente
                    --_ PERIODOS DE RECOJO
                    FOR rec$periodos_recojo IN (
                      -- BUSCAR PERIODOS PENDIENTES DE ACREDITACION RELACIONADOS A LOS PERIODOS DE RECOJO
                      -- PERIODO DE RECOJO       = SAPR_TPERIODO_RELACION.OID_PERIODO
                      -- PERIODO DE ACREDITACION = SAPR_TPERIODO_RELACION.OID_PERIODO_RELACIONADO
                      SELECT PERE.OID_PERIODO, COUNT(ESPE.OID_ESTADO_PERIODO) AS CANTIDAD
                      FROM SAPR_TPERIODO_RELACION PERE
                      INNER JOIN SAPR_TPERIODO PERI ON PERE.OID_PERIODO_RELACIONADO = PERI.OID_PERIODO
                      INNER JOIN SAPR_TTIPO_PERIODO TIPE ON TIPE.OID_TIPO_PERIODO = PERI.OID_TIPO_PERIODO AND TIPE.COD_TIPO_PERIODO = 'AC'
                      LEFT JOIN SAPR_TESTADO_PERIODO ESPE ON ESPE.OID_ESTADO_PERIODO = PERI.OID_ESTADO_PERIODO AND ESPE.OID_ESTADO_PERIODO <> var$oid_estado_periodo_AC
                      WHERE PERE.OID_PERIODO IN (
                        -- BUSCAR PERIODOS DE RECOJO RELACIONADOS AL DE ACREDITACION
                        SELECT PERI.OID_PERIODO
                        FROM SAPR_TPERIODO_RELACION PERE
                        INNER JOIN SAPR_GTT_TAUXILIAR AUX ON AUX.OID_CAMPO1 = PERE.OID_PERIODO_RELACIONADO AND AUX.COD_CALIFICADOR = 'TIPO_PERIODO_AC'
                        INNER JOIN SAPR_TPERIODO PERI ON PERI.OID_PERIODO = PERE.OID_PERIODO
                        INNER JOIN SAPR_TTIPO_PERIODO TIPE ON TIPE.OID_TIPO_PERIODO = PERI.OID_TIPO_PERIODO AND TIPE.COD_TIPO_PERIODO = 'RE'
                        WHERE PERI.OID_ESTADO_PERIODO = var$oid_estado_periodo_EC AND PERI.FYH_FIN IS NOT NULL
                      ) 
                      GROUP BY PERE.OID_PERIODO
                    )
                    LOOP
                      
                      IF rec$periodos_recojo.CANTIDAD = 0 THEN
                        -- PARA EL PERIODO DE RECOJO, TODOS LOS PERIODOS DE ACREDITACION ESTAN CONFIRMADOS
                        var$oid_periodo := rec$periodos_recojo.OID_PERIODO;

                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                      par$des_origen      => const$des_origen,
                                      par$des_version     => const$version,                            
                                      par$des_detalle     => 'Índice: ' || idx || '. Se actualiza período de recojo de OID_PERIODO: ' ||
                                                              var$oid_periodo || ' al estado abierto', 
                                      par$cod_identificador   => '');

                        SAPR_PPERIODO_###VERSION###.sins_upd_tperiodo(par$oid_llamada               => par$oid_llamada,
                                                                      par$oid_periodo               => var$oid_periodo,
                                                                      par$oid_planificacion         => NULL,
                                                                      par$oid_maquina               => NULL,
                                                                      par$oid_estado_periodo        => var$oid_estado_periodo_AB,
                                                                      par$fyh_inicio                => NULL,
                                                                      par$fyh_fin                   => NULL,
                                                                      par$oid_tipo_periodo          => NULL,
                                                                      par$cod_periodo_confirmacion  => NULL,
                                                                      par$cod_usuario               => par$cod_usuario);
                      ELSE
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Índice: ' || idx || '. Los períodos de acreditación relacionados al período de recojo de OID_PERIODO: ' ||
                                                rec$periodos_recojo.OID_PERIODO || ' no se encuentran confirmados', 
                        par$cod_identificador   => '');
                      END IF;
                    END LOOP;
                  END IF; 
                ELSE
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                    par$des_origen      => const$des_origen,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Índice: ' || idx || '. Existen períodos que no fueron enviados al banco para MAQ.COD_IDENTIFICACION: ' || par$adevice_id(idx) || ' y PER.COD_PERIODO_CONFIRMACION: ' || par$aidentificador(idx), 
                    par$cod_identificador   => '');

                  /*Buscamos el mensaje traducido*/
                  /*2040340007 - Ocurrió un error al confirmar el período con el DeviceID "{0}" y el Identificador "{1}": {2}*/
                  var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040340007',
                                                                'CONFIRMARPERIODOS',
                                                                gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                                                par$adevice_id(idx) || '|' || par$aidentificador(idx) || '|' || 'Existen períodos que no fueron enviados al banco',
                                                                0);

                  INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CAMPO4, NEL_CAMPO5, COD_CALIFICADOR)
                  VALUES (par$adevice_id(idx), par$aidentificador(idx),var$mensaje , '2040340007', idx, 'VALIDACIONES_FECHA_CONFIRMAR');

                END IF;
              ELSE
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$des_origen,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Índice: ' || idx || '. No todos los períodos de acreditación fueron acreditados', 
                                              par$cod_identificador   => '');
              END IF;
            END IF;
          

            --* CONFIRMACION PERIODOS DE RECOJO
            var$hay_periodos_RE := FALSE;
            FOR rec$periodo_recojo IN (
              SELECT 	OID_CAMPO1 AS OID_PERIODO,
                      COD_CAMPO2 AS IDENTIFICADOR,
                      COD_CAMPO3 AS CODIGO_MENSAJE,
                      COD_CAMPO4 AS FECHA_HORA,
                      NEL_CAMPO5 AS INTENTOS_CONFIRMACION,
                      COD_CAMPO8 AS DEVICEID,
                      COD_CAMPO9 AS COD_CONFIRMACION
                FROM SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR = 'TIPO_PERIODO_RE' ORDER BY NEL_CAMPO6)
            LOOP
              -- Verificar que los períodos de acreditación fueron confirmados correctamente
              -- Realizo la búsqueda de los períodos de acreditacion relacionados al período de recojo que esten en un estado distinto al de AC
              -- PERIODO DE RECOJO       = SAPR_TPERIODO_RELACION.OID_PERIODO
              -- PERIODO DE ACREDITACION = SAPR_TPERIODO_RELACION.OID_PERIODO_RELACIONADO
              SELECT COUNT(1) INTO var$existe 
              FROM SAPR_TPERIODO PERI
              INNER JOIN SAPR_TTIPO_PERIODO TIPE ON TIPE.OID_TIPO_PERIODO = PERI.OID_TIPO_PERIODO AND TIPE.COD_TIPO_PERIODO = 'AC'
              INNER JOIN SAPR_TPERIODO_RELACION PERE ON PERE.OID_PERIODO_RELACIONADO = PERI.OID_PERIODO
              WHERE PERE.OID_PERIODO = rec$periodo_recojo.OID_PERIODO AND PERI.OID_ESTADO_PERIODO <> var$oid_estado_periodo_AC;

              -- En caso de que ningún período falte confirmar, sigo procesando
              IF var$existe = 0 THEN
                var$hay_periodos_RE := TRUE;
                
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                    par$des_origen      => const$des_origen,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Índice: ' || idx || '. Llamada al procedure sconfirmar_periodos_re para el OID_PERIODO: ' || rec$periodo_recojo.OID_PERIODO, 
                    par$cod_identificador   => '');

                sconfirmar_periodos_re( par$oid_llamada           => par$oid_llamada,
                                        par$oid_periodo           => rec$periodo_recojo.OID_PERIODO,
                                        par$cod_identificador     => rec$periodo_recojo.IDENTIFICADOR,
                                        par$cod_device_id         => rec$periodo_recojo.DEVICEID,
                                        par$cod_mensaje           => rec$periodo_recojo.CODIGO_MENSAJE,
                                        par$cod_confirmacion      => rec$periodo_recojo.COD_CONFIRMACION,
                                        par$fecha_hora            => TO_DATE(rec$periodo_recojo.FECHA_HORA, 'YYYY-MM-DD HH24:MI:SS'),
                                        par$intentos_confirmacion => rec$periodo_recojo.INTENTOS_CONFIRMACION,
                                        par$max_intentos_confir   => var$max_reintentos,
                                        par$oid_estado_periodo_CF => var$oid_estado_periodo_CF,
                                        par$oid_estado_periodo_RE => var$oid_estado_periodo_RE,
                                        par$oid_estado_periodo_NC => var$oid_estado_periodo_NC,
                                        par$cod_usuario           => par$cod_usuario
                                        );

              ELSE
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Índice: ' || idx || '. Los períodos de acreditación relacionados al período de recojo de OID_PERIODO: ' ||
                                                          rec$periodo_recojo.OID_PERIODO || ' no se encuentran confirmados', 
                                  par$cod_identificador   => '');
              END IF;
            END LOOP;
            IF var$hay_periodos_RE AND NOT fhay_error_confir_periodos(idx) THEN
              -- VALIDAR QUE LOS PERIODOS DE RECOJO FUERON CONFIRMADOS CORRECTAMENTE (ESTADO = CF)
              --Buscamos los periodos de recojo que no se encuentran confirmados
              SELECT COUNT(1) INTO var$existe 
              FROM SAPR_TPERIODO PERI
                INNER JOIN SAPR_GTT_TAUXILIAR AUX ON PERI.OID_PERIODO = AUX.OID_CAMPO1 AND AUX.COD_CALIFICADOR = 'TIPO_PERIODO_RE'
              WHERE PERI.OID_ESTADO_PERIODO <> var$oid_estado_periodo_CF;

              --En caso de que alguno de los períodos no fuera confirmado no seguimos procesando
              IF var$existe = 0 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$des_origen,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Índice: ' || idx || '. Todos los períodos de recojo fueron confirmados', 
                                              par$cod_identificador   => '');
                -- GENERAR UN MOVIMIENTO DE RECOJO PARA CADA PUNTO DE SERVICIO
                FOR rec$valores IN (
                      SELECT 
                      CLI.COD_CLIENTE, SCLI.COD_SUBCLIENTE, PTO.COD_PTO_SERVICIO, MAQU.COD_IDENTIFICACION, DIVI.COD_ISO_DIVISA, 
                      TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') || '_' || 
                        CASE WHEN AJEP.COD_AJENO IS NOT NULL 
                          THEN REPLACE(AJEP.COD_AJENO, '-', '') 
                          ELSE MAQU.COD_IDENTIFICACION 
                          END || '_RECOJO_' ||  par$aidentificador(idx) || '_' ||  ROWNUM AS ACTUAL_ID,
                      CASE WHEN SYSDATE BETWEEN DELE.FYH_VERANO_INICIO AND DELE.FYH_VERANO_FIN 
                        THEN DELE.NEC_GMT_MINUTOS + DELE.NEC_VERANO_AJUSTE  
                        ELSE DELE.NEC_GMT_MINUTOS 
                        END AS GMT_MINUTOS, 
                      SUM(CALC.NUM_IMPORTE) AS NUM_IMPORTE
                      FROM GEPR_TCLIENTE CLI
                      INNER JOIN GEPR_TSUBCLIENTE SCLI ON CLI.OID_CLIENTE = SCLI.OID_CLIENTE
                      INNER JOIN GEPR_TPUNTO_SERVICIO PTO ON SCLI.OID_SUBCLIENTE = PTO.OID_SUBCLIENTE
                      INNER JOIN SAPR_TCALCULO_EFECTIVO CALC ON CALC.OID_PTO_SERVICIO = PTO.OID_PTO_SERVICIO
                      INNER JOIN SAPR_TTIPO_CALCULO TCAL ON TCAL.OID_TIPO_CALCULO = CALC.OID_TIPO_CALCULO AND TCAL.COD_TIPO_CALCULO = 'CONTABLE'
                      INNER JOIN GEPR_TDIVISA DIVI ON DIVI.OID_DIVISA = CALC.OID_DIVISA
                      INNER JOIN SAPR_TMAQUINA MAQU ON MAQU.OID_MAQUINA = PTO.OID_MAQUINA
                      INNER JOIN GEPR_TSECTOR SECT ON SECT.OID_SECTOR = MAQU.OID_SECTOR
                      INNER JOIN GEPR_TPLANTA PLTA ON PLTA.OID_PLANTA = SECT.OID_PLANTA
                      INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLTA.OID_DELEGACION
                      INNER JOIN SAPR_GTT_TAUXILIAR AUX ON AUX.OID_CAMPO1 = CALC.OID_PERIODO AND AUX.COD_CALIFICADOR = 'TIPO_PERIODO_RE'
                      LEFT JOIN GEPR_TCODIGO_AJENO AJEP ON AJEP.OID_TABLA_GENESIS = PTO.OID_PTO_SERVICIO AND AJEP.COD_TIPO_TABLA_GENESIS = 'GEPR_TPUNTO_SERVICIO' AND AJEP.COD_IDENTIFICADOR = 'MAE'
                      GROUP BY  
                      CLI.COD_CLIENTE, SCLI.COD_SUBCLIENTE, PTO.COD_PTO_SERVICIO, MAQU.COD_IDENTIFICACION, 
                      TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') || '_' || CASE WHEN AJEP.COD_AJENO IS NOT NULL THEN REPLACE(AJEP.COD_AJENO, '-', '') ELSE MAQU.COD_IDENTIFICACION END || '_RECOJO_' ||  par$aidentificador(idx) || '_' ||  ROWNUM,
                      CASE WHEN SYSDATE BETWEEN DELE.FYH_VERANO_INICIO AND DELE.FYH_VERANO_FIN THEN DELE.NEC_GMT_MINUTOS + DELE.NEC_VERANO_AJUSTE  ELSE DELE.NEC_GMT_MINUTOS END,
                      DIVI.COD_ISO_DIVISA
                      ORDER BY CLI.COD_CLIENTE, SCLI.COD_SUBCLIENTE, PTO.COD_PTO_SERVICIO
                ) 
                LOOP
                  var$aux_cantidad_valores := var$aux_cantidad_valores + 1;

                  -- Variable utilizada para la generación del código externo de los documentos
                  var$nel_precinto := var$nel_precinto + 1;

                  IF (var$aux_acod_cliente IS NULL OR rec$valores.COD_CLIENTE <> var$aux_acod_cliente) AND
                      (var$aux_acod_sub_cliente IS NULL OR rec$valores.COD_SUBCLIENTE <> var$aux_acod_sub_cliente)  AND 
                      (var$aux_acod_punto_servicio  IS NULL OR  rec$valores.COD_PTO_SERVICIO <> var$aux_acod_punto_servicio)
                    THEN

                    var$aux_acod_cliente        := rec$valores.COD_CLIENTE;
                    var$aux_acod_sub_cliente    := rec$valores.COD_SUBCLIENTE;
                    var$aux_acod_punto_servicio := rec$valores.COD_PTO_SERVICIO;

                    var$aux_anel_index := var$aux_anel_index + 1;

                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$des_origen,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Índice: ' || idx || '. Se genera var$aux_anel_index: ' || var$aux_anel_index || 
                                        ' para el cliente: ' || var$aux_acod_cliente ||
                                        ' subcliente: ' || var$aux_acod_sub_cliente ||
                                        ' punto: ' || var$aux_acod_punto_servicio 
                                        ,
                                        par$cod_identificador   => '');
                  END IF;
                

                  -- Almacenamos los valores para enviar al procedure sgrabar_mov_recojo
                  var$anel_index(var$aux_anel_index)                      := var$aux_anel_index;
                  var$acod_device_id(var$aux_anel_index)                  := rec$valores.COD_IDENTIFICACION;
                  var$acod_cliente(var$aux_anel_index)                    := rec$valores.COD_CLIENTE;
                  var$acod_sub_cliente(var$aux_anel_index)                := rec$valores.COD_SUBCLIENTE;
                  var$acod_punto_servicio(var$aux_anel_index)             := rec$valores.COD_PTO_SERVICIO;

                  var$afyh_gestion(var$aux_anel_index)                    := SYSDATE;
                  var$afyh_contable(var$aux_anel_index)                   := NULL; --Quedará automaticamente con la fecha de gestión;
                  var$acod_actual_id(var$aux_anel_index)                  := rec$valores.ACTUAL_ID; 
                  var$acod_collection_id(var$aux_anel_index)              := NULL;
                  var$acod_precinto(var$aux_anel_index)                   := var$nel_precinto; -- Utilizado para generar el código externo
                  var$anel_gmt_minuto(var$aux_anel_index)                 := rec$valores.GMT_MINUTOS;

                  var$avtdoc_nel_index(var$aux_anel_index)                        := var$aux_anel_index; -- Campos adicionales
                  var$avtdoc_cod_termino(var$aux_anel_index)                      := 'CODIGO_CONFIRMACION_PERIODO'; -- Campos adicionales
                  var$avtdoc_des_valor(var$aux_anel_index)                        := par$aidentificador(idx); -- Campos adicionales
                  var$aefdoc_nel_index(var$aefdoc_nel_index.count)                := var$aux_anel_index;
                  var$aefdoc_cod_divisa(var$aefdoc_cod_divisa.count)              := rec$valores.COD_ISO_DIVISA;
                  var$aefdoc_cod_denominacion(var$aefdoc_cod_denominacion.count)  := NULL;
                  var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.count)          := 0;
                  var$aefdoc_num_importe(var$aefdoc_num_importe.count)            := rec$valores.NUM_IMPORTE;
                END LOOP;

                IF var$aux_cantidad_valores > 0 THEN
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                      par$des_origen      => const$des_origen,
                      par$des_version     => const$version,                            
                      par$des_detalle     => 'Índice: ' || idx || '. Llamada al procedure sgrabar_mov_recojo',
                      par$cod_identificador   => '');

                  sgrabar_mov_recojo( par$oid_llamada       => par$oid_llamada,
                                      par$cod_identificador_ajeno => '',
                                      par$anel_index              => var$anel_index, --obligatorio
                                      par$acod_device_id          => var$acod_device_id, --obligatorio
                                      par$acod_cliente            => var$acod_cliente, --obligatorio
                                      par$acod_sub_cliente        => var$acod_sub_cliente, --obligatorio
                                      par$acod_punto_servicio     => var$acod_punto_servicio, --obligatorio
                                      par$afyh_gestion            => var$afyh_gestion, --obligatorio
                                      par$afyh_contable           => var$afyh_contable,
                                      par$acod_actual_id          => var$acod_actual_id, --obligatorio
                                      par$acod_collection_id      => var$acod_collection_id,
                                      par$acod_precinto           => var$acod_precinto,
                                      par$anel_gmt_minuto         => var$anel_gmt_minuto,
                                      par$avtdoc_nel_index        => var$avtdoc_nel_index,
                                      par$avtdoc_cod_termino      => var$avtdoc_cod_termino,
                                      par$avtdoc_des_valor        => var$avtdoc_des_valor,
                                      par$aefdoc_nel_index        => var$aefdoc_nel_index,
                                      par$aefdoc_cod_divisa       => var$aefdoc_cod_divisa, --obligatorio
                                      par$aefdoc_cod_denominacion => var$aefdoc_cod_denominacion,
                                      par$aefdoc_nel_cantidad     => var$aefdoc_nel_cantidad,
                                      par$aefdoc_num_importe      => var$aefdoc_num_importe, --obligatorio
                                      par$info_ejecucion          => '',
                                      par$cod_usuario             => par$cod_usuario,
                                      par$cod_cultura             => par$cod_cultura,
                                      par$cod_pais                => par$cod_pais,
                                      par$hacer_commit            => false,
                                      par$rc_validaciones         => var$rc_validaciones,
                                      par$rc_planificaciones      => var$rc_planificaciones,
                                      par$rc_documentos           => var$rc_documentos,
                                      par$cod_ejecucion           => var$cod_ejecucion);

                  -- Verificamos la tabla auxiliar SAPR_GTT_TAUXILIAR para ver si hay errores en sgrabar_mov_recojo
                  --* Buscando por el NEL_INDEX
                  FOR idx2 IN var$anel_index.first .. var$anel_index.last LOOP
                    IF fhay_error(par$nel_index => var$anel_index(idx2)) THEN
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$des_origen,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Índice: ' || idx || '. Hay errores en la llamada al procedure sgrabar_mov_recojo de nel_index: ' || var$anel_index(idx2),
                                par$cod_identificador   => '');

                      -- Guardamos las validaciones con el COD_CALIFICADOR del servicio
                      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CAMPO4, NEL_CAMPO5, COD_CALIFICADOR)
                      SELECT  par$adevice_id(idx), par$aidentificador(idx), COD_CAMPO3, COD_CAMPO2, idx, 'VALIDACIONES_FECHA_CONFIRMAR'
                      FROM SAPR_GTT_TAUXILIAR
                      WHERE COD_CALIFICADOR = 'VALIDACIONES' AND OID_CAMPO1 = var$anel_index(idx2) AND COD_CAMPO2 NOT LIKE '0040__0000';
                    END IF;
                  END LOOP;
                END IF;

                /* Verificamos si hay errores en la ejecución del procedure sgrabar_mov_recojo*/
                DBMS_OUTPUT.PUT_LINE('Verificamos si hay errores en la ejecución del procedure sgrabar_mov_recojo');
                -- Busco si hay errores previos
                IF NOT fhay_error_confir_periodos(idx) THEN
                  
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                    par$des_origen      => const$des_origen,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Índice: ' || idx || '. NO Hay errores en la llamada al procedure sgrabar_mov_recojo',
                    par$cod_identificador   => '');


                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                    par$des_origen      => const$des_origen,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Índice: ' || idx || '. Tratamiento de períodos de bóveda en la confirmación de períodos de recojo', 
                    par$cod_identificador   => '');

                  -- Verificar que existan períodos de bóveda relacionados al periodo de recojo confirmado
                  --_ PERIODOS DE BOVEDA
                  FOR rec$periodo_boveda IN (
                      -- BUSCAR PERIODOS DE BOVEDA RELACIONADOS AL DE RECOJO QUE SE ENCUENTREN EN ESTADO EN CREACION Y CON FECHA FIN
                      -- PERIODO DE BOVEDA       = SAPR_TPERIODO_RELACION.OID_PERIODO
                      -- PERIODO DE RECOJO       = SAPR_TPERIODO_RELACION.OID_PERIODO_RELACIONADO
                      SELECT PERI.OID_PERIODO
                      FROM SAPR_TPERIODO_RELACION PERE
                      INNER JOIN SAPR_GTT_TAUXILIAR AUX ON AUX.OID_CAMPO1 = PERE.OID_PERIODO_RELACIONADO AND AUX.COD_CALIFICADOR = 'TIPO_PERIODO_RE'
                      INNER JOIN SAPR_TPERIODO PERI ON PERI.OID_PERIODO = PERE.OID_PERIODO
                      INNER JOIN SAPR_TTIPO_PERIODO TIPE ON TIPE.OID_TIPO_PERIODO = PERI.OID_TIPO_PERIODO AND TIPE.COD_TIPO_PERIODO = 'BO'
                      WHERE PERI.OID_ESTADO_PERIODO = var$oid_estado_periodo_EC AND PERI.FYH_FIN IS NOT NULL
                    ) 
                  LOOP
                    var$oid_periodo := rec$periodo_boveda.OID_PERIODO;

                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Índice: ' || idx || '. Se actualiza período de bóveda de OID_PERIODO: ' ||
                                                          var$oid_periodo || ' al estado abierto', 
                                  par$cod_identificador   => '');

                    SAPR_PPERIODO_###VERSION###.sins_upd_tperiodo(par$oid_llamada               => par$oid_llamada,
                                                                  par$oid_periodo               => var$oid_periodo,
                                                                  par$oid_planificacion         => NULL,
                                                                  par$oid_maquina               => NULL,
                                                                  par$oid_estado_periodo        => var$oid_estado_periodo_AB,
                                                                  par$fyh_inicio                => NULL,
                                                                  par$fyh_fin                   => NULL,
                                                                  par$oid_tipo_periodo          => NULL,
                                                                  par$cod_periodo_confirmacion  => NULL,
                                                                  par$cod_usuario               => par$cod_usuario);
                  END LOOP;
                END IF;

              ELSE
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$des_origen,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Índice: ' || idx || '. No todos los períodos de recojo fueron confirmados', 
                                              par$cod_identificador   => '');
              END IF;


            END IF;

            --* CONFIRMACION PERIODOS DE BOVEDA
            -- Limpiamos variable
            var$hay_periodos_BO := FALSE;
            FOR rec$periodo_boveda IN (
              SELECT 	OID_CAMPO1 AS OID_PERIODO,
                      COD_CAMPO2 AS IDENTIFICADOR,
                      COD_CAMPO3 AS CODIGO_MENSAJE,
                      COD_CAMPO4 AS FECHA_HORA,
                      NEL_CAMPO5 AS INTENTOS_CONFIRMACION,
                      COD_CAMPO8 AS DEVICEID,
                      COD_CAMPO9 AS COD_CONFIRMACION
                FROM SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR = 'TIPO_PERIODO_BO' ORDER BY NEL_CAMPO6)
            LOOP
              -- Verificar que los períodos de recojo fueron confirmados correctamente
              -- Realizo la búsqueda de los períodos de recojo relacionados al período de bóveda que esten en un estado distinto al de CF
              -- PERIODO DE BOVEDA      = SAPR_TPERIODO_RELACION.OID_PERIODO
              -- PERIODO DE RECOJO      = SAPR_TPERIODO_RELACION.OID_PERIODO_RELACIONADO
              SELECT COUNT(1) INTO var$existe 
              FROM SAPR_TPERIODO PERI
              INNER JOIN SAPR_TTIPO_PERIODO TIPE ON TIPE.OID_TIPO_PERIODO = PERI.OID_TIPO_PERIODO AND TIPE.COD_TIPO_PERIODO = 'RE'
              INNER JOIN SAPR_TPERIODO_RELACION PERE ON PERE.OID_PERIODO_RELACIONADO = PERI.OID_PERIODO
              WHERE PERE.OID_PERIODO = rec$periodo_boveda.OID_PERIODO AND PERI.OID_ESTADO_PERIODO <> var$oid_estado_periodo_CF;

              -- En caso de que ningún período falte confirmar, sigo procesando
              IF var$existe = 0 THEN
                var$hay_periodos_BO := TRUE;

                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                              par$des_origen      => const$des_origen,
                              par$des_version     => const$version,                            
                              par$des_detalle     => 'Índice: ' || idx || '. Llamada al procedure sconfirmar_periodos_bo para el OID_PERIODO: ' || rec$periodo_boveda.OID_PERIODO, 
                              par$cod_identificador   => '');

                sconfirmar_periodos_bo( par$oid_llamada           => par$oid_llamada,
                                        par$oid_periodo           => rec$periodo_boveda.OID_PERIODO,
                                        par$cod_identificador     => rec$periodo_boveda.IDENTIFICADOR,
                                        par$cod_device_id         => rec$periodo_boveda.DEVICEID,
                                        par$cod_mensaje           => rec$periodo_boveda.CODIGO_MENSAJE,
                                        par$cod_confirmacion      => rec$periodo_boveda.COD_CONFIRMACION,
                                        par$fecha_hora            => TO_DATE(rec$periodo_boveda.FECHA_HORA, 'YYYY-MM-DD HH24:MI:SS'),
                                        par$intentos_confirmacion => rec$periodo_boveda.INTENTOS_CONFIRMACION,
                                        par$max_intentos_confir   => var$max_reintentos,
                                        par$oid_estado_periodo_CF => var$oid_estado_periodo_CF,
                                        par$oid_estado_periodo_RE => var$oid_estado_periodo_RE,
                                        par$oid_estado_periodo_NC => var$oid_estado_periodo_NC,
                                        par$cod_usuario           => par$cod_usuario
                                        );

              ELSE
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                  par$des_origen      => const$des_origen,
                                  par$des_version     => const$version,                            
                                  par$des_detalle     => 'Índice: ' || idx || '. Los períodos de recojo relacionados al período de bóveda de OID_PERIODO: ' ||
                                                          rec$periodo_boveda.OID_PERIODO || ' no se encuentran confirmados', 
                                  par$cod_identificador   => '');

                /*Buscamos el mensaje traducido*/
                /*2040340008 -  El período de DeviceID "{0}" e Identificador "{1}"  posee períodos de recojo relacionados que no se encuentran confirmados.*/
                var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040340008',
                                                              'CONFIRMARPERIODOS',
                                                              gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                                              par$adevice_id(idx) || '|' || par$aidentificador(idx),
                                                              0);

                INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CAMPO4,  NEL_CAMPO5, COD_CALIFICADOR)
                VALUES (par$adevice_id(idx), par$aidentificador(idx),var$mensaje , '2040340008', idx, 'VALIDACIONES_FECHA_CONFIRMAR');

              END IF;
            END LOOP;
            
            IF var$hay_periodos_BO AND NOT fhay_error_confir_periodos(idx) THEN
              -- VALIDAR QUE LOS PERIODOS DE BOVEDA FUERON CONFIRMADOS CORRECTAMENTE (ESTADO = CF)
              --Buscamos los periodos de bóveda que no se encuentran confirmados
              SELECT COUNT(1) INTO var$existe 
              FROM SAPR_TPERIODO PERI
                INNER JOIN SAPR_GTT_TAUXILIAR AUX ON PERI.OID_PERIODO = AUX.OID_CAMPO1 AND AUX.COD_CALIFICADOR = 'TIPO_PERIODO_BO'
              WHERE PERI.OID_ESTADO_PERIODO <> var$oid_estado_periodo_CF;

              --En caso de que alguno de los períodos no fuera confirmado no seguimos procesando
              IF var$existe = 0 THEN
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$des_origen,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Índice: ' || idx || '. Todos los períodos de bóveda fueron confirmados', 
                                              par$cod_identificador   => '');
              
                -- GENERAR UN MOVIMIENTO DE BOVEDA PARA CADA PUNTO DE SERVICIO
                FOR rec$valores IN (
                      SELECT 
                      CLI.COD_CLIENTE, SCLI.COD_SUBCLIENTE, PTO.COD_PTO_SERVICIO, MAQU.COD_IDENTIFICACION, DIVI.COD_ISO_DIVISA, 
                      TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') || '_' || 
                        CASE WHEN AJEP.COD_AJENO IS NOT NULL 
                          THEN REPLACE(AJEP.COD_AJENO, '-', '') 
                          ELSE MAQU.COD_IDENTIFICACION 
                          END || '_BOVEDA_' || par$aidentificador(idx) || '_' || ROWNUM AS ACTUAL_ID,
                      CASE WHEN SYSDATE BETWEEN DELE.FYH_VERANO_INICIO AND DELE.FYH_VERANO_FIN 
                        THEN DELE.NEC_GMT_MINUTOS + DELE.NEC_VERANO_AJUSTE  
                        ELSE DELE.NEC_GMT_MINUTOS 
                        END AS GMT_MINUTOS, 
                      SUM(CALC.NUM_IMPORTE) AS NUM_IMPORTE
                      FROM GEPR_TCLIENTE CLI
                      INNER JOIN GEPR_TSUBCLIENTE SCLI ON CLI.OID_CLIENTE = SCLI.OID_CLIENTE
                      INNER JOIN GEPR_TPUNTO_SERVICIO PTO ON SCLI.OID_SUBCLIENTE = PTO.OID_SUBCLIENTE
                      INNER JOIN SAPR_TCALCULO_EFECTIVO CALC ON CALC.OID_PTO_SERVICIO = PTO.OID_PTO_SERVICIO
                      INNER JOIN SAPR_TTIPO_CALCULO TCAL ON TCAL.OID_TIPO_CALCULO = CALC.OID_TIPO_CALCULO AND TCAL.COD_TIPO_CALCULO = 'CONTABLE'
                      INNER JOIN GEPR_TDIVISA DIVI ON DIVI.OID_DIVISA = CALC.OID_DIVISA
                      INNER JOIN SAPR_TMAQUINA MAQU ON MAQU.OID_MAQUINA = PTO.OID_MAQUINA
                      INNER JOIN GEPR_TSECTOR SECT ON SECT.OID_SECTOR = MAQU.OID_SECTOR
                      INNER JOIN GEPR_TPLANTA PLTA ON PLTA.OID_PLANTA = SECT.OID_PLANTA
                      INNER JOIN GEPR_TDELEGACION DELE ON DELE.OID_DELEGACION = PLTA.OID_DELEGACION
                      INNER JOIN SAPR_GTT_TAUXILIAR AUX ON AUX.OID_CAMPO1 = CALC.OID_PERIODO AND AUX.COD_CALIFICADOR = 'TIPO_PERIODO_BO'
                      LEFT JOIN GEPR_TCODIGO_AJENO AJEP ON AJEP.OID_TABLA_GENESIS = PTO.OID_PTO_SERVICIO AND AJEP.COD_TIPO_TABLA_GENESIS = 'GEPR_TPUNTO_SERVICIO' AND AJEP.COD_IDENTIFICADOR = 'MAE'
                      GROUP BY  
                      CLI.COD_CLIENTE, SCLI.COD_SUBCLIENTE, PTO.COD_PTO_SERVICIO, MAQU.COD_IDENTIFICACION, 
                      TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') || '_' || CASE WHEN AJEP.COD_AJENO IS NOT NULL THEN REPLACE(AJEP.COD_AJENO, '-', '') ELSE MAQU.COD_IDENTIFICACION END || '_BOVEDA_' || par$aidentificador(idx) || '_' || ROWNUM,
                      CASE WHEN SYSDATE BETWEEN DELE.FYH_VERANO_INICIO AND DELE.FYH_VERANO_FIN THEN DELE.NEC_GMT_MINUTOS + DELE.NEC_VERANO_AJUSTE  ELSE DELE.NEC_GMT_MINUTOS END,
                      DIVI.COD_ISO_DIVISA
                      ORDER BY CLI.COD_CLIENTE, SCLI.COD_SUBCLIENTE, PTO.COD_PTO_SERVICIO
                ) 
                LOOP
                  var$aux_cantidad_valores := var$aux_cantidad_valores + 1;

                  -- Variable utilizada para la generación del código externo de los documentos
                  var$nel_precinto := var$nel_precinto + 1;

                  IF (var$aux_acod_cliente IS NULL OR rec$valores.COD_CLIENTE <> var$aux_acod_cliente) AND
                      (var$aux_acod_sub_cliente IS NULL OR rec$valores.COD_SUBCLIENTE <> var$aux_acod_sub_cliente)  AND 
                      (var$aux_acod_punto_servicio  IS NULL OR  rec$valores.COD_PTO_SERVICIO <> var$aux_acod_punto_servicio)
                    THEN

                    var$aux_acod_cliente        := rec$valores.COD_CLIENTE;
                    var$aux_acod_sub_cliente    := rec$valores.COD_SUBCLIENTE;
                    var$aux_acod_punto_servicio := rec$valores.COD_PTO_SERVICIO;

                    var$aux_anel_index := var$aux_anel_index + 1;

                    SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                        par$des_origen      => const$des_origen,
                                        par$des_version     => const$version,                            
                                        par$des_detalle     => 'Índice: ' || idx || '. Se genera var$aux_anel_index: ' || var$aux_anel_index || 
                                        ' para el cliente: ' || var$aux_acod_cliente ||
                                        ' subcliente: ' || var$aux_acod_sub_cliente ||
                                        ' punto: ' || var$aux_acod_punto_servicio 
                                        ,
                                        par$cod_identificador   => '');
                  END IF;
                

                  -- Almacenamos los valores para enviar al procedure sgrabar_mov_boveda
                  var$anel_index(var$aux_anel_index)                      := var$aux_anel_index;
                  var$acod_device_id(var$aux_anel_index)                  := rec$valores.COD_IDENTIFICACION;
                  var$acod_cliente(var$aux_anel_index)                    := rec$valores.COD_CLIENTE;
                  var$acod_sub_cliente(var$aux_anel_index)                := rec$valores.COD_SUBCLIENTE;
                  var$acod_punto_servicio(var$aux_anel_index)             := rec$valores.COD_PTO_SERVICIO;

                  var$afyh_gestion(var$aux_anel_index)                    := SYSDATE;
                  var$afyh_contable(var$aux_anel_index)                   := NULL; --Quedará automaticamente con la fecha de gestión;
                  var$acod_actual_id(var$aux_anel_index)                  := rec$valores.ACTUAL_ID; 
                  var$acod_collection_id(var$aux_anel_index)              := NULL;
                  var$acod_precinto(var$aux_anel_index)                   := var$nel_precinto; -- Utilizado para generar el código externo
                  var$anel_gmt_minuto(var$aux_anel_index)                 := rec$valores.GMT_MINUTOS;

                  var$avtdoc_nel_index(var$aux_anel_index)                        := var$aux_anel_index; -- Campos adicionales
                  var$avtdoc_cod_termino(var$aux_anel_index)                      := 'CODIGO_CONFIRMACION_PERIODO'; -- Campos adicionales
                  var$avtdoc_des_valor(var$aux_anel_index)                        := par$aidentificador(idx); -- Campos adicionales
                  var$aefdoc_nel_index(var$aefdoc_nel_index.count)                := var$aux_anel_index;
                  var$aefdoc_cod_divisa(var$aefdoc_cod_divisa.count)              := rec$valores.COD_ISO_DIVISA;
                  var$aefdoc_cod_denominacion(var$aefdoc_cod_denominacion.count)  := NULL;
                  var$aefdoc_nel_cantidad(var$aefdoc_nel_cantidad.count)          := 0;
                  var$aefdoc_num_importe(var$aefdoc_num_importe.count)            := rec$valores.NUM_IMPORTE;
                END LOOP;

                IF var$aux_cantidad_valores > 0 THEN
                  SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                      par$des_origen      => const$des_origen,
                      par$des_version     => const$version,                            
                      par$des_detalle     => 'Índice: ' || idx || '. Llamada al procedure sgrabar_mov_boveda',
                      par$cod_identificador   => '');

                  sgrabar_mov_boveda( par$oid_llamada       => par$oid_llamada,
                                      par$cod_identificador_ajeno => '',
                                      par$anel_index              => var$anel_index, --obligatorio
                                      par$acod_device_id          => var$acod_device_id, --obligatorio
                                      par$acod_cliente            => var$acod_cliente, --obligatorio
                                      par$acod_sub_cliente        => var$acod_sub_cliente, --obligatorio
                                      par$acod_punto_servicio     => var$acod_punto_servicio, --obligatorio
                                      par$afyh_gestion            => var$afyh_gestion, --obligatorio
                                      par$afyh_contable           => var$afyh_contable,
                                      par$acod_actual_id          => var$acod_actual_id, --obligatorio
                                      par$acod_collection_id      => var$acod_collection_id,
                                      par$acod_precinto           => var$acod_precinto,
                                      par$anel_gmt_minuto         => var$anel_gmt_minuto,
                                      par$avtdoc_nel_index        => var$avtdoc_nel_index,
                                      par$avtdoc_cod_termino      => var$avtdoc_cod_termino,
                                      par$avtdoc_des_valor        => var$avtdoc_des_valor,
                                      par$aefdoc_nel_index        => var$aefdoc_nel_index,
                                      par$aefdoc_cod_divisa       => var$aefdoc_cod_divisa, --obligatorio
                                      par$aefdoc_cod_denominacion => var$aefdoc_cod_denominacion,
                                      par$aefdoc_nel_cantidad     => var$aefdoc_nel_cantidad,
                                      par$aefdoc_num_importe      => var$aefdoc_num_importe, --obligatorio
                                      par$info_ejecucion          => '',
                                      par$cod_usuario             => par$cod_usuario,
                                      par$cod_cultura             => par$cod_cultura,
                                      par$cod_pais                => par$cod_pais,
                                      par$hacer_commit            => false,
                                      par$rc_validaciones         => var$rc_validaciones,
                                      par$rc_planificaciones      => var$rc_planificaciones,
                                      par$rc_documentos           => var$rc_documentos,
                                      par$cod_ejecucion           => var$cod_ejecucion);

                  -- Verificamos la tabla auxiliar SAPR_GTT_TAUXILIAR para ver si hay errores en sgrabar_mov_boveda
                  --* Buscando por el NEL_INDEX
                  FOR idx2 IN var$anel_index.first .. var$anel_index.last LOOP
                    IF fhay_error(par$nel_index => var$anel_index(idx2)) THEN
                      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                par$des_origen      => const$des_origen,
                                par$des_version     => const$version,                            
                                par$des_detalle     => 'Índice: ' || idx || '. Hay errores en la llamada al procedure sgrabar_mov_boveda de nel_index: ' || var$anel_index(idx2),
                                par$cod_identificador   => '');

                      -- Guardamos las validaciones con el COD_CALIFICADOR del servicio
                      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CAMPO4, NEL_CAMPO5, COD_CALIFICADOR)
                      SELECT  par$adevice_id(idx), par$aidentificador(idx), COD_CAMPO3, COD_CAMPO2, idx, 'VALIDACIONES_FECHA_CONFIRMAR'
                      FROM SAPR_GTT_TAUXILIAR
                      WHERE COD_CALIFICADOR = 'VALIDACIONES' AND OID_CAMPO1 = var$anel_index(idx2) AND COD_CAMPO2 NOT LIKE '0040__0000';
                    END IF;
                  END LOOP;
                END IF;
              ELSE
                SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                                              par$des_origen      => const$des_origen,
                                              par$des_version     => const$version,                            
                                              par$des_detalle     => 'Índice: ' || idx || '. No todos los períodos de bóveda fueron confirmados', 
                                              par$cod_identificador   => '');
              END IF;
            END IF;
          ELSE
            -- Si no tiene datos la consulta consultar si esta confirmado el período
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
              par$des_origen      => const$des_origen,
              par$des_version     => const$version,                            
              par$des_detalle     => 'Índice: ' || idx || '. NO existen periodos para confirmar para MAQ.COD_IDENTIFICACION: ' || par$adevice_id(idx) || ' y PER.COD_PERIODO_CONFIRMACION: ' || par$aidentificador(idx), 
              par$cod_identificador   => '');

            /* Consultamos si el período está confirmado */
            var$aux_cant_registros := 0;
            FOR rec$periodo_confirmado IN cur$periodos_confirmados(par$adevice_id(idx), par$aidentificador(idx))
            LOOP
              var$aux_cant_registros := cur$periodos_confirmados%rowcount;
              /*Buscamos el mensaje traducido*/
              /*2040340006 - El período con el DeviceID "{0}" y el Identificador "{1}" ya fue confirmado en "{2}" (código confirmación "{3}").*/
              var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040340006',
                                                            'CONFIRMARPERIODOS',
                                                            gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                                            par$adevice_id(idx) || '|' || par$aidentificador(idx) || '|' || rec$periodo_confirmado.FYH_CONFIRMACION || '|' || rec$periodo_confirmado.COD_CONFIRMACION,
                                                            0);

              INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CAMPO4, NEL_CAMPO5, COD_CALIFICADOR)
              VALUES (par$adevice_id(idx), par$aidentificador(idx),var$mensaje , '2040340006', idx, 'VALIDACIONES_FECHA_CONFIRMAR');

              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                par$des_origen      => const$des_origen,
                par$des_version     => const$version,                            
                par$des_detalle     =>  'Índice: ' || idx || '. 2040340006: ' || var$mensaje, 
                par$cod_identificador   => '');
            END LOOP;

            IF var$aux_cant_registros = 0 THEN
              /*Buscamos el mensaje traducido*/
              /*2040340005 - No fue posible encontrar un período con el DeviceID "{0}" y el Identificador "{1}" que esté pendiente de confirmación ("CO").*/
              var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040340005',
                                                            'CONFIRMARPERIODOS',
                                                            gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                                            par$adevice_id(idx) || '|' || par$aidentificador(idx),
                                                            0);

              INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CAMPO2, COD_CAMPO3, COD_CAMPO4,  NEL_CAMPO5, COD_CALIFICADOR)
              VALUES (par$adevice_id(idx), par$aidentificador(idx),var$mensaje , '2040340005', idx, 'VALIDACIONES_FECHA_CONFIRMAR');

              SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                par$des_origen      => const$des_origen,
                par$des_version     => const$version,                            
                par$des_detalle     =>  'Índice: ' || idx || '. 2040340005: ' || var$mensaje, 
                par$cod_identificador   => '');
            END IF;
          END IF;


          /* Verificamos si hay errores en la ejecución */
          DBMS_OUTPUT.PUT_LINE('Verificamos si hay errores en la ejecución');
          -- Hacer commit si no hay errores
          IF NOT fhay_error_confir_periodos(idx) THEN
            COMMIT;
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
              par$des_origen      => const$des_origen,
              par$des_version     => const$version,                            
              par$des_detalle     => 'Índice: ' || idx || '. Sin errores en la ejecución, se realiza COMMIT',
              par$cod_identificador   => '');
          ELSE
            -- Hay errores 
            FOR  rec$validaciones IN (
                SELECT COD_CAMPO4 AS CODIGO, COD_CAMPO3 AS MENSAJE, COD_CALIFICADOR
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'VALIDACIONES_FECHA_CONFIRMAR' AND NEL_CAMPO5 = idx
              ) 
            LOOP
              --Guardamos en las variables de validación
              var$oid_validaciones(var$oid_validaciones.COUNT) := rec$validaciones.COD_CALIFICADOR;
              var$cod_validaciones(var$cod_validaciones.COUNT) := rec$validaciones.CODIGO;
              var$des_validaciones(var$des_validaciones.COUNT) := rec$validaciones.MENSAJE;
            END LOOP;

            ROLLBACK;
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
              par$des_origen      => const$des_origen,
              par$des_version     => const$version,                            
              par$des_detalle     => 'Índice: ' || idx || '. Hizo roolback por error al confirmar período, identificador de período: ' || par$aidentificador(idx),
              par$cod_identificador   => '');
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
              par$des_origen      => const$des_origen,
              par$des_version     => const$version,                            
              par$des_detalle     => 'Índice: ' || idx || '. Hizo roolback por EXCEPTION, identificador de período: ' || par$aidentificador(idx) || 'Error: ' || sqlerrm,
              par$cod_identificador   => '');
            
            /*Buscamos el mensaje traducido*/
            /*3040340001 - Se produjo el siguiente error en la aplicación: {0}.*/
            var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'3040340001',
                                                          'CONFIRMARPERIODOS',
                                                          gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                                          sqlerrm,
                                                          0);
            --Guardamos en las variables de validación
            var$oid_validaciones(var$oid_validaciones.COUNT) := 'VALIDACIONES_FECHA_CONFIRMAR';
            var$cod_validaciones(var$cod_validaciones.COUNT) := '3040340001';
            var$des_validaciones(var$des_validaciones.COUNT) := var$mensaje;
        END;
      END LOOP;
    ELSE
      DBMS_OUTPUT.PUT_LINE('Se encuentran errores en la validación del país');
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                par$des_origen      => const$des_origen,
                par$des_version     => const$version,                            
                par$des_detalle     => 'Se encuentran errores en la validación del país',
                par$cod_identificador   => '');

      -- Guardamos las validaciones de pais 
      FOR rec$validacion IN (
        SELECT OID_CAMPO1, COD_CAMPO2
        FROM SAPR_GTT_TAUXILIAR
        WHERE COD_CALIFICADOR = 'VALIDACIONES')
      LOOP
        var$oid_validaciones(var$oid_validaciones.COUNT) := 'VALIDACION_PAIS';
        var$cod_validaciones(var$cod_validaciones.COUNT) := rec$validacion.OID_CAMPO1;
        var$des_validaciones(var$des_validaciones.COUNT) := rec$validacion.COD_CAMPO2;
      END LOOP;
	  END IF;

    /* cursor para envio de correo */
    IF var$lista_correos IS NOT NULL THEN
      OPEN par$rc_errores_confirma FOR
        SELECT PERI.OID_PERIODO, AUXI.COD_CALIFICADOR, 
          MAQU.COD_IDENTIFICACION, SECT.DES_SECTOR, 
          PERI.COD_PERIODO_CONFIRMACION, PERI.COD_MENSAJE_CONFIRMACION, 
          TPERI.COD_TIPO_PERIODO,
          PLXM.DES_MENSAJE, DIVI.COD_ISO_DIVISA, 
          CASE WHEN(var$max_reintentos - PERI.NEL_INTENTO_CONFIRMACION) < 0 
            THEN 0 
            ELSE var$max_reintentos - PERI.NEL_INTENTO_CONFIRMACION 
          END  AS REINTENTOS, 
          SUM(CALC.NUM_IMPORTE) AS NUM_IMPORTE
        FROM SAPR_TCALCULO_EFECTIVO CALC 
          INNER JOIN GEPR_TPUNTO_SERVICIO PTO ON CALC.OID_PTO_SERVICIO = PTO.OID_PTO_SERVICIO
          INNER JOIN SAPR_TTIPO_CALCULO TCAL ON TCAL.OID_TIPO_CALCULO = CALC.OID_TIPO_CALCULO AND TCAL.COD_TIPO_CALCULO = 'CONTABLE'
          INNER JOIN SAPR_TMAQUINA MAQU ON MAQU.OID_MAQUINA = PTO.OID_MAQUINA
          INNER JOIN GEPR_TSECTOR SECT ON SECT.OID_SECTOR = MAQU.OID_SECTOR
          INNER JOIN SAPR_TPERIODO PERI ON PERI.OID_PERIODO = CALC.OID_PERIODO
          INNER JOIN SAPR_TTIPO_PERIODO TPERI ON TPERI.OID_TIPO_PERIODO = PERI.OID_TIPO_PERIODO
          INNER JOIN SAPR_TPLANIFICACION PLAN ON PLAN.OID_PLANIFICACION = PERI.OID_PLANIFICACION
          LEFT JOIN SAPR_TPLANXMENSAJE PLXM ON  PLXM.OID_PLANIFICACION = PLAN.OID_PLANIFICACION AND PLXM.COD_MENSAJE = PERI.COD_MENSAJE_CONFIRMACION
          INNER JOIN GEPR_TDIVISA DIVI ON DIVI.OID_DIVISA = CALC.OID_DIVISA
          INNER JOIN SAPR_GTT_TAUXILIAR AUXI ON PERI.OID_PERIODO = AUXI.OID_CAMPO1 AND AUXI.COD_CALIFICADOR IN ('PERIODO_A_REPROCESAR', 'PERIODO_A_NO_ACREDITAR', 'PERIODO_A_NO_CONFIRMAR')
        GROUP BY PERI.OID_PERIODO, AUXI.COD_CALIFICADOR, MAQU.COD_IDENTIFICACION, SECT.DES_SECTOR, PERI.COD_PERIODO_CONFIRMACION, 
          PERI.COD_MENSAJE_CONFIRMACION, TPERI.COD_TIPO_PERIODO, PLXM.DES_MENSAJE, DIVI.COD_ISO_DIVISA, 
          CASE WHEN(var$max_reintentos - PERI.NEL_INTENTO_CONFIRMACION) < 0 THEN 0 ELSE var$max_reintentos - PERI.NEL_INTENTO_CONFIRMACION END
        ;
    END IF;


    /* Validaciones */
    IF NOT gepr_putilidades_###VERSION###.farray_vacio_desc(var$des_validaciones) THEN
      --SE CONVIERTE LOS ARRAY A TABLES
      var$toid_validaciones := gepr_putilidades_###VERSION###.fconverter_array_table(par$table_varchar2 => var$oid_validaciones);
      var$tcod_validaciones := gepr_putilidades_###VERSION###.fconverter_array_cod_table(par$table_varchar2 => var$cod_validaciones);
      var$tdes_validaciones := gepr_putilidades_###VERSION###.fconverter_array_desc_table(par$table_varchar2 => var$des_validaciones);


      OPEN par$rc_validaciones FOR
        WITH OID AS (
                SELECT rownum IDX, C.COLUMN_VALUE
                FROM TABLE(var$toid_validaciones) C
                WHERE C.COLUMN_VALUE IS NOT NULL
        ),
        COD AS (
                SELECT rownum IDX, C.COLUMN_VALUE
                FROM TABLE(var$tcod_validaciones) C
                WHERE C.COLUMN_VALUE IS NOT NULL
        ),
        DES AS (
                SELECT rownum IDX, C.COLUMN_VALUE
                FROM TABLE(var$tdes_validaciones) C
                WHERE C.COLUMN_VALUE IS NOT NULL
        )
        SELECT OID.COLUMN_VALUE OID_DOCUMENTO,
                COD.COLUMN_VALUE CODIGO,
                DES.COLUMN_VALUE MENSAJE
        FROM OID
          INNER JOIN COD ON COD.IDX = OID.IDX
          INNER JOIN DES ON DES.IDX = COD.IDX;
    END IF;


  /* ===  Tratar excepciones - Rollback === */
	EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Hizo roolback por EXCEPTION: ' || sqlerrm,
                            par$cod_identificador   => '');

      DBMS_OUTPUT.PUT_LINE('Realiza el ROLLBACK por EXCEPTION' || sqlerrm);

      RAISE;
  END sconfirmar_periodos;

  PROCEDURE sconfirmar_periodos_ac(
                                  par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_periodo           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$cod_identificador     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_device_id         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_mensaje           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_confirmacion      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$fecha_hora            IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                  par$intentos_confirmacion IN gepr_pcomon_###VERSION###.tipo$nel_,
                                  par$max_intentos_confir   IN gepr_pcomon_###VERSION###.tipo$nel_,
                                  par$oid_estado_periodo_AC IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_estado_periodo_RE IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_estado_periodo_NA IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_)  IS

     
    --Variables de LOG
    const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.sconfirmar_periodos_ac';
		var$detalle           VARCHAR2(4000);
		var$detalle_actual    VARCHAR2(4000);
	
    -- Variables locales
    var$esAc                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$esRe                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$esNa                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$mensajePlan              gepr_pcomon_###VERSION###.tipo$desc_;
    var$sinReintentos            gepr_pcomon_###VERSION###.tipo$nel_ := 0;

  BEGIN
    -- INICIO - LOG de parametros iniciales
		IF par$oid_llamada IS NOT NULL THEN
			var$detalle := q'[Parametros iniciales: 
        par$oid_llamada: ]'             || par$oid_llamada || q'[
        par$oid_periodo: ]'             || par$oid_periodo || q'[
        par$cod_identificador: ]'       || par$cod_identificador || q'[
        par$cod_device_id: ]'           || par$cod_device_id || q'[
        par$cod_mensaje: ]'             || par$cod_mensaje || q'[
        par$cod_confirmacion: ]'        || par$cod_confirmacion || q'[
        par$fecha_hora: ]'              || par$fecha_hora || q'[
        par$intentos_confirmacion: ]'   || par$intentos_confirmacion || q'[
        par$max_intentos_confir: ]'     || par$max_intentos_confir || q'[
        par$oid_estado_periodo_AC: ]'   || par$oid_estado_periodo_AC || q'[
        par$oid_estado_periodo_RE: ]'   || par$oid_estado_periodo_RE || q'[
        par$oid_estado_periodo_NA: ]'   || par$oid_estado_periodo_NA || q'[
        par$cod_usuario: ]'             || par$cod_usuario;

			SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
    END IF;
    -- FIN - LOG de parametros iniciales

    /*Verifico si esta el mensaje */
    BEGIN
      SELECT PLANXMENS.COD_TIPO_MENSAJE , PLANXMENS.BOL_SIN_REINTENTOS into var$mensajePlan,  var$sinReintentos
        FROM SAPR_TPERIODO PER
          INNER JOIN SAPR_TTIPO_PERIODO TIPE ON TIPE.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO AND TIPE.COD_TIPO_PERIODO = 'AC'
          INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
          INNER JOIN SAPR_TPLANXMENSAJE PLANXMENS ON PLANXMENS.OID_PLANIFICACION = PLANI.OID_PLANIFICACION AND PLANXMENS.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO
        WHERE PLANXMENS.COD_MENSAJE = par$cod_mensaje 
          AND PER.OID_PERIODO = par$oid_periodo;
        
         SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Se encuentra el mensaje con código: ' || par$cod_mensaje || ' para el período: ' || par$oid_periodo, 
          par$cod_identificador   => '');

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        var$mensajePlan := NULL;
        var$sinReintentos := NULL; 

        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
        par$des_origen      => const$des_origen,
        par$des_version     => const$version,                            
        par$des_detalle     => 'NO Se encuentra el mensaje con código: ' || par$cod_mensaje || ' para el período: ' || par$oid_periodo, 
        par$cod_identificador   => '');
    END;
        
    --Analizamos la acción a realizar sobre el período de acuerdo al mensaje recibido o el código de confirmación
    IF var$mensajePlan = 'OK' OR (var$mensajePlan is null AND par$cod_confirmacion is not null) THEN
        --PERIODO A ACREDITAR
        var$esAc := 1;
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Período para ACREDITAR de oid_periodo: ' || par$oid_periodo, 
          par$cod_identificador   => '');
    ELSIF var$mensajePlan = 'EC' THEN
      --PERIODO A REPROCESAR
      var$esRe := 1;
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Período para REPROCESAR por código EC de oid_periodo: ' || par$oid_periodo, 
          par$cod_identificador   => '');
    ELSE
      IF var$sinReintentos = 1 THEN
        --PERIODO A NO ACREDITAR
        var$esNa := 1;
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Período para NO ACREDITAR de oid_periodo: ' || par$oid_periodo, 
          par$cod_identificador   => '');
      ELSE
        IF par$intentos_confirmacion < par$max_intentos_confir THEN
          --PERIODO A REPROCESAR
          var$esRe := 1;
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Período para REPROCESAR de oid_periodo: ' || par$oid_periodo, 
            par$cod_identificador   => '');
        ELSE
          --PERIODO A NO ACREDITAR POR EXCEDER CANTIDAD DE REINTENTOS
          var$esNa := 1;
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Período para NO ACREDITAR por exceder cantidad de reintentos de oid_periodo: ' || par$oid_periodo, 
            par$cod_identificador   => '');
        END IF;
      END IF;
    END IF;

    IF var$esAc = 1 THEN
      --*CASO 1
      /* Caso el "Periodo" tenga un "Codigo" que, al validar contra el "SAPR_TPLANXMENSAJE.COD_MENSAJE" tenga en el 
      "SAPR_TPLANXMENSAJE.COD_TIPO_MENSAJE" el valor "OK" o no encuentre datos en la "SAPR_TPLANXMENSAJE" y el "Confirmacion" esté rellenado:
        Para cada registro de la tabla "SAPR_TPERIODO" que se identifique con los datos del "Periodo":
      */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Comienza actualización de SAPR_TPERIODO de OID_PERIODO: ' || par$oid_periodo,
                            par$cod_identificador   => '');

      -- Actualizar SAPR_TPERIODO a ACREDITADO
      UPDATE SAPR_TPERIODO
        SET OID_ESTADO_PERIODO = par$oid_estado_periodo_AC,
          COD_CONFIRMACION	= par$cod_confirmacion,
          COD_MENSAJE_CONFIRMACION	= par$cod_mensaje,
          BOL_CONFIRMADO	= 1,
          FYH_CONFIRMACION	= par$fecha_hora,
          NEL_INTENTO_CONFIRMACION = NEL_INTENTO_CONFIRMACION + 1,
          GMT_MODIFICACION	= SYSTIMESTAMP,
          DES_USUARIO_MODIFICACION	= par$cod_usuario
        WHERE OID_PERIODO = par$oid_periodo;

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Comienza actualización de SAPR_TDOCUMENTO de OID_PERIODO: ' || par$oid_periodo,
                            par$cod_identificador   => '');

      -- Actualizar SAPR_TDOCUMENTO
      UPDATE SAPR_TDOCUMENTO
        SET FYH_ACREDITACION = par$fecha_hora,
          BOL_ACREDITADO = 1,
          GMT_MODIFICACION	= SYSTIMESTAMP,
          DES_USUARIO_MODIFICACION	= par$cod_usuario
        WHERE OID_DOCUMENTO IN (SELECT OID_DOCUMENTO FROM SAPR_TPERIODOXDOCUMENTO WHERE OID_PERIODO = par$oid_periodo);

    ELSIF var$esRe = 1 THEN
      --*CASO 2
      /*Caso el "Periodo" tenga un "Codigo" que, al validar contra el "SAPR_TPLANXMENSAJE.COD_MENSAJE" tenga en el "SAPR_TPLANXMENSAJE.COD_TIPO_MENSAJE" 
      el valor "KO" y el "SAPR_TPLANXMENSAJE.BOL_SIN_REINTENTOS" el valor "0" y el valor del parámetro "FechaValorConfirmacionMaxReintentosPeriodos" 
      sea mayor que el "SAPR_TPERIODO.NEL_INTENTO_CONFIRMACION" o no encuentre datos en la "SAPR_TPLANXMENSAJE" y el "Confirmacion" esté vació y 
      el valor del parámetro "FechaValorConfirmacionMaxReintentosPeriodos" sea mayor que el "SAPR_TPERIODO.NEL_INTENTO_CONFIRMACION":
        Para cada registro de la tabla "SAPR_TPERIODO" que se identifique con los datos del "Periodo":
          Además, se deberá mantener en memoria (hasta el fin de la ejecución) que el "Periodo" tuvo un error en la confirmación pero que es posible el reintento. 
      */
       
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                      par$des_origen      => const$des_origen,
                      par$des_version     => const$version,                            
                      par$des_detalle     => 'Comienza actualización de SAPR_TPERIODO de OID_PERIODO: ' || par$oid_periodo,
                      par$cod_identificador   => '');
      
      --Agrego los datos en la tabla auxiliar para ser utilizado en el envío de correo
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CALIFICADOR) 
      VALUES(par$oid_periodo, 'PERIODO_A_REPROCESAR');



      IF var$mensajePlan IS NULL OR var$mensajePlan <> 'EC' THEN
        UPDATE SAPR_TPERIODO
          SET NEL_INTENTO_CONFIRMACION = NEL_INTENTO_CONFIRMACION + 1
        WHERE OID_PERIODO = par$oid_periodo;
      END IF;

      -- Actualizar SAPR_TPERIODO a REPROCESAR
      UPDATE SAPR_TPERIODO
        SET OID_ESTADO_PERIODO = par$oid_estado_periodo_RE,
          COD_MENSAJE_CONFIRMACION	= par$cod_mensaje,
          BOL_CONFIRMADO	= 0,
          GMT_MODIFICACION	= SYSTIMESTAMP,
          DES_USUARIO_MODIFICACION	= par$cod_usuario
      WHERE OID_PERIODO = par$oid_periodo;
       
    ELSIF var$esNa = 1 THEN
       --*CASO 3
      /*Caso el "Periodo" tenga un "Codigo" que, al validar contra el "SAPR_TPLANXMENSAJE.COD_MENSAJE" tenga en el 
      "SAPR_TPLANXMENSAJE.COD_TIPO_MENSAJE" el valor "KO" y el "SAPR_TPLANXMENSAJE.BOL_SIN_REINTENTOS" el valor "1" 
      o "FechaValorConfirmacionMaxReintentosPeriodos" sea igual o menor que el "SAPR_TPERIODO.NEL_INTENTO_CONFIRMACION":
        Para cada registro de la tabla "SAPR_TPERIODO" que se identifique con los datos del "Periodo":
          Además, se deberá mantener en memoria (hasta el fin de la ejecución) que el "Periodo" tuvo un error en la confirmación pero que no es posible el reintento.
      */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                    par$des_origen      => const$des_origen,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Comienza actualización de SAPR_TPERIODO de OID_PERIODO: ' || par$oid_periodo,
                    par$cod_identificador   => '');

      --Agrego los datos en la tabla auxiliar para ser utilizado en el envío de correo
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CALIFICADOR) 
      VALUES(par$oid_periodo, 'PERIODO_A_NO_ACREDITAR');

      -- Actualizar SAPR_TPERIODO a NO ACREDITADO
      UPDATE SAPR_TPERIODO
        SET OID_ESTADO_PERIODO = par$oid_estado_periodo_NA,
          COD_MENSAJE_CONFIRMACION	= par$cod_mensaje,
          BOL_CONFIRMADO	= 0,
          NEL_INTENTO_CONFIRMACION = NEL_INTENTO_CONFIRMACION + 1,
          GMT_MODIFICACION	= SYSTIMESTAMP,
          DES_USUARIO_MODIFICACION	= par$cod_usuario
      WHERE OID_PERIODO = par$oid_periodo;
    ELSE
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
        par$des_origen      => const$des_origen,
        par$des_version     => const$version,                            
        par$des_detalle     => 'No fue posible determinar la acción para el período de oid_periodo: ' || par$oid_periodo, 
        par$cod_identificador   => '');
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'EXCEPTION sconfirmar_periodos_ac: ' || sqlerrm,
                            par$cod_identificador   => '');

      DBMS_OUTPUT.PUT_LINE('EXCEPTION sconfirmar_periodos_ac' || sqlerrm);
      RAISE;
  END sconfirmar_periodos_ac;
  
  PROCEDURE sconfirmar_periodos_re(
                                  par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_periodo           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$cod_identificador     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_device_id         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_mensaje           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_confirmacion      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$fecha_hora            IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                  par$intentos_confirmacion IN gepr_pcomon_###VERSION###.tipo$nel_,
                                  par$max_intentos_confir   IN gepr_pcomon_###VERSION###.tipo$nel_,
                                  par$oid_estado_periodo_CF IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_estado_periodo_RE IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_estado_periodo_NC IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_)  IS

     
    --Variables de LOG
    const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.sconfirmar_periodos_re';
		var$detalle           VARCHAR2(4000);
		var$detalle_actual    VARCHAR2(4000);
	
    -- Variables locales
    var$esCf                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$esRe                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$esNc                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$mensajePlan              gepr_pcomon_###VERSION###.tipo$desc_;
    var$sinReintentos            gepr_pcomon_###VERSION###.tipo$nel_ := 0;

   
  BEGIN
    -- INICIO - LOG de parametros iniciales
		IF par$oid_llamada IS NOT NULL THEN
			var$detalle := q'[Parametros iniciales: 
        par$oid_llamada: ]'             || par$oid_llamada || q'[
        par$oid_periodo: ]'             || par$oid_periodo || q'[
        par$cod_identificador: ]'       || par$cod_identificador || q'[
        par$cod_device_id: ]'           || par$cod_device_id || q'[
        par$cod_mensaje: ]'             || par$cod_mensaje || q'[
        par$cod_confirmacion: ]'        || par$cod_confirmacion || q'[
        par$fecha_hora: ]'              || par$fecha_hora || q'[
        par$intentos_confirmacion: ]'   || par$intentos_confirmacion || q'[
        par$max_intentos_confir: ]'     || par$max_intentos_confir || q'[
        par$oid_estado_periodo_CF: ]'   || par$oid_estado_periodo_CF || q'[
        par$oid_estado_periodo_RE: ]'   || par$oid_estado_periodo_RE || q'[
        par$oid_estado_periodo_NC: ]'   || par$oid_estado_periodo_NC || q'[
        par$cod_usuario: ]'             || par$cod_usuario;

			SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
    END IF;
    -- FIN - LOG de parametros iniciales

   

    /*Verifico si esta el mensaje */
    BEGIN
      SELECT PLANXMENS.COD_TIPO_MENSAJE , PLANXMENS.BOL_SIN_REINTENTOS into var$mensajePlan,  var$sinReintentos
        FROM SAPR_TPERIODO PER
          INNER JOIN SAPR_TTIPO_PERIODO TIPE ON TIPE.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO AND TIPE.COD_TIPO_PERIODO = 'RE' 
          INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
          INNER JOIN SAPR_TPLANXMENSAJE PLANXMENS ON PLANXMENS.OID_PLANIFICACION = PLANI.OID_PLANIFICACION AND PLANXMENS.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO
        WHERE PLANXMENS.COD_MENSAJE = par$cod_mensaje 
          AND PER.OID_PERIODO = par$oid_periodo;
        
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        var$mensajePlan := NULL;
        var$sinReintentos := NULL; 
    END;
        
    --Analizamos la acción a realizar sobre el período de acuerdo al mensaje recibido o el código de confirmación
    IF var$mensajePlan = 'OK' OR (var$mensajePlan is null AND par$cod_confirmacion is not null) THEN
        --PERIODO A CONFIRMAR
        var$esCf := 1;
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Período para CONFIRMAR de oid_periodo: ' || par$oid_periodo, 
          par$cod_identificador   => '');
    ELSIF var$mensajePlan = 'EC' THEN
      --PERIODO A REPROCESAR
      var$esRe := 1;
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Período para REPROCESAR por código EC de oid_periodo: ' || par$oid_periodo, 
          par$cod_identificador   => '');
    ELSE
      IF var$sinReintentos = 1 THEN
        --PERIODO A NO CONFIRMAR
        var$esNc := 1;
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Período para NO CONFIRMAR de oid_periodo: ' || par$oid_periodo, 
          par$cod_identificador   => '');
      ELSE
        IF par$intentos_confirmacion < par$max_intentos_confir THEN
          --PERIODO A REPROCESAR
          var$esRe := 1;
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Período para REPROCESAR de oid_periodo: ' || par$oid_periodo, 
            par$cod_identificador   => '');
        ELSE
          --PERIODO A NO CONFIRMAR POR EXCEDER CANTIDAD DE REINTENTOS
          var$esNc := 1;
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Período para NO CONFIRMAR por exceder cantidad de reintentos de oid_periodo: ' || par$oid_periodo, 
            par$cod_identificador   => '');
        END IF;
      END IF;
    END IF;

    IF var$esCf = 1 THEN
      --*CASO 1
      /* Caso el "Periodo" tenga un "Codigo" que, al validar contra el "SAPR_TPLANXMENSAJE.COD_MENSAJE" tenga en el 
      "SAPR_TPLANXMENSAJE.COD_TIPO_MENSAJE" el valor "OK" o no encuentre datos en la "SAPR_TPLANXMENSAJE" y el "Confirmacion" esté rellenado:
        Para cada registro de la tabla "SAPR_TPERIODO" que se identifique con los datos del "Periodo":
      */
      -- Actualizar SAPR_TPERIODO a CONFIRMADO
      UPDATE SAPR_TPERIODO
        SET OID_ESTADO_PERIODO = par$oid_estado_periodo_CF,
          COD_CONFIRMACION	= par$cod_confirmacion,
          COD_MENSAJE_CONFIRMACION	= par$cod_mensaje,
          BOL_CONFIRMADO	= 1,
          FYH_CONFIRMACION	= par$fecha_hora,
          NEL_INTENTO_CONFIRMACION = NEL_INTENTO_CONFIRMACION + 1,
          GMT_MODIFICACION	= SYSTIMESTAMP,
          DES_USUARIO_MODIFICACION	= par$cod_usuario
        WHERE OID_PERIODO = par$oid_periodo;

    ELSIF var$esRe = 1 THEN
      --*CASO 2
      /*Caso el "Periodo" tenga un "Codigo" que, al validar contra el "SAPR_TPLANXMENSAJE.COD_MENSAJE" tenga en el "SAPR_TPLANXMENSAJE.COD_TIPO_MENSAJE" 
      el valor "KO" y el "SAPR_TPLANXMENSAJE.BOL_SIN_REINTENTOS" el valor "0" y el valor del parámetro "FechaValorConfirmacionMaxReintentosPeriodos" 
      sea mayor que el "SAPR_TPERIODO.NEL_INTENTO_CONFIRMACION" o no encuentre datos en la "SAPR_TPLANXMENSAJE" y el "Confirmacion" esté vació y 
      el valor del parámetro "FechaValorConfirmacionMaxReintentosPeriodos" sea mayor que el "SAPR_TPERIODO.NEL_INTENTO_CONFIRMACION":
        Para cada registro de la tabla "SAPR_TPERIODO" que se identifique con los datos del "Periodo":
          Además, se deberá mantener en memoria (hasta el fin de la ejecución) que el "Periodo" tuvo un error en la confirmación pero que es posible el reintento. 
      */
       
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                      par$des_origen      => const$des_origen,
                      par$des_version     => const$version,                            
                      par$des_detalle     => 'Comienza actualización de SAPR_TPERIODO de OID_PERIODO: ' || par$oid_periodo,
                      par$cod_identificador   => '');
      
      --Agrego los datos en la tabla auxiliar para ser utilizado en el envío de correo
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CALIFICADOR) 
      VALUES(par$oid_periodo, 'PERIODO_A_REPROCESAR');

      IF var$mensajePlan IS NULL OR var$mensajePlan <> 'EC' THEN
        UPDATE SAPR_TPERIODO
          SET NEL_INTENTO_CONFIRMACION = NEL_INTENTO_CONFIRMACION + 1
        WHERE OID_PERIODO = par$oid_periodo;
      END IF;

      -- Actualizar SAPR_TPERIODO a REPROCESAR
      UPDATE SAPR_TPERIODO
        SET OID_ESTADO_PERIODO = par$oid_estado_periodo_RE,
          COD_MENSAJE_CONFIRMACION	= par$cod_mensaje,
          BOL_CONFIRMADO	= 0,
          GMT_MODIFICACION	= SYSTIMESTAMP,
          DES_USUARIO_MODIFICACION	= par$cod_usuario
      WHERE OID_PERIODO = par$oid_periodo;
    ELSIF var$esNc = 1 THEN
       --*CASO 3
      /*Caso el "Periodo" tenga un "Codigo" que, al validar contra el "SAPR_TPLANXMENSAJE.COD_MENSAJE" tenga en el 
      "SAPR_TPLANXMENSAJE.COD_TIPO_MENSAJE" el valor "KO" y el "SAPR_TPLANXMENSAJE.BOL_SIN_REINTENTOS" el valor "1" 
      o "FechaValorConfirmacionMaxReintentosPeriodos" sea igual o menor que el "SAPR_TPERIODO.NEL_INTENTO_CONFIRMACION":
        Para cada registro de la tabla "SAPR_TPERIODO" que se identifique con los datos del "Periodo":
          Además, se deberá mantener en memoria (hasta el fin de la ejecución) que el "Periodo" tuvo un error en la confirmación pero que no es posible el reintento.
      */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                    par$des_origen      => const$des_origen,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Comienza actualización de SAPR_TPERIODO de OID_PERIODO: ' || par$oid_periodo,
                    par$cod_identificador   => '');

      --Agrego los datos en la tabla auxiliar para ser utilizado en el envío de correo
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CALIFICADOR) 
      VALUES(par$oid_periodo, 'PERIODO_A_NO_CONFIRMAR');

      -- Actualizar SAPR_TPERIODO a NO ACREDITADO
      UPDATE SAPR_TPERIODO
        SET OID_ESTADO_PERIODO = par$oid_estado_periodo_NC,
          COD_MENSAJE_CONFIRMACION	= par$cod_mensaje,
          BOL_CONFIRMADO	= 0,
          NEL_INTENTO_CONFIRMACION = NEL_INTENTO_CONFIRMACION + 1,
          GMT_MODIFICACION	= SYSTIMESTAMP,
          DES_USUARIO_MODIFICACION	= par$cod_usuario
      WHERE OID_PERIODO = par$oid_periodo;
    ELSE
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
        par$des_origen      => const$des_origen,
        par$des_version     => const$version,                            
        par$des_detalle     => 'No fue posible determinar la acción para el período de oid_periodo: ' || par$oid_periodo, 
        par$cod_identificador   => '');
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'EXCEPTION sconfirmar_periodos_re: ' || sqlerrm,
                            par$cod_identificador   => '');

      DBMS_OUTPUT.PUT_LINE('EXCEPTION sconfirmar_periodos_re' || sqlerrm);
      RAISE;
  END sconfirmar_periodos_re;

  PROCEDURE sconfirmar_periodos_bo(
                                  par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_periodo           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$cod_identificador     IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_device_id         IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_mensaje           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$cod_confirmacion      IN gepr_pcomon_###VERSION###.tipo$cod_,
                                  par$fecha_hora            IN gepr_pcomon_###VERSION###.tipo$fyh_,
                                  par$intentos_confirmacion IN gepr_pcomon_###VERSION###.tipo$nel_,
                                  par$max_intentos_confir   IN gepr_pcomon_###VERSION###.tipo$nel_,
                                  par$oid_estado_periodo_CF IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_estado_periodo_RE IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$oid_estado_periodo_NC IN gepr_pcomon_###VERSION###.tipo$oid_,
                                  par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_)  IS

     
    --Variables de LOG
    const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.sconfirmar_periodos_bo';
		var$detalle           VARCHAR2(4000);
		var$detalle_actual    VARCHAR2(4000);
	
    -- Variables locales
    var$esCf                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$esRe                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$esNc                     gepr_pcomon_###VERSION###.tipo$nel_ := 0;
    var$mensajePlan              gepr_pcomon_###VERSION###.tipo$desc_;
    var$sinReintentos            gepr_pcomon_###VERSION###.tipo$nel_ := 0;

   
  BEGIN
    -- INICIO - LOG de parametros iniciales
		IF par$oid_llamada IS NOT NULL THEN
			var$detalle := q'[Parametros iniciales: 
        par$oid_llamada: ]'             || par$oid_llamada || q'[
        par$oid_periodo: ]'             || par$oid_periodo || q'[
        par$cod_identificador: ]'       || par$cod_identificador || q'[
        par$cod_device_id: ]'           || par$cod_device_id || q'[
        par$cod_mensaje: ]'             || par$cod_mensaje || q'[
        par$cod_confirmacion: ]'        || par$cod_confirmacion || q'[
        par$fecha_hora: ]'              || par$fecha_hora || q'[
        par$intentos_confirmacion: ]'   || par$intentos_confirmacion || q'[
        par$max_intentos_confir: ]'     || par$max_intentos_confir || q'[
        par$oid_estado_periodo_CF: ]'   || par$oid_estado_periodo_CF || q'[
        par$oid_estado_periodo_RE: ]'   || par$oid_estado_periodo_RE || q'[
        par$oid_estado_periodo_NC: ]'   || par$oid_estado_periodo_NC || q'[
        par$cod_usuario: ]'             || par$cod_usuario;

			SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
    END IF;
    -- FIN - LOG de parametros iniciales

   

    /*Verifico si esta el mensaje */
    BEGIN
      SELECT PLANXMENS.COD_TIPO_MENSAJE , PLANXMENS.BOL_SIN_REINTENTOS into var$mensajePlan,  var$sinReintentos
        FROM SAPR_TPERIODO PER
          INNER JOIN SAPR_TTIPO_PERIODO TIPE ON TIPE.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO AND TIPE.COD_TIPO_PERIODO = 'BO' 
          INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
          INNER JOIN SAPR_TPLANXMENSAJE PLANXMENS ON PLANXMENS.OID_PLANIFICACION = PLANI.OID_PLANIFICACION AND PLANXMENS.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO
        WHERE PLANXMENS.COD_MENSAJE = par$cod_mensaje 
          AND PER.OID_PERIODO = par$oid_periodo;
        
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        var$mensajePlan := NULL;
        var$sinReintentos := NULL; 
    END;
        
    --Analizamos la acción a realizar sobre el período de acuerdo al mensaje recibido o el código de confirmación
    IF var$mensajePlan = 'OK' OR (var$mensajePlan is null AND par$cod_confirmacion is not null) THEN
        --PERIODO A CONFIRMAR
        var$esCf := 1;
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Período para CONFIRMAR de oid_periodo: ' || par$oid_periodo, 
          par$cod_identificador   => '');
    ELSIF var$mensajePlan = 'EC' THEN
      --PERIODO A REPROCESAR
      var$esRe := 1;
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Período para REPROCESAR por código EC de oid_periodo: ' || par$oid_periodo, 
          par$cod_identificador   => '');
    ELSE
      IF var$sinReintentos = 1 THEN
        --PERIODO A NO CONFIRMAR
        var$esNc := 1;
        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
          par$des_origen      => const$des_origen,
          par$des_version     => const$version,                            
          par$des_detalle     => 'Período para NO CONFIRMAR de oid_periodo: ' || par$oid_periodo, 
          par$cod_identificador   => '');
      ELSE
        IF par$intentos_confirmacion < par$max_intentos_confir THEN
          --PERIODO A REPROCESAR
          var$esRe := 1;
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Período para REPROCESAR de oid_periodo: ' || par$oid_periodo, 
            par$cod_identificador   => '');
        ELSE
          --PERIODO A NO CONFIRMAR POR EXCEDER CANTIDAD DE REINTENTOS
          var$esNc := 1;
          SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
            par$des_origen      => const$des_origen,
            par$des_version     => const$version,                            
            par$des_detalle     => 'Período para NO CONFIRMAR por exceder cantidad de reintentos de oid_periodo: ' || par$oid_periodo, 
            par$cod_identificador   => '');
        END IF;
      END IF;
    END IF;

    IF var$esCf = 1 THEN
      --*CASO 1
      /* Caso el "Periodo" tenga un "Codigo" que, al validar contra el "SAPR_TPLANXMENSAJE.COD_MENSAJE" tenga en el 
      "SAPR_TPLANXMENSAJE.COD_TIPO_MENSAJE" el valor "OK" o no encuentre datos en la "SAPR_TPLANXMENSAJE" y el "Confirmacion" esté rellenado:
        Para cada registro de la tabla "SAPR_TPERIODO" que se identifique con los datos del "Periodo":
      */
     
      
        -- Actualizar SAPR_TPERIODO a CONFIRMADO
        UPDATE SAPR_TPERIODO
          SET OID_ESTADO_PERIODO = par$oid_estado_periodo_CF,
            COD_CONFIRMACION	= par$cod_confirmacion,
            COD_MENSAJE_CONFIRMACION	= par$cod_mensaje,
            BOL_CONFIRMADO	= 1,
            FYH_CONFIRMACION	= par$fecha_hora,
            NEL_INTENTO_CONFIRMACION = NEL_INTENTO_CONFIRMACION + 1,
            GMT_MODIFICACION	= SYSTIMESTAMP,
            DES_USUARIO_MODIFICACION	= par$cod_usuario
          WHERE OID_PERIODO = par$oid_periodo;

    ELSIF var$esRe = 1 THEN
      --*CASO 2
      /*Caso el "Periodo" tenga un "Codigo" que, al validar contra el "SAPR_TPLANXMENSAJE.COD_MENSAJE" tenga en el "SAPR_TPLANXMENSAJE.COD_TIPO_MENSAJE" 
      el valor "KO" y el "SAPR_TPLANXMENSAJE.BOL_SIN_REINTENTOS" el valor "0" y el valor del parámetro "FechaValorConfirmacionMaxReintentosPeriodos" 
      sea mayor que el "SAPR_TPERIODO.NEL_INTENTO_CONFIRMACION" o no encuentre datos en la "SAPR_TPLANXMENSAJE" y el "Confirmacion" esté vació y 
      el valor del parámetro "FechaValorConfirmacionMaxReintentosPeriodos" sea mayor que el "SAPR_TPERIODO.NEL_INTENTO_CONFIRMACION":
        Para cada registro de la tabla "SAPR_TPERIODO" que se identifique con los datos del "Periodo":
          Además, se deberá mantener en memoria (hasta el fin de la ejecución) que el "Periodo" tuvo un error en la confirmación pero que es posible el reintento. 
      */
       
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                      par$des_origen      => const$des_origen,
                      par$des_version     => const$version,                            
                      par$des_detalle     => 'Comienza actualización de SAPR_TPERIODO de OID_PERIODO: ' || par$oid_periodo,
                      par$cod_identificador   => '');
      
      --Agrego los datos en la tabla auxiliar para ser utilizado en el envío de correo
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CALIFICADOR) 
      VALUES(par$oid_periodo, 'PERIODO_A_REPROCESAR');

      IF var$mensajePlan IS NULL OR var$mensajePlan <> 'EC' THEN
        UPDATE SAPR_TPERIODO
          SET NEL_INTENTO_CONFIRMACION = NEL_INTENTO_CONFIRMACION + 1
        WHERE OID_PERIODO = par$oid_periodo;
      END IF;

      -- Actualizar SAPR_TPERIODO a REPROCESAR
      UPDATE SAPR_TPERIODO
        SET OID_ESTADO_PERIODO = par$oid_estado_periodo_RE,
          COD_MENSAJE_CONFIRMACION	= par$cod_mensaje,
          BOL_CONFIRMADO	= 0,
          GMT_MODIFICACION	= SYSTIMESTAMP,
          DES_USUARIO_MODIFICACION	= par$cod_usuario
      WHERE OID_PERIODO = par$oid_periodo;
    ELSIF var$esNc = 1 THEN
       --*CASO 3
      /*Caso el "Periodo" tenga un "Codigo" que, al validar contra el "SAPR_TPLANXMENSAJE.COD_MENSAJE" tenga en el 
      "SAPR_TPLANXMENSAJE.COD_TIPO_MENSAJE" el valor "KO" y el "SAPR_TPLANXMENSAJE.BOL_SIN_REINTENTOS" el valor "1" 
      o "FechaValorConfirmacionMaxReintentosPeriodos" sea igual o menor que el "SAPR_TPERIODO.NEL_INTENTO_CONFIRMACION":
        Para cada registro de la tabla "SAPR_TPERIODO" que se identifique con los datos del "Periodo":
          Además, se deberá mantener en memoria (hasta el fin de la ejecución) que el "Periodo" tuvo un error en la confirmación pero que no es posible el reintento.
      */
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                    par$des_origen      => const$des_origen,
                    par$des_version     => const$version,                            
                    par$des_detalle     => 'Comienza actualización de SAPR_TPERIODO de OID_PERIODO: ' || par$oid_periodo,
                    par$cod_identificador   => '');

      --Agrego los datos en la tabla auxiliar para ser utilizado en el envío de correo
      INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CALIFICADOR) 
      VALUES(par$oid_periodo, 'PERIODO_A_NO_CONFIRMAR');

      -- Actualizar SAPR_TPERIODO a NO ACREDITADO
      UPDATE SAPR_TPERIODO
        SET OID_ESTADO_PERIODO = par$oid_estado_periodo_NC,
          COD_MENSAJE_CONFIRMACION	= par$cod_mensaje,
          BOL_CONFIRMADO	= 0,
          NEL_INTENTO_CONFIRMACION = NEL_INTENTO_CONFIRMACION + 1,
          GMT_MODIFICACION	= SYSTIMESTAMP,
          DES_USUARIO_MODIFICACION	= par$cod_usuario
      WHERE OID_PERIODO = par$oid_periodo;
    ELSE
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
        par$des_origen      => const$des_origen,
        par$des_version     => const$version,                            
        par$des_detalle     => 'No fue posible determinar la acción para el período de oid_periodo: ' || par$oid_periodo, 
        par$cod_identificador   => '');
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'EXCEPTION sconfirmar_periodos_bo: ' || sqlerrm,
                            par$cod_identificador   => '');

      DBMS_OUTPUT.PUT_LINE('EXCEPTION sconfirmar_periodos_bo' || sqlerrm);
      RAISE;
  END sconfirmar_periodos_bo;

PROCEDURE sreconfirmar_periodos(
                                par$oid_llamada           IN gepr_pcomon_###VERSION###.tipo$oid_,
                                par$adevice_id            IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$aidentificador        IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$atipo_periodo         IN gepr_pcomon_###VERSION###.tipo$cods_,
                                par$cod_usuario           IN gepr_pcomon_###VERSION###.tipo$usr_,
                                par$cod_cultura           IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$cod_pais              IN gepr_pcomon_###VERSION###.tipo$cod_,
                                par$rc_validaciones       OUT sys_refcursor) IS

	-- Variables de LOG
    const$des_origen      CONSTANT gepr_pcomon_###VERSION###.tipo$desc_ := const$codFuncionalidad || '.sreconfirmar_periodos';
	var$detalle           VARCHAR2(4000);
	var$detalle_actual    VARCHAR2(4000);

    -- Variables para validaciones
    var$oid_validaciones       gepr_pcomon_###VERSION###.tipo$oids_;
    var$cod_validaciones       gepr_pcomon_###VERSION###.tipo$cods_;
    var$des_validaciones       gepr_pcomon_###VERSION###.tipo$descs_;
    var$toid_validaciones      varchar2_array;
    var$tcod_validaciones      varchar2_array;
    var$tdes_validaciones      varchar2_array;

    -- Variables locales
    var$cod_pais              gepr_pcomon_###VERSION###.tipo$cod_;
    var$oid_pais              gepr_pcomon_###VERSION###.tipo$oid_;
    var$fyh_confirmacion      gepr_pcomon_###VERSION###.tipo$fyh_;
    var$cod_confirmacion      gepr_pcomon_###VERSION###.tipo$desc_;
    var$existe                gepr_pcomon_###VERSION###.tipo$nel_;
    var$mensaje               gepr_pcomon_###VERSION###.tipo$desc_;

    BEGIN
  	-- INICIO - LOG de parametros iniciales
		IF par$oid_llamada IS NOT NULL THEN
			var$detalle := q'[Parametros iniciales: 
            par$oid_llamada: ]'             || par$oid_llamada || q'[
            par$cod_cultura: ]'             || par$cod_cultura || q'[
            par$cod_usuario: ]'             || par$cod_usuario || q'[
            par$cod_pais: ]'                || par$cod_pais ;

			SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => var$detalle,
                            par$cod_identificador   => '');
    	    /* INICIO LOG de arrays asociativos */
			IF par$adevice_id IS NOT NULL AND par$adevice_id.COUNT > 0 THEN
				var$detalle := '';
				FOR idx IN  par$adevice_id.first ..  par$adevice_id.last LOOP 
						var$detalle_actual := '';
						IF par$adevice_id(idx) IS NOT NULL THEN
							var$detalle_actual := 'Parametros iniciales: par$adevice_id(' || idx || '):  ' || par$adevice_id(idx) || ' ';
						ELSE
							var$detalle_actual := 'Parametros iniciales: par$adevice_id(' || idx || '):  NULL ';
						END IF;
						IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
							SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
														par$des_origen      => const$des_origen,
														par$des_version     => const$version,                            
														par$des_detalle     => var$detalle,
														par$cod_identificador   => '');
							var$detalle := var$detalle_actual;
						ELSE
							var$detalle := var$detalle || const$new_line || var$detalle_actual;
						END IF;
				END LOOP;
				IF var$detalle IS NOT NULL THEN
					SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
													par$des_origen      => const$des_origen,
													par$des_version     => const$version,                            
													par$des_detalle     => var$detalle,
													par$cod_identificador   => '');
				END IF;
            END IF;
			IF par$aidentificador IS NOT NULL AND par$aidentificador.COUNT > 0 THEN
				var$detalle := '';
				FOR idx IN  par$aidentificador.first ..  par$aidentificador.last LOOP 
						var$detalle_actual := '';
						IF par$aidentificador(idx) IS NOT NULL THEN
							var$detalle_actual := 'Parametros iniciales: par$aidentificador(' || idx || '):  ' || par$aidentificador(idx) || ' ';
						ELSE
							var$detalle_actual := 'Parametros iniciales: par$aidentificador(' || idx || '):  NULL ';
						END IF;
						IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
							SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
														par$des_origen      => const$des_origen,
														par$des_version     => const$version,                            
														par$des_detalle     => var$detalle,
														par$cod_identificador   => '');
							var$detalle := var$detalle_actual;
						ELSE
							var$detalle := var$detalle || const$new_line || var$detalle_actual;
						END IF;
				END LOOP;
				IF var$detalle IS NOT NULL THEN
					SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
													par$des_origen      => const$des_origen,
													par$des_version     => const$version,                            
													par$des_detalle     => var$detalle,
													par$cod_identificador   => '');
				END IF;
			END IF;
			IF par$atipo_periodo IS NOT NULL AND par$atipo_periodo.COUNT > 0 THEN
				var$detalle := '';
				FOR idx IN  par$atipo_periodo.first ..  par$atipo_periodo.last LOOP 
						var$detalle_actual := '';
						IF par$atipo_periodo(idx) IS NOT NULL THEN
							var$detalle_actual := 'Parametros iniciales: par$atipo_periodo(' || idx || '):  ' || par$atipo_periodo(idx) || ' ';
						ELSE
							var$detalle_actual := 'Parametros iniciales: par$atipo_periodo(' || idx || '):  NULL ';
						END IF;
						IF (LENGTH(var$detalle) + LENGTH(const$new_line) + LENGTH(var$detalle_actual)) > 4000 THEN
							SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
														par$des_origen      => const$des_origen,
														par$des_version     => const$version,                            
														par$des_detalle     => var$detalle,
														par$cod_identificador   => '');
							var$detalle := var$detalle_actual;
						ELSE
							var$detalle := var$detalle || const$new_line || var$detalle_actual;
						END IF;
				END LOOP;
				IF var$detalle IS NOT NULL THEN
					SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada         => par$oid_llamada,
													par$des_origen      => const$des_origen,
													par$des_version     => const$version,                            
													par$des_detalle     => var$detalle,
													par$cod_identificador   => '');
				END IF;
			END IF;		
            /*FIN LOG de arrays asociativos*/
        END IF;				
    --FIN - LOG de parametros iniciales

        -- #### Inicializar los cursores ####
        OPEN par$rc_validaciones FOR SELECT NULL CODIGO FROM DUAL WHERE 1 <> 1;

        -- Limpiar tabla temporal
        DELETE SAPR_GTT_TAUXILIAR;
        COMMIT;

        /* Validar código pais*/
        /* Al recibir el par$cod_pais de tipo OUT necesito crear una variable*/
        var$cod_pais := par$cod_pais;
        GEPR_PPAIS_###VERSION###.srecuperar_pais(par$oid_llamada => par$oid_llamada,
                            par$cod_identificador_ajeno => '',
                            par$cod_pais => var$cod_pais,
                            par$oid_pais => var$oid_pais,
                            par$cod_cultura => par$cod_cultura);
        
        IF var$oid_pais IS NOT NULL THEN
            FOR idx IN par$aidentificador.first .. par$aidentificador.last LOOP
                BEGIN

                --Validar que existan períodos a reconfirmar
                    SELECT COUNT(1) INTO var$existe 
                        FROM SAPR_TPERIODO PER
                        INNER JOIN SAPR_TTIPO_PERIODO TPER ON TPER.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO
                        INNER JOIN SAPR_TMAQUINA MAQ ON MAQ.OID_MAQUINA = PER.OID_MAQUINA
                        INNER JOIN SAPR_TESTADO_PERIODO ESTADO ON ESTADO.OID_ESTADO_PERIODO = PER.OID_ESTADO_PERIODO
                        INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
                        INNER JOIN SAPR_TTIPO_PLANIFICACION TPLANI ON TPLANI.OID_TIPO_PLANIFICACION = PLANI.OID_TIPO_PLANIFICACION
                        WHERE TPLANI.COD_TIPO_PLANIFICACION = 'FECHA_VALOR_CONFIR'
                            AND ESTADO.COD_ESTADO_PERIODO IN ('NA', 'NC') 
                            AND MAQ.COD_IDENTIFICACION = par$adevice_id(idx)
                            AND PER.COD_PERIODO_CONFIRMACION = par$aidentificador(idx)
                            AND TPER.COD_TIPO_PERIODO = par$atipo_periodo(idx);
                    IF var$existe > 0 THEN
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Índice: ' || idx || '. Existen periodos para reconfirmar para MAQ.COD_IDENTIFICACION: ' || par$adevice_id(idx) || ' , PER.COD_PERIODO_CONFIRMACION: ' || par$aidentificador(idx) ||' y  TPER.COD_TIPO_PERIODO: ' || par$atipo_periodo(idx), 
                        par$cod_identificador   => '');

                        -- GRABAMOS EN LA TABLA AUXILIAR LOS PERIODOS ENCONTRADOS PARA EL IDENTIFICADOR , LA MÁQUINA Y EL TIPO DE PERIODO
                        INSERT INTO SAPR_GTT_TAUXILIAR (OID_CAMPO1, COD_CALIFICADOR) 
                        SELECT PER.OID_PERIODO, 'PERIODO_RECONFIRMAR'
                        FROM SAPR_TPERIODO PER
                        INNER JOIN SAPR_TTIPO_PERIODO TPER ON TPER.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO
                        INNER JOIN SAPR_TMAQUINA MAQ ON MAQ.OID_MAQUINA = PER.OID_MAQUINA
                        INNER JOIN SAPR_TESTADO_PERIODO ESTADO ON ESTADO.OID_ESTADO_PERIODO = PER.OID_ESTADO_PERIODO
                        INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
                        INNER JOIN SAPR_TTIPO_PLANIFICACION TPLANI ON TPLANI.OID_TIPO_PLANIFICACION = PLANI.OID_TIPO_PLANIFICACION
                        WHERE TPLANI.COD_TIPO_PLANIFICACION = 'FECHA_VALOR_CONFIR'
                            AND ESTADO.COD_ESTADO_PERIODO IN ('NA', 'NC') 
                            AND MAQ.COD_IDENTIFICACION = par$adevice_id(idx)
                            AND PER.COD_PERIODO_CONFIRMACION = par$aidentificador(idx)
                            AND TPER.COD_TIPO_PERIODO = par$atipo_periodo(idx);
                    ELSE
                    /*Validar si existe el periodo*/
                     SELECT COUNT(1) INTO var$existe 
                        FROM SAPR_TPERIODO PER
                        INNER JOIN SAPR_TTIPO_PERIODO TPER ON TPER.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO
                        INNER JOIN SAPR_TMAQUINA MAQ ON MAQ.OID_MAQUINA = PER.OID_MAQUINA
                        INNER JOIN SAPR_TESTADO_PERIODO ESTADO ON ESTADO.OID_ESTADO_PERIODO = PER.OID_ESTADO_PERIODO
                        INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
                        INNER JOIN SAPR_TTIPO_PLANIFICACION TPLANI ON TPLANI.OID_TIPO_PLANIFICACION = PLANI.OID_TIPO_PLANIFICACION
                        WHERE TPLANI.COD_TIPO_PLANIFICACION = 'FECHA_VALOR_CONFIR'
                            AND MAQ.COD_IDENTIFICACION = par$adevice_id(idx)
                            AND PER.COD_PERIODO_CONFIRMACION = par$aidentificador(idx)
                            AND TPER.COD_TIPO_PERIODO = par$atipo_periodo(idx);
                     IF var$existe > 0 THEN
                         /*Validar si el periodo ya fue confirmado*/
                        SELECT PER.FYH_CONFIRMACION, PER.COD_CONFIRMACION INTO var$fyh_confirmacion , var$cod_confirmacion
                        FROM SAPR_TPERIODO PER
                        INNER JOIN SAPR_TTIPO_PERIODO TPER ON TPER.OID_TIPO_PERIODO = PER.OID_TIPO_PERIODO
                        INNER JOIN SAPR_TMAQUINA MAQ ON MAQ.OID_MAQUINA = PER.OID_MAQUINA
                        INNER JOIN SAPR_TESTADO_PERIODO ESTADO ON ESTADO.OID_ESTADO_PERIODO = PER.OID_ESTADO_PERIODO
                        INNER JOIN SAPR_TPLANIFICACION PLANI ON PLANI.OID_PLANIFICACION = PER.OID_PLANIFICACION
                        INNER JOIN SAPR_TTIPO_PLANIFICACION TPLANI ON TPLANI.OID_TIPO_PLANIFICACION = PLANI.OID_TIPO_PLANIFICACION
                        WHERE TPLANI.COD_TIPO_PLANIFICACION = 'FECHA_VALOR_CONFIR'
                            AND PER.BOL_CONFIRMADO = 1
                            AND PER.FYH_CONFIRMACION IS NOT NULL
                            AND MAQ.COD_IDENTIFICACION = par$adevice_id(idx)
                            AND PER.COD_PERIODO_CONFIRMACION = par$aidentificador(idx)
                            AND TPER.COD_TIPO_PERIODO = par$atipo_periodo(idx)
                            AND ROWNUM <= 1; /*Devolvemos solo 1 en caso de que haya varios periodos confirmados con el mismo identificador, device id y tipo*/

                        
                        /*Buscamos el mensaje traducido*/
                        /*2040350006 - El período del DeviceID "{0}" y Identificador "{1}" con el tipo de periodo "{Acreditación, Shipout, Ingreso a Bóveda}" ya fue acreditado "{2}" (Fecha que fue informada y que se grabó en el dicho período)
(código confirmación "{3}").*/
                        var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040350006',
                                                                    'RECONFIRMARPERIODOS',
                                                                    gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                                                    par$adevice_id(idx) || '|' || par$aidentificador(idx) || '|' || par$atipo_periodo(idx) || '|' || var$fyh_confirmacion || '|' || var$cod_confirmacion,
                                                                    0);
                         SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => var$mensaje,
                        par$cod_identificador   => '');
                        --Guardamos en las variables de validación
                        var$oid_validaciones(var$oid_validaciones.COUNT) := 'VALIDACIONES';
                        var$cod_validaciones(var$cod_validaciones.COUNT) := '2040350006';
                        var$des_validaciones(var$des_validaciones.COUNT) := var$mensaje;

                     ELSE
                       
                        
                        /*Buscamos el mensaje traducido*/
                        /*2040350005 - No fue posible encontrar un período con el DeviceID "{0}", el Identificador "{1}" que esté pendiente de reconfirmación "{(No Acreditado "NA"), (No Confirmado "NC")}" y tenga el tipo de periodo "{Acreditación, Shipout, Ingreso a Bóveda}"*/
                        var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'2040350005',
                                                                    'RECONFIRMARPERIODOS',
                                                                    gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                                                    par$adevice_id(idx) || '|' || par$aidentificador(idx),
                                                                    0);
                         SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => var$mensaje,
                        par$cod_identificador   => '');
                        --Guardamos en las variables de validación
                        var$oid_validaciones(var$oid_validaciones.COUNT) := 'VALIDACIONES';
                        var$cod_validaciones(var$cod_validaciones.COUNT) := '2040350005';
                        var$des_validaciones(var$des_validaciones.COUNT) := var$mensaje;
                     END IF; 

                   
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        ROLLBACK;
                        SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Índice: ' || idx || '. Hizo roolback por EXCEPTION, identificador de período: ' || par$aidentificador(idx) || 'Error: ' || sqlerrm,
                        par$cod_identificador   => '');
                        
                        /*Buscamos el mensaje traducido*/
                        /*3040350001 - Se produjo el siguiente error en la aplicación: {0}.*/
                        var$mensaje := gepr_putilidades_###VERSION###.ftraduzir(par$cod_cultura,'3040350001',
                                                                    'RECONFIRMARPERIODOS',
                                                                    gepr_pcomon_###VERSION###.const$codAplicacionGenesis,
                                                                    sqlerrm,
                                                                    0);
                        --Guardamos en las variables de validación
                        var$oid_validaciones(var$oid_validaciones.COUNT) := 'VALIDACIONES';
                        var$cod_validaciones(var$cod_validaciones.COUNT) := '3040350001';
                        var$des_validaciones(var$des_validaciones.COUNT) := var$mensaje;
                END;
            
            END LOOP;

            SELECT COUNT(1) INTO var$existe FROM SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR = 'PERIODO_RECONFIRMAR';

            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Cantidad de registros a actualizar: ' || var$existe,
                        par$cod_identificador   => '');
            /*Actualizo todos los periodos cargados SET OID_ESTADO_PERIODO = RE y NEL_INTENTO_CONFIRMACION = 0*/
            UPDATE SAPR_TPERIODO SET OID_ESTADO_PERIODO = (SELECT OID_ESTADO_PERIODO FROM SAPR_TESTADO_PERIODO WHERE COD_ESTADO_PERIODO = 'RE'), NEL_INTENTO_CONFIRMACION = 0
            WHERE OID_PERIODO IN (SELECT OID_CAMPO1 FROM SAPR_GTT_TAUXILIAR WHERE COD_CALIFICADOR = 'PERIODO_RECONFIRMAR');
            COMMIT;
        ELSE
            DBMS_OUTPUT.PUT_LINE('Se encuentran errores en la validación del país');
            SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                        par$des_origen      => const$des_origen,
                        par$des_version     => const$version,                            
                        par$des_detalle     => 'Se encuentran errores en la validación del país',
                        par$cod_identificador   => '');

            -- Guardamos las validaciones de pais 
            FOR rec$validacion IN (
                SELECT OID_CAMPO1, COD_CAMPO2
                FROM SAPR_GTT_TAUXILIAR
                WHERE COD_CALIFICADOR = 'VALIDACIONES')
            LOOP
                var$oid_validaciones(var$oid_validaciones.COUNT) := 'VALIDACION_PAIS';
                var$cod_validaciones(var$cod_validaciones.COUNT) := rec$validacion.OID_CAMPO1;
                var$des_validaciones(var$des_validaciones.COUNT) := rec$validacion.COD_CAMPO2;
            END LOOP;
        END IF;

        /* Validaciones */
        IF NOT gepr_putilidades_###VERSION###.farray_vacio_desc(var$des_validaciones) THEN
        --SE CONVIERTE LOS ARRAY A TABLES
        var$toid_validaciones := gepr_putilidades_###VERSION###.fconverter_array_table(par$table_varchar2 => var$oid_validaciones);
        var$tcod_validaciones := gepr_putilidades_###VERSION###.fconverter_array_cod_table(par$table_varchar2 => var$cod_validaciones);
        var$tdes_validaciones := gepr_putilidades_###VERSION###.fconverter_array_desc_table(par$table_varchar2 => var$des_validaciones);


        OPEN par$rc_validaciones FOR
            WITH OID AS (
                    SELECT rownum IDX, C.COLUMN_VALUE
                    FROM TABLE(var$toid_validaciones) C
                    WHERE C.COLUMN_VALUE IS NOT NULL
            ),
            COD AS (
                    SELECT rownum IDX, C.COLUMN_VALUE
                    FROM TABLE(var$tcod_validaciones) C
                    WHERE C.COLUMN_VALUE IS NOT NULL
            ),
            DES AS (
                    SELECT rownum IDX, C.COLUMN_VALUE
                    FROM TABLE(var$tdes_validaciones) C
                    WHERE C.COLUMN_VALUE IS NOT NULL
            )
            SELECT OID.COLUMN_VALUE OID_DOCUMENTO,
                    COD.COLUMN_VALUE CODIGO,
                    DES.COLUMN_VALUE MENSAJE
            FROM OID
            INNER JOIN COD ON COD.IDX = OID.IDX
            INNER JOIN DES ON DES.IDX = COD.IDX;
        END IF;

	EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;

      SAPR_PLOG_API.SAGREGA_DETALLE(par$oid_llamada  => par$oid_llamada,
                            par$des_origen      => const$des_origen,
                            par$des_version     => const$version,                            
                            par$des_detalle     => 'Hizo roolback por EXCEPTION: ' || sqlerrm,
                            par$cod_identificador   => '');

      DBMS_OUTPUT.PUT_LINE('Realiza el ROLLBACK por EXCEPTION' || sqlerrm);

      RAISE;
  END sreconfirmar_periodos;

END SAPR_PSERVICIO_###VERSION###;
/